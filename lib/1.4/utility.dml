/*
  Â© 2013-2022 Intel Corporation
  SPDX-License-Identifier: 0BSD
*/

dml 1.4;

import "simics/devs/signal.dml";
import "simics/devs/ram.dml";
import "simics/devs/memory-space.dml";
import "simics/devs/translator.dml";
import "simics/model-iface/transaction.dml";

template _reg_or_field {
    param is_register : bool;
}

/**

# Standard Templates

This chapter describes the standard templates included the DML
library. The templates can be used for both registers and fields. The
templates can be accessed after importing `utility.dml`.

The most common device register functionality is included in the
standard templates.

Note that many standard templates has the same functionality and only
differ by name or log-messages printed when writing or reading
them. The name of the template help developers to get a quick overview
of the device functionality. An example are the *undocumented*
and *reserved* templates. Both have the same
functionality. However, the *undocumented* template hints that
something in the device documentation is unclear or missing, and the
*reserved* template that the register or field should not be used
by software.

The sub-sections use *object* as a combined name for registers
and fields. The sub-sections refers to software and hardware reads and
writes. Software reads and writes are defined as accesses using the
`io_memory` interface (write/reads to memory/io mapped
device). Software reads and writes use the DML built-in read and write
methods. Hardware read writes are defined as accesses using Simics
configuration attributes, using the DML built-in set and get
methods. Device code can still modify a register or device even if
hardware modification is prohibited.

## Templates for reset

Reset behavior can vary quite a bit between different devices. DML
has no built-in support for handling reset, but there are standard
templates in `utility.dml` to cover some common reset
  mechanisms.

  There are three standard reset types:

<dl><dt>

Power-on reset
</dt><dd>

The reset that happens when power is
first supplied to a device.
</dd><dt>

Hard reset
</dt><dd>

Typically triggered by a physical hard
reset line that can be controlled from various sources, such as
a watchdog timer or a physical button. Often the same as a
power-on reset.
</dd><dt>

Soft reset
</dt><dd>

This usually refers to a reset induced by
software, e.g. by a register write. Not all devices have a soft
reset, and some systems may support more than one type of soft
reset.
</dd></dl>

  Usually, the effect of a reset is that all registers are restored to
  some pre-defined value.

  In DML, the reset types can be enabled by instantiating the
  templates `poreset`, `hreset`
  and `sreset`, respectively. These will define a port with the
  corresponding upper-case name
  (`POWER`, `HRESET`, `SRESET`), which implements
  the `signal` interface, triggering the corresponding
  reset type on raising edge. This happens by invoking a corresponding
  method (`power_on_reset`, `hard_reset`
  and `soft_reset`, respectively), in all
  objects implementing a given template
  (`power_on_reset`, `hard_reset`
  and `soft_reset`, respectively). The default is that all
  registers and fields implement these templates, with the default
  behavior being to restore to the value of the `init_val` parameter.

  The default implementation of all reset methods recursively calls
  the corresponding reset method in all sub-objects. Thus, if a reset
  method is overridden in an object without
  calling `default()`, then reset is effectively suppressed in
  all sub-objects.

  The two most common overrides of reset behavior are:

* to reset to a different value. In the general case, this can
  be done with an explicit method override. In the case of soft
  reset, you can also use the standard
  template `soft_reset_val` which allows you to configure
  the reset value with a parameter `soft_reset_val`.


* to suppress reset. This can be done with a standard
  template: `sticky` suppresses soft reset only,
  while `no_reset` suppresses all resets.

  It is quite common that hard reset and power-on reset behave
  identically. In this case, we recommend that only a `HRESET` port is
  created; this way, the presence of a `POWER` port is an indication
  that the device actually provides a distinct behavior on power cycling.

  There are some less common reset use cases:

* In some devices, the standard reset types may not map well to
  the hardware, typically because there may be more than one reset
  type that could be viewed as a soft reset. In this case, we
  recommend that `SRESET` is replaced with device-specific port
  names that map better to the hardware, but that the `POWER` and
  `HRESET` port names are preserved if they are unambiguous.

* In some cases, it is desirable to accurately simulate how a
  device acts in a powered-off state. This would typically mean
  that the device does not react to other stimuli until power is
  turned on again.

  The recommended way to simulate a powered-off state, is to let the
  high signal level of the `POWER` port represent that the device has
  power, and react as if power is down while the signal is
  low. Furthermore, the device is reset when the `POWER` signal is
  lowered.

  If this scheme is used by a device, then a device will be considered
  turned off after instantiation, so the `POWER` signal must be raised
  explicitly before the device can function normally.

  Thus, there are two rather different ways to handle devices that
  have a `POWER` port:

  * `POWER` can be treated as a pure reset port, which stays low for
    most of the time and is rapidly raised and lowered to mark a
    power-on reset. This is the most convenient way to provide a power
    signal, but it only works if the device only uses `POWER` for
    power-on reset. If the device models power supply accurately, then
    it will not function as expected, because it will consider power
    to be off.

  * `POWER` can be accurately treated as a power supply, meaning that
    the signal is raised before simulation starts, and lowered when
    power goes down. A reset is triggered by a lower followed by a
    raise. This approach is less convenient to implement, but more
    correct: The device will function correctly both if the device
    does an accurate power supply simulation, and if it only uses
    `POWER` for power-on reset.

*/

// Instantiate this in any object to get a call to
// Default is to recurse into power_on_reset() calls in all subobjects.
// For registers and fields, the init() method is called after
// recursing, which in turn resets .val to the init_val parameter (default 0).
template power_on_reset {
    param _each_power_on_reset : sequence(power_on_reset);
    param _each_power_on_reset = each power_on_reset in (this);

    shared method power_on_reset() default {
        this._default_power_on_reset();
    }
    shared method _default_power_on_reset() default {
        this.power_on_reset_subobjs();
    }
    shared method power_on_reset_subobjs() {
        foreach obj in (this._each_power_on_reset)
            obj.power_on_reset();
    }
}

template _init_val_power_on_reset is (init_val, power_on_reset) {
    shared method _default_power_on_reset() {
        this.power_on_reset_subobjs();
        this.init();
    }
}

// Instantiate this on top level to support power-on reset.
template poreset is power_on_reset {
    port POWER {
        implement signal {
            method signal_raise() {
                dev.power_on_reset();
            }
            method signal_lower() {
            }
        }
    }

    in each init_val {
        is _init_val_power_on_reset;
    }
}

template hard_reset {
    param _each_hard_reset : sequence(hard_reset);
    param _each_hard_reset = each hard_reset in (this);

    shared method hard_reset() default {
        this._default_hard_reset();
    }
    shared method _default_hard_reset() default {
        this.hard_reset_subobjs();
    }
    shared method hard_reset_subobjs() {
        foreach obj in (this._each_hard_reset)
            obj.hard_reset();
    }
}

template _init_val_hard_reset is (init_val, hard_reset) {
    shared method _default_hard_reset() {
        this.hard_reset_subobjs();
        this.init();
    }
}

// Instantiate this on top level to support hard reset.
template hreset is hard_reset {
    port HRESET {
        implement signal {
            method signal_raise() {
                dev.hard_reset();
            }
            method signal_lower() {
            }
        }
    }

    in each init_val {
        is _init_val_hard_reset;
    }
}

/**
### power\_on\_reset, hard\_reset, soft\_reset

<section>

#### Description

Implemented on any
object to get a callback on the corresponding reset event.  Automatically
implemented by registers and fields.

#### Related Templates

poreset, hreset, sreset

</section>
*/

template soft_reset {
    param _each_soft_reset : sequence(soft_reset) ;
    param _each_soft_reset = each soft_reset in (this);
    shared method soft_reset() default {
        this._default_soft_reset();
    }
    shared method _default_soft_reset() default {
        this.soft_reset_subobjs();
    }
    shared method soft_reset_subobjs() {
        foreach obj in (this._each_soft_reset)
            obj.soft_reset();
    }
}

template _init_val_soft_reset is (init_val, soft_reset) {
    shared method _default_soft_reset() {
        this.soft_reset_subobjs();
        this.init();
    }
}

/**
### poreset, hreset, sreset

<section>

#### Description

Implemented on the top level to get standard reset behaviour,
for power-on reset, hard reset and soft reset, respectively.

#### Related Templates

power\_on\_reset, hard\_reset, soft\_reset

</section>
*/

// Instantiate this on top level to support soft reset.
template sreset is soft_reset {
    port SRESET {
        implement signal {
            method signal_raise() {
                dev.soft_reset();
            }
            method signal_lower() {
            }
        }
    }

    in each init_val {
        is _init_val_soft_reset;
    }
}

/**
## Templates for registers and fields

The following templates can be applied to both registers and fields.  Most of
them affect either the write or read operation; if applied on a register it
will disregard fields. For instance, when applying the `read_unimpl` template
on a register with fields, then the read will ignore any implementations of
`read` or `read_field` in fields, and return the current register value
(through `get`), ignoring any `read` overrides in fields. However, writes will
still propagate to the fields.

### soft\_reset\_val

<section>

#### Description

Implemented on a register or field. Upon soft reset, the reset value is
defined by the required `soft_reset_val` parameter,
instead of the default `init_val`.

#### Related Templates

soft\_reset

</section>
*/

template soft_reset_val is (soft_reset, set_val) {
    param soft_reset_val : uint64;
    shared method soft_reset() {
        soft_reset_subobjs();
        set_val(soft_reset_val);
    }
}

/**
### ignore\_write

<section>

#### Description

Writes are ignored. This template might also be useful for read-only
fields inside an otherwise writable register. See the documentation for the
`read_only` template for more information.

#### Log Output

None.

</section>
*/
template ignore_write is write_field {
    method write_field(uint64 value, uint64 enabled_bits, void *aux) {
    }
}

/**
### read\_zero

<section>

#### Description

Reads return 0, regardless of register/field value. Writes are
unaffected by this template.

#### Log Output

None.

</section>
*/
template read_zero is read_field {
    method read_field(uint64 enabled_bits, void *aux) -> (uint64) {
        return 0;
    }
}

/**
### read\_only

<section>

#### Description

The object value is read-only for software, the object value can be
modified by hardware.

#### Log Output

First software write results in a spec\_violation log-message on
log-level 1, remaining writes on log-level 2. Fields will only log if the
written value is different from the old value.

If the register containing the read-only field also contains writable fields,
it may be better to use the ignore\_write template instead, since software
often do not care about what gets written to a read-only field, causing
unnecessary logging.

</section>
*/
template read_only is (write_field, _reg_or_field, _qname, get_val) {
    shared method write_field(uint64 val, uint64 enabled_bits, void* aux) {
        if (this.is_register ||
            ((val & enabled_bits) != (this.get_val() & enabled_bits))) {
            log spec_viol, 1 then 2, Register_Write:
                "Write to read-only %s %s "
                + "(value written = %#x, contents = %#x).",
                this.is_register ? "register" : "field",
                this._qname(), val, this.get_val();
       }
    }
}

in each (read_only, register) { param _is_read_only = true; }

/**
### write\_only

<section>

#### Description

The register value can be modified by software but can't be read back, reads
return 0. Only for use on registers; use `read_zero` for write-only
fields.

#### Log Output

The first time the object is read there is a spec\_violation
log-message on log-level 1, remaining reads on log-level 2.

</section>
*/
template write_only is (read_field, _qname) {
    shared method read_field(uint64 enabled_bits, void* aux) -> (uint64) {
        log spec_viol, 1 then 2, Register_Read:
            "Read from write-only register %s (returning 0).", _qname();
        return 0;
    }
}

/**
### write\_1\_clears

<section>

#### Description

Software can only clear bits. This feature is often used when
hardware sets bits and software clears them to acknowledge.
Software write 1's to clear bits. The new object value is
a bitwise AND of the old object value and the bitwise
complement of the value written by software.

#### Log Output

None.

</section>
*/
template write_1_clears is (write_field, _simple_write) {
    shared method write_field(uint64 value, uint64 enabled_bits, void* aux) {
        _simple_write(~value, enabled_bits & value);
    }
}

/**
### clear\_on\_read

<section>

#### Description

Software reads return the object value. The object value is then reset to 0
as a side-effect of the read.

#### Log Output

None.

</section>
*/
template clear_on_read is (read_field, set_val, get_val) {
    shared method read_field(uint64 enabled_bits, void *aux) -> (uint64) {
        local uint64 value = get_val();
        this.set_val(0);
        return value & enabled_bits;
    }
}

/**
### write\_1\_only

<section>

#### Description

Software can only set bits to 1.
The new object value is the bitwise OR of the
old object value and the value written by software.

#### Log Output

None.

#### Related Templates

write\_0\_only

</section>
*/
template write_1_only is (write_field, _simple_write) {
    shared method write_field(uint64 value, uint64 enabled_bits, void *aux) {
        _simple_write(this.get_val() | value, enabled_bits);
    }
}

/**
### write\_0\_only

<section>

#### Description

Software can only set bits to 0.
The new object value is the bitwise AND of the
old object value and the value written by software.

#### Log Output

None.

#### Related Templates

write\_1\_only

</section>
*/
template write_0_only is (write_field, _simple_write) {
    shared method write_field(uint64 value, uint64 enabled_bits, void *aux) {
        _simple_write(this.get_val() & value, enabled_bits);
    }
}

/**
### read\_constant

<section>

#### Description

Reads return a constant value.

Writes are unaffected by this template. The read value is unaffected
by the value of the register or field.

#### Log Output

None.

#### Parameters

read\_val: the constant value

#### Related Templates

constant, silent\_constant

</section>
*/
template read_constant is (read_field) {
    param read_val : uint64;
    // the parameter was called value in DML 1.2
    param value default undefined;
    #if (defined(value)) {
        error "please assign parameter 'read_val' instead of 'value'";
    }
    method read_field(uint64 enabled_bits, void *aux) -> (uint64) {
        return read_val & enabled_bits;
    }
}

/**
### constant

<section>

#### Description

Writes are forbidden and have no effect.

The object still has backing storage, which affects the value being read.
Thus, an end-user can modify the constant value by writing to the register's
attribute. Such tweaks will survive a reset.

Using the `constant` template marks that the object is intended to
stay constant, so the model should not update the register value, and not
override the `read` method. Use the template
`read_only` if that is desired.

#### Log Output

First write to register or field (if field value is not
equal to write value) results in a spec\_violation log-message on
log-level 1, remaining writes on log-level 2.

#### Parameters

init\_val: the constant value

#### Related Templates

read\_constant, silent\_constant,
read\_only

</section>
*/
template constant is (_reg_or_field, write_field, _qname, get_val, no_reset) {
    param value default undefined;
    #if (defined(value)) {
        error "please assign parameter init_val instead of value";
    }
    shared method write_field(uint64 val, uint64 enabled_bits, void *aux) {
        if (this.is_register ||
            ((val & enabled_bits) != (this.get_val() & enabled_bits))) {
            log spec_viol, 1 then 2, Register_Write:
                "Write to constant %s %s (value written = %#x, "
                + "contents = %#x).",
                this.is_register ? "register" : "field",
                this._qname(), val, this.get_val();
        }
    }
}

/**
### silent\_constant

<section>

#### Description

The object value will remain constant.
Writes are ignored and do not update the object value.

The end-user can tweak the constant value; any tweaks will survive a reset.

By convention, the object value should not be modified by the model; if that
behaviour is wanted, use the `ignore_write` template instead.

#### Log Output

None.

#### Parameters

init\_val: the constant value

#### Related Templates

constant, read\_constant

</section>
*/
template silent_constant is (ignore_write, no_reset) {}

/**
### zeros

<section>

#### Description

The object value is constant 0.
Software writes are forbidden and do not update the object value.

#### Log Output

First software write to register or field (if field value is not
equal to write value) results in a spec\_violation log-message on
log-level 1, remaining writes on log-level 2.

</section>
*/
template zeros is (constant, init_val) {
    param init_val = 0;
}

/**
### ones

<section>

#### Description

The object is constant all 1's.
Software writes do not update the object value. The
object value is all 1's.

#### Log Output

First software write to register or field (if field value is not
equal to write value) results in a spec\_violation log-message on
log-level 1, remaining writes on log-level 2.

</section>
*/
template ones is (constant, init_val) {
    param init_val = cast(-1, uint64);
}

/**
### ignore

<section>

#### Description

The object's functionality is unimportant. Reads return 0.
Writes are ignored.

#### Log Output

None.

</section>
*/

template ignore is (ignore_write, no_reset) { }

/**
### reserved

<section>

#### Description

The object is marked reserved and should not be used by software.
Writes update the object value. Reads return the object value.

#### Log Output

First software write to register or field (if field value is not
equal to write value) results in a spec\_violation log-message on
log-level 2. No logs on subsequent writes.

</section>
*/
template reserved is (_simple_write, write_field, _reg_or_field, _qname) {
    session bool _has_logged = false;
    shared method write_field(uint64 val, uint64 enabled_bits, void* aux) {
        if (!_has_logged && (this.is_register ||
            ((val & enabled_bits) != (this.get_val() & enabled_bits)))) {
            log spec_viol, 2, Register_Write:
                "Write to reserved %s %s (value written = %#x,"
                + " contents = %#x), will not warn again.",
                this.is_register ? "register" : "field",
                this._qname(), val, this.get_val();
            this._has_logged = true;
        }
        _simple_write(val, enabled_bits);
    }
}

template _log_unimpl_read is (read_field, _reg_or_field, _qname, get_val) {
    shared method read_field(uint64 enabled_bits, void* aux) -> (uint64) {
        if (this.is_register) {
            log unimpl, 1 then 3, Register_Read:
                "Read from unimplemented register %s (contents = %#x).",
                this._qname(), this.get_val();
        }
        return get_val() & enabled_bits;
    }
}

template _log_unimpl_write is (write_field, _simple_write, _reg_or_field, _qname) {
    shared method write_field(uint64 val, uint64 enabled_bits, void* aux) {
        if (this.is_register ||
            ((val & enabled_bits) != (this.get_val() & enabled_bits))) {
            log unimpl, 1 then 3, Register_Write:
                "Write to unimplemented %s %s (value written = %#x, "
                + "contents = %#x).", this.is_register ? "register" : "field",
                this._qname(), val, this.get_val();
        }
        _simple_write(val, enabled_bits);
    }
}

/**
### unimpl

<section>

#### Description

The object functionality is unimplemented. Warn when software is using the
object. Writes and reads are implemented as default writes and reads.

#### Log Output

First read from a register results in an unimplemented log-message on
log-level 1, remaining reads on log-level 3. Reads from a field does
not result in a log-message. First write to a register results in
an unimplemented log-message on log-level 1, remaining writes on log-level 3.
First write to a field (if field value is not equal to write value) results
in an unimplemented log-message on log-level 1, remaining writes on
log-level 3.

#### Related Templates

read\_unimpl, write\_unimpl, silent\_unimpl, design\_limitation

</section>
*/
template unimpl is (_log_unimpl_read, _log_unimpl_write, limitations) {
    param limitations default "Not implemented.";
}

/**
### read\_unimpl

<section>

#### Description

The object functionality associated to a read access is unimplemented. Write
access is using default implementation and can be overridden (for instance
by the read\_only template).

#### Log Output

First software read to a register results in an unimplemented log-message on
log-level 1, remaining reads on log-level 3. Software reads to fields does
not result in a log-message.

#### Related Templates

unimpl, write\_unimpl, silent\_unimpl, design\_limitation

</section>
*/
template read_unimpl is (_log_unimpl_read, limitations) {
    param limitations default "Read access not implemented.";
}

/**
### write\_unimpl

<section>

#### Description

The object functionality associated to a write access is unimplemented. Read
access is using default implementation and can be overridden (for instance
by the write\_only template).

#### Log Output

First software write to registers results in an unimplemented log-message on
log-level 1, remaining writes on log-level 3.  First write to a field (if
field value is not equal to write value) results in an unimplemented
log-message on log-level 1, remaining writes on log-level 3.

#### Related Templates

unimpl, read\_unimpl, silent\_unimpl, design\_limitation

</section>
*/
template write_unimpl is (_log_unimpl_write, object, limitations) {
    param limitations default "Write access not implemented.";
}

// internal convenience, like 'template write' but a tad more efficient, at the
// expense of usability
template _simple_write is (get_val, set_val) {
    shared method _simple_write(uint64 value, uint64 enabled_bits) {
        local uint64 patched = this.get_val() & ~enabled_bits;
        this.set_val(patched | (value & enabled_bits));
    }
}

/**
### silent\_unimpl

<section>

#### Description

The object functionality is unimplemented, but do not print a
lot of log-messages when reading or writing.
Writes and reads are implemented as default writes and reads.

#### Log Output

First software read to a register results in an unimplemented log-message on
log-level 2, remaining reads on log-level 3. Software reads to fields does
not result in a log-message. First software write to a register results in
an unimplemented log-message on log-level 2, remaining writes on log-level 3.
First write to a field (if field value is not equal to write value) results
in an unimplemented log-message on log-level 2, remaining writes on
log-level 3.

#### Related Templates

unimpl, design\_limitation

</section>
*/
template silent_unimpl is (read_field, write_field, _simple_write,
                           _reg_or_field, _qname, limitations) {
    shared method write_field(uint64 val, uint64 enabled_bits, void* aux) {
        if (this.is_register ||
            ((val & enabled_bits) != (this.get_val() & enabled_bits))) {
            log unimpl, 2 then 3, Register_Write:
                "Write to unimplemented %s %s (value written = %#x, "
                + "contents = %#x).", this.is_register ? "register" : "field",
                this._qname(), val, this.get_val();
        }
        _simple_write(val, enabled_bits);
    }
    shared method read_field(uint64 enabled_bits, void* aux) -> (uint64){
        if (this.is_register) {
            log unimpl, 2 then 3, Register_Read:
                "Read from unimplemented register %s (contents = %#x).",
                this._qname(), this.get_val();
        }
        return get_val() & enabled_bits;
    }
}

/**
### undocumented

<section>

#### Description

The object functionality is undocumented or poorly documented.
Writes and reads are implemented as default writes and
reads.

#### Log Output

First software write and read result in a spec\_violation log-message on
log-level 1, remaining on log-level 2.

</section>
*/
template undocumented is (read_field, write_field, _simple_write,
                          _reg_or_field, _qname) {
    shared method write_field(uint64 val, uint64 enabled_bits, void* aux) {
        log spec_viol, 1 then 2, Register_Write:
            "Write to poorly or non-documented %s %s " +
            "(value written = %#x, contents = %#x).",
            this.is_register ? "register" : "field", this._qname(),
            val, this.get_val();
        _simple_write(val, enabled_bits);
    }
    shared method read_field(uint64 enabled_bits, void* aux) -> (uint64) {
        log spec_viol, 1 then 2, Register_Write:
            "Read from poorly or non-documented %s %s (contents = %#x).",
            this.is_register ? "register" : "field", this._qname(),
            this.get_val();
        return get_val() & enabled_bits;
    }
}

/**
### unmapped

<section>

#### Description

The register is excluded from the address space of the containing bank.

#### Log Output

None.

</section>
*/
template unmapped is register {
    param offset = unmapped_offset;
}

/**
### sticky

<section>

#### Description

Do not reset object value on soft-reset, keep current value.

#### Log Output

None.

</section>
*/
template sticky is soft_reset {
    shared method soft_reset() default {
        // do nothing
    }
}

/**
### design\_limitation

<section>

#### Description

The object's functionality is not in the model's scope and has been
left unimplemented as a design decision. Software and hardware
writes and reads are implemented as default writes and reads.
Debug registers are a prime example of when to use this
template. This is different from *unimplemented* which is
intended to be implement (if required) but is a limitation in
the current model.

#### Related Templates

unimplemented,
silent\_unimplemented

</section>
*/
template design_limitation is limitations {
    param limitations default ("Not implemented (design limitation)."
                              + " This " + objtype + " is a dummy "
                              + objtype + " with no side effects.");
}

/**
### no\_reset

<section>

#### Description

The register's or field's value will not be changed on a hard or soft reset.

</section>
*/
template no_reset is (power_on_reset, hard_reset, soft_reset) {
    shared method power_on_reset() default { }
    shared method hard_reset() default { }
    shared method soft_reset() default { }
}

/**
## Bank related templates

### function\_mapped\_bank

<section>

#### Description

Only valid in `bank` objects. The bank is recognized as a function mapped
bank by the `function_io_memory` template, and is mapped to a specified
function by whoever instantiates that template.

#### Parameters

function: the function number, an integer

#### Related Templates

function\_io\_memory

</section>
*/
template function_mapped_bank is bank {
    param function : int;
}

/**
### function\_io\_memory

<section>

#### Description

Only valid in `implement` objects named
`io_memory`. Implements the `io_memory` interface by
function mapping: An incoming memory transaction is handled by finding a
bank that instantiates the `function_mapped_bank` template, and has a
function number that matches the memory transaction's. If such a bank
exists, the transaction is handled by that bank. If no such bank exists, an
error message is logged and a miss is reported for the access.

Mapping banks by function number is a deprecated practice, still used by PCI
devices for legacy reasons. It is usually easier to
map a bank directly into a memory space, than using a function number as an
indirection.

Note also that function numbers as defined by the PCI standard are unrelated
to the function numbers of banks. They can sometimes coincide, though.

#### Parameters

function: the function number, an integer

#### Related Templates

function\_mapped\_bank

</section>
*/
template function_io_memory {
    #if (this.objtype != "implement" || this.name != "io_memory") {
        error "The function_io_memory template can only be instantiated"
            + " inside 'implement io_memory'";
    }

    method operation(generic_transaction_t *mem_op,
                     map_info_t map_info) -> (exception_type_t) {
        foreach b in (each function_mapped_bank in (dev)) {
            if (b.function == map_info.function) {
                if (b.io_memory_access(mem_op,
                                       (SIM_get_mem_op_physical_address(mem_op)
                                        - map_info.base + map_info.start),
                                       NULL)) {
                    return Sim_PE_No_Exception;
                } else {
                    return Sim_PE_IO_Not_Taken;
                }
            }
        }
        // If we find use cases where this can be triggered by incorrect target
        // software, then we should be more forgiving here (either log
        // spec_viol, or rely on the caller's error handling and log info on
        // level 2 or 3)
        log error:
            "Access to invalid function %d using io_memory interface",
            map_info.function;
        return Sim_PE_IO_Not_Taken;
    }
}

/**
### miss\_pattern\_bank

<section>

#### Description

Only valid in `bank` objects. Handles unmapped accesses by
ignoring write accesses, and returning a given value for each unmapped
byte.

#### Parameters

miss\_pattern: each missed byte in a miss read is set to this value

</section>
*/
template miss_pattern_bank is bank {
    param miss_pattern : uint8;
    shared method unmapped_read(uint64 offset, uint64 bits, void *aux)
        -> (uint64) throws {
        return miss_pattern * 0x0101010101010101;
    }
    shared method unmapped_get(uint64 offset, uint64 bits) -> (uint64) throws {
        return miss_pattern * 0x0101010101010101;
    }
    shared method unmapped_write(uint64 offset, uint64 value, uint64 bits,
                          void *aux) throws {
    }
}

extern int memcmp(const void *s1, const void *s2, size_t n);
extern void *memmove(void *dest, const void *src, size_t n);

// We keep this as gated behind an utility template, so that we have
// a good injection point for 1.2 devices using dml12-compat
template bank_obj is (bank, name) {
    shared method bank_obj() -> (conf_object_t *) {
        // Defer to default implementation
        return _bank_obj();
    }
}

/**
   ## Connect related templates

   ### map\_target

   A `connect` object can instantiate the template `map_target`. The template
   provides an easy way to send memory transactions to objects that can be
   mapped into Simics memory maps. It defines a default implementation of
   `validate` which verifies that the object can be used to create a map
   target, i.e. the Simics API `SIM_new_map_target` returns a valid
   pointer. The template provides a session variable `map_target` of the type
   `map_target_t *` which can be used to issue transactions to the connected
   object.

   The template defines the following methods:
*/
template map_target is (connect, _qname) {
    session map_target_t *map_target;

    interface ram { param required = false; }
    interface rom  { param required = false; }
    interface io_memory  { param required = false; }
    interface port_space { param required = false; }
    interface translator { param required = false; }
    interface transaction_translator { param required = false; }
    interface transaction { param required = false; }
    interface memory_space { param required = false; }

    method validate(conf_object_t *obj) -> (bool) default {
        if (port) {
            SIM_attribute_error(
                "port interfaces are not supported, use port objects instead");
            return false;
        }
        local map_target_t *tmp = SIM_new_map_target(obj, NULL, NULL);
        if (!tmp) {
            SIM_clear_exception();
            SIM_attribute_error(SIM_last_error());
            return false;
        }
        SIM_free_map_target(tmp);
        return true;
    }

    method set(conf_object_t *obj) {
        SIM_free_map_target(this.map_target);
        default(obj);
        this.map_target = obj ? SIM_new_map_target(obj, NULL, NULL) : NULL;
    }

    /**
       * `read(uint64 addr, uint64 size) -> (uint64) throws`

         Reads `size` bytes starting at `addr` in the connected object. Size
         must be 8 or less. Byte order is little-endian. Throws an exception if
         the read fails.
     */
    shared method read(uint64 addr, uint64 size) -> (uint64) throws {
        if (size > 8) {
            log error: "%s.read: size must be less than or equal to 8",
                _qname();
            throw;
        }
        local uint8 val[size];
        local atom_t atoms[4] = {
            ATOM_data(val),
            ATOM_size(size),
            ATOM_initiator(dev.obj),
            ATOM_list_end(0)
        };
        local transaction_t t;
        t.atoms = atoms;
        if (issue(&t, addr) != Sim_PE_No_Exception)
            throw;
        return SIM_get_transaction_value_le(&t);
    }

    /**
       * `read_bytes(uint64 addr, uint64 size, uint8 *bytes) throws`

         Reads `size` bytes into `bytes`, starting at `addr` in the connected
         object. Throws an exception if the read fails.
    */
    shared method read_bytes(uint64 addr, uint64 size, uint8 *bytes) throws {
        local atom_t atoms[4] = {
            ATOM_data(bytes),
            ATOM_size(size),
            ATOM_initiator(dev.obj),
            ATOM_list_end(0),
        };
        local transaction_t t;
        t.atoms = atoms;
        if (issue(&t, addr) != Sim_PE_No_Exception)
            throw;
    }

    /**
       * `write(uint64 addr, uint64 size, uint64 value) throws`

         Writes `value` of `size` bytes, starting at `addr` in the connected
         object. Size must be 8 or less. Byte order is little-endian. Throws an
         exception if the write fails.
    */
    shared method write(uint64 addr, uint64 size, uint64 value) throws {
        if (size > 8) {
            log error: "%s.write: size must be less than or equal to 8",
                _qname();
            throw;
        }
        local uint8 buf[size];
        local atom_t atoms[5] = {
            ATOM_data(buf),
            ATOM_size(size),
            ATOM_flags(Sim_Transaction_Write),
            ATOM_initiator(dev.obj),
            ATOM_list_end(0)
        };
        local transaction_t t;
        t.atoms = atoms;
        SIM_set_transaction_value_le(&t, value);
        if (issue(&t, addr) != Sim_PE_No_Exception)
            throw;
    }

    /**
       * `write_bytes(uint64 addr, uint64 size, const uint8 *bytes) throws`

         Writes `size` bytes from `bytes`, starting at `addr` in the connected
         object. Throws an exception if the write fails.
    */
    shared method write_bytes(uint64 addr, uint64 size,
                              const uint8 *bytes) throws {
        local atom_t atoms[5] = {
            ATOM_flags(Sim_Transaction_Write),
            ATOM_data(cast(bytes, uint8 *)),  // we trust Simics not to touch it
            ATOM_size(size),
            ATOM_initiator(dev.obj),
            ATOM_list_end(0),
        };
        local transaction_t t;
        t.atoms = atoms;
        if (issue(&t, addr) != Sim_PE_No_Exception)
            throw;
    }

    /**
       * `issue(transaction_t *t, uint64 addr) -> (exception_type_t)`

         Provides a shorthand to the API function `SIM_issue_transaction`.
    */
    shared method issue(transaction_t *t, uint64 addr) -> (exception_type_t);
    method issue(transaction_t *t, uint64 addr) -> (exception_type_t) {
        #if (configuration == "optional") {
            if (!map_target) {
                log error: "%s not set, transaction terminated", _qname();
                return Sim_PE_IO_Not_Taken;
            }
        }
        local exception_type_t exc = SIM_issue_transaction(map_target, t, addr);
        local bool fail = exc != Sim_PE_No_Exception;
        log info, (fail ? 2 : 4) : "%s%s %d bytes @ 0x%x in %s",
            fail ? "failed to " : "",
            SIM_transaction_is_read(t) ? "read" : fail ? "write" : "wrote",
            SIM_transaction_size(t), addr, SIM_object_name(obj);
        return exc;
    }
}
