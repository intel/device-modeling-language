/*
  Â© 2019-2022 Intel Corporation
  SPDX-License-Identifier: 0BSD
*/

dml 1.4;

import "simics/devs/signal.dml";

template bool_attr is attribute {
    param allocate_type = "bool";
    param val = this;
    // Since we are by definition backed by 1.2 builtins, get throws
    shared method get() -> (attr_value_t);
    shared method set(attr_value_t val) throws;
}

template uint64_attr is attribute {
    param allocate_type = "uint64";
    param val = this;
    shared method get() -> (attr_value_t);
    shared method set(attr_value_t val) throws;
}

template int64_attr is attribute {
    param allocate_type = "int64";
    param val = this;
    shared method get() -> (attr_value_t);
    shared method set(attr_value_t val) throws;
    // 1.4 attribute returns signed int, but 1.2 does not,
    // hence we need to override get here to always return
    // signed
    method get() -> (attr_value_t) default {
        return SIM_make_attr_int64(val);
    }
}

template double_attr is attribute {
    param allocate_type = "double";
    param val = this;
    shared method get() -> (attr_value_t);
    shared method set(attr_value_t val) throws;
}

template pseudo_attr is attribute {
    param configuration = "pseudo";
}
template read_only_attr is pseudo_attr {
    param writable = false;
}
template write_only_attr is pseudo_attr {
    param readable = false;
}

// If a bank in a DML 1.4 file overrides io_memory_access, then
// this template can be instantiated to make the override effective when
// imported from a DML 1.2 device.
template dml12_compat_io_memory_access is bank {
    method access(generic_transaction_t *memop, physical_address_t offset,
                  physical_address_t size) throws {
        if (!this.io_memory_access(memop, offset, NULL))
            throw;
    }
}

in each bank {
    method io_memory_access(generic_transaction_t *memop, uint64 offset,
                            void *aux) -> (bool) default {
        local uint64 size = SIM_get_mem_op_size(memop);
        if (size > 8) {
            log error: "Oversized access to %s", name;
            return false;
        }
        try {
            if (SIM_mem_op_is_read(memop)) {
                this.read_access_memop(memop, offset, size);
            } else {
                local uint64 writeval;
                writeval = this.get_write_value(memop);
                this.write_access_memop(memop, offset, size, writeval);
            }
            return true;
        } catch {
            return false;
        }
    }
}

template read_field {
    // Imitate the default behaviour of field.read_access()
    method read_field(uint64 enabled_bits, void *aux) -> (uint64) default {
        local uint64 value;
        value = this.read();
        return value & enabled_bits;
    }
}

template write_field {
    // Imitate the default behaviour of field.write_access()
    method write_field(uint64 val, uint64 enabled_bits, void *aux) default {
        if (enabled_bits != 0) {
            local uint64 patched;
            patched = this.get();
            patched = (patched & ~enabled_bits) | (val & enabled_bits);
            this.write(patched);
        }
    }
}

in each field { is (read_field, write_field); }

// If a field or register in a DML 1.4 file overrides read_field or
// write_field, then these templates can be instantiated to make the override
// effective when imported from a DML 1.2 device.

// Note that this can be done automatically by writing e.g.:
//   in each (read_field) { dml12_compat_read_field; }
// We don't do this automatically, because the read_access() implementation
// might clash with read_access overrides in remaining DML 1.2 code.
template dml12_compat_read_field {
    #if (this.objtype == "register") {
        inline method read_access(inline memop, inline msb1, inline lsb)
            -> (uint64) {
            #if (defined(msb1)) {
                local uint64 mask = 0;
                mask[msb1 - 1 : lsb] = ~0;
                return read_field(mask, NULL)[msb1 - 1 : lsb];
            } #else {
                local uint64 value;
                value = read_field((1 << this.bitsize) - 1, NULL);
                return value;
            }
        }
    } #else #if (this.objtype == "field") {
        method read_access() -> (uint64) {
            local uint64 value;
            value = read_field((1 << this.bitsize) - 1, NULL);
            return value;
        }
    } #else { error "bad object type"; }
}

template dml12_compat_write_field {
    #if (this.objtype == "register") {
        inline method write_access(inline memop, inline msb1, inline lsb,
                                   uint64 value) {
            #if (defined(msb1)) {
                local uint64 mask = 0;
                mask[msb1 - 1 : lsb] = ~0;
                write_field(value << lsb, mask, NULL);
            } #else {
                write_field(value, (1 << this.bitsize) - 1, NULL);
            }
        }
    } #else #if (this.objtype == "field") {
        method write_access(uint64 value) {
            write_field(value, (1 << this.bitsize) - 1, NULL);
        }
    } #else { error "bad object type"; }
}

method _make_read_memop(uint64 enabled_bytes, uint64 *dest)
    -> (generic_transaction_t, int, int) /* memop, msb1, lsb */ {
    local int msb1 = 64 - COUNT_LEADING_ZEROS64(enabled_bytes);
    local int lsb = COUNT_TRAILING_ZEROS64(enabled_bytes);
    assert ((msb1 | lsb) & 7) == 0;
    local buffer_t buf;
    buf.len = (msb1 - lsb) / 8;
    buf.data = cast(dest, uint8 *);
    local generic_transaction_t memop = SIM_make_mem_op_read(
        0, buf, false, NULL);
    return (memop, msb1, lsb);
}

method _make_write_memop(uint64 enabled_bytes, uint64 *value)
    -> (generic_transaction_t, int, int) /* memop, msb1, lsb */ {
    local int msb1 = 64 - COUNT_LEADING_ZEROS64(enabled_bytes);
    local int lsb = COUNT_TRAILING_ZEROS64(enabled_bytes);
    assert ((msb1 | lsb) & 7) == 0;
    local bytes_t buf;
    buf.data = cast(value, const uint8 *);
    buf.len = (msb1 - lsb) / 8;
    local generic_transaction_t memop = SIM_make_mem_op_write(
        0, buf, false, NULL);
    return (memop, msb1, lsb);
}

// If a register in a DML 1.4 file overrides read_register, then this template
// can be instantiated to make the override effective when imported from a DML
// 1.2 device
template dml12_compat_read_register {
    inline method read_access(generic_transaction_t *memop,
                              inline msb1, inline lsb) -> (uint64) {
        #if (defined(msb1)) {
            local uint64 mask = 0;
            mask[msb1 - 1 : lsb] = ~0;
            return read_register(mask, NULL)[msb1 - 1 : lsb];
        } #else {
            return read_register((1 << bitsize) - 1, NULL);
        }
    }
}

// If a register in a DML 1.4 file overrides write_register, then this template
// can be instantiated to make the override effective when imported from a DML
// 1.2 device
template dml12_compat_write_register {
    inline method write_access(generic_transaction_t *memop,
                               inline msb1, inline lsb, uint64 value) {
        #if (defined(msb1)) {
            local uint64 mask = 0;
            mask[msb1 - 1 : lsb] = ~0;
            write_register(value << lsb, mask, NULL);
        } #else {
            write_register(value, (1 << this.bitsize) - 1, NULL);
        }
    }
}

in each register {
    param val = this;
    is init_val;

    // Imitate the default implementations of read_access()/write_access()
    method read_register(uint64 enabled_bits, void *aux) -> (uint64)
        default {
        local uint64 value;
        local generic_transaction_t memop;
        local int msb1;
        local int lsb;
        (memop, msb1, lsb) = dev._make_read_memop(enabled_bits, &value);
        try {
            before_read(&memop);
            value = read_access_main(&memop, msb1, lsb);
            after_read(&memop);
        } catch {
            log error: "Unexpected exception when reading register %s", qname;
            return 0;
        }
        return value << lsb;
    }

    method write_register(uint64 value, uint64 enabled_bits, void *aux)
        default {
        local generic_transaction_t memop;
        local int msb1;
        local int lsb;
        (memop, msb1, lsb) = dev._make_write_memop(enabled_bits, &value);
        try {
            before_write(&memop, msb1, lsb, value[msb1 - 1 : lsb]);
            write_access_main(&memop, msb1, lsb, value[msb1 - 1 : lsb]);
            after_write(&memop);
        } catch {
            log error: "Unexpected exception when writing register %s", qname;
        }
    }
}

in each field {
    param val = this;
    is init_val;
}

template hreset is hard_reset {
    port HRESET {
        implement signal {
            method signal_raise() {
                try {
                    dev.hard_reset();
                } catch {
                    log error: "uncaught exception in hard_reset";
                }
            }
            method signal_lower() {
            }
        }
    }
}

template sreset is soft_reset {
    port SRESET {
        implement signal {
            method signal_raise() {
                try {
                    dev.soft_reset();
                } catch {
                    log error: "uncaught exception in soft_reset";
                }
            }
            method signal_lower() {
            }
        }
    }
}

// only the 'custom' event types are compatible with DML 1.2, because DML 1.2
// hardcodes a 'void *data' argument to post()
template custom_cycle_event { param timebase = "cycles"; }
template custom_time_event { param timebase = "seconds"; }

// These templates are empty dummy-templates, so that templates in
// unified 1.4 code can inherit from these even in 1.2 devices
template hard_reset is (_hard_reset) {}
template soft_reset is (_soft_reset) {}
template soft_reset_val {
    param soft_reset_value = soft_reset_val;
    param soft_reset_val;
}
template get is (_get) {}
template set is (_set) {}
template init {}
template init_val is (_init_val) {}
template documentation {}
template limitations {}
template name {
    param name : const char*;
}
template desc {}
template shown_desc {
    param shown_desc : const char*;
    // since shown_desc has no semantics in 1.2, do not allow overrides
    param shown_desc = desc;
}
template miss_pattern_bank {
    param miss_pattern : uint8;
}
template function_mapped_bank {
    param function : int;
}
template bank_obj is bank {
    shared method bank_obj() -> (conf_object_t *);
    method bank_obj() -> (conf_object_t *) {
        assert defined(name);
        return _non_anonymous_bank_obj();
    }
}

// Standard templates renamed in 1.4
template unimpl is unimplemented {}
template silent_unimpl is silent_unimplemented {}
template read_unimpl is _read_unimplemented {}
template write_unimpl is _write_unimplemented {}
