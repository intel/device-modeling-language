/*
  Â© 2010-2022 Intel Corporation
  SPDX-License-Identifier: 0BSD
*/

dml 1.2;

import "simics/util/swabber.dml";

extern uint8  SWAB8(uint8 x);
extern uint16 SWAB16(uint16 x);
extern uint32 SWAB32(uint32 x);
extern uint64 SWAB64(uint64 x);

method bit_reverse(in_data, bits) -> (out_data) {
    assert bits <= 64;
    out_data = reverse_bits64(in_data) >> (64 - bits);
}

method do_crc(uint32 poly, int width, uint32 initial_crc,
              bool reverse_initial_crc,  bool reverse_input,
              bool reverse_output, bool swap_output, bool complement_output,
              bytes_t in_data) -> (uint32 crc) {
    assert width <= 32;
    call $do_crc64(poly, width, initial_crc,
                   reverse_initial_crc, reverse_input,
                   reverse_output, swap_output, complement_output,
                   in_data)
        -> (crc);
}

method do_crc64(uint64 poly, int width, uint64 initial_crc,
                bool reverse_initial_crc,  bool reverse_input,
                bool reverse_output, bool swap_output, bool complement_output,
                bytes_t in_data) -> (uint64 crc) {

    assert width >= 1 && width <= 64;

    local const uint64 top_bit = 1 << (width - 1);

    if (reverse_initial_crc)
        inline $bit_reverse(initial_crc, width) -> (crc);
    else
        crc = initial_crc;

    local size_t i;
    for (i = 0; i < in_data.len; i++) {
        local uint8 d = in_data.data[i];

        if (reverse_input)
            d = reverse_bits8(d);

        local uint8 j;
        for (j = 0x80; j != 0; j >>= 1) {
            local uint64 bit = crc & top_bit;

            crc <<= 1;

            if ((d & j) != 0)
                bit ^= top_bit;

            if (bit != 0)
                crc ^= poly;
        }
    }

    if (reverse_output)
        inline $bit_reverse(crc, width) -> (crc);

    if (swap_output) {
        switch (width) {
        case 8:  crc = SWAB8(crc); break;
        case 16: crc = SWAB16(crc); break;
        case 32: crc = SWAB32(crc); break;
        case 64: crc = SWAB64(crc); break;

        default:
            log unimpl: "CRC: byte swapping of output of size %d bits",
                width;
            assert false;
        }
    }

    if (complement_output)
        crc = ~crc;

    if (width < 64)
        crc &= (1 << width) - 1;
}
