/*
  Â© 2010-2022 Intel Corporation
  SPDX-License-Identifier: 0BSD
*/

dml 1.2;

import "rapidio.dml";

/* <add id="rapidio-device.dml functions">

   <dt>$peer.deliver_message(uint16 destination, uint16 mbox, dbuffer_t *data)</dt>
   <dd>Sends a message to the specified destination.</dd>

   <dt>$peer.memory_operation(uint16 destination, physical_address_t addr,
                              dbuffer_t *buf, rapidio_operation_t op)</dt>
   <dd>Makes a memory operation on the destination.</dd>

   <dt>$peer.doorbell(uint16 target, uint16 data)</dt>
   <dd>Sends a doorbell message to the peer, with specified target and data.</dd>

   <dt>$peer.read_register(uint16 target, uint8 hopcount, int reg_no) ->
        (uint32 data)</dt>
   <dd>Reads a maintenance register at the target. The target device is
       identified with an (ID, hopcount) pair.</dd>

   <dt>$peer.write_register(uint16 target, uint8 hopcount, int reg_no,
                            uint32 data)</dt>
   <dd>Writes a maintenance register at the target.</dd>

   </add> */
connect peer {
    parameter attribute_documentation default "The connected RapidIO switch or device";
    parameter documentation = $attribute_documentation;

    interface rapidio_v3;

    method deliver_message(uint16 destination, uint16 mbox, dbuffer_t *data) {
        if ($obj) {
            local uint16 device_id;
            call $get_device_id -> (device_id);
            $rapidio_v3.deliver_message(destination, device_id,
                                        mbox, 0, data);
        } else
            log info, 1: "Dropping message (not connected to peer)";
    }
    method memory_operation(uint16 destination, physical_address_t addr,
                            dbuffer_t *buf, rapidio_operation_t op) {
        log info, 4: "Memop %s to 0x%x:0x%x", rapidio_operation_to_string(op),
            destination, addr;
        if ($obj) {
            local uint16 device_id;
            call $get_device_id -> (device_id);
            $rapidio_v3.memory_operation(destination,
                                         device_id, addr, buf, op);
        } else
            log info, 1: "Dropping memop (not connected to peer)";
    }
    method doorbell(uint16 target, uint16 data) {
        if ($obj) {
            local uint16 device_id;
            call $get_device_id -> (device_id);
            log info, 3: "Sending doorbell from 0x%x, target=0x%x, data=0x%x",
                device_id, target, data;
            $rapidio_v3.doorbell(target, device_id, data);
        } else
            log info, 1: "Dropping doorbell (not connected to peer)";
    }
    method read_register(uint16 target, uint8 hopcount, int reg_no) ->
        (uint32 data) {
        if ($obj) {
            local uint16 device_id;
            call $get_device_id -> (device_id);
            log info, 3: "Sending read_register, target=0x%x(hopcount=%d) regno=%d(offset=0x%x)",
                target, hopcount, reg_no, reg_no*4;
            data = $rapidio_v3.read_register(target, device_id, hopcount, reg_no);
        } else {
            log info, 1: "Dropping read_register (not connected)";
            data = 0x47114711;
        }
    }
    method write_register(uint16 target, uint8 hopcount, int reg_no,
                          uint32 data) {
        if ($obj) {
            local uint16 device_id;
            call $get_device_id -> (device_id);
            log info, 3: "Sending write_register, target=0x%x(hopcount=%d) regno=%d(offset=0x%x) value=0x%x",
                target, hopcount, reg_no, reg_no*4, data;
            $rapidio_v3.write_register($obj, target,
                                       device_id, hopcount, reg_no, data);
        } else {
            log info, 1: "Dropping read_register (not connected)";
        }
    }
}

/* <add id="rapidio-device.dml defaults">
   <dt>method get_device_id() -> (uint16 src_id)</dt>
   <dd>Should return the device ID to use for outgoing requests.</dd>
   </add> */
method get_device_id() -> (uint16 src_id) default {
    log unimpl: "Device ID to use for outgoing packages not implemented";
    src_id = 0xdead;
}

template arch_read_only {
    is read_only;
}
template arch_read_write {
    is read_write;
}

/* <add id="rapidio-device.dml defaults">

   <dt>method on_memory_operation(physical_address_t addr, dbuffer_t *buf,
                                  rapidio_operation_t op)</dt>
   <dd>This function is called when an incoming memory operation occurs.</dd>

   <dt>method on_doorbell(uint16 target, uint16 source, uint16 data)</dt>
   <dd>This function is called when an incoming doorbell transaction
       occurs.</dd>

   <dt>method on_deliver_message(uint16 mbox, dbuffer_t *data)</dt>
   <dd>This function is called when an incoming message transaction
       occurs.</dd>

   </add> */

/* Default methods that just logs the accesses. */
method on_memory_operation(physical_address_t addr, dbuffer_t *buf,
                           rapidio_operation_t op) default {
    log unimpl: "Ignored I/O operation %s",
        rapidio_operation_to_string(op);
}

method on_doorbell(uint16 target, uint16 source, uint16 data) default {
    log unimpl: "Got doorbell, value 0x%04x", data;
}

method on_deliver_message(uint16 mbox, dbuffer_t *data) default {
    log unimpl: "Ignored %d-byte message to mailbox %d",
        cast(dbuffer_len(data), int), mbox;
}

implement rapidio_v3 {
    method memory_operation(uint16 target, uint16 source,
                            physical_address_t addr,
                            dbuffer_t *buf, rapidio_operation_t op) {
        log info, 4: "Incoming memop. address=0x%x, target=0x%x, op=%s",
            addr, target, rapidio_operation_to_string(op);
        call $dev.on_memory_operation(addr, buf, op);
    }
    method doorbell(uint16 target, uint16 source, uint16 data) {
        log info, 4: "Incoming doorbell. source=0x%x, target=0x%x, data=0x%x",
            source, target, data;
        call $dev.on_doorbell(target, source, data);
    }
    method deliver_message(uint16 target, uint16 source, uint16 mbox,
                           uint16 letter, dbuffer_t *data) default {
        log info, 4: "Incoming message on mailbox %d", mbox;
        call $dev.on_deliver_message(mbox, data);
    }
    method read_register(uint16 target, uint16 source,
                         uint8 hopcount, int reg_no) -> (uint32 result) {
        log info, 4: "Incoming read of register %d", reg_no;
        call $dev.on_read_register(reg_no) -> (result);
    }
    method write_register(uint16 target, uint16 source, uint8 hopcount,
                           int reg_no, uint32 value) {
        log info, 4: "Incoming write of register %d: 0x%x", reg_no, value;
        call $dev.on_write_register(reg_no, value);
    }
    method port_write(uint16 target, uint16 source,
                      uint8 hopcount, dbuffer_t *msg) default {
        log unimpl: "Incoming port-write, ignored.";
    }
}

/* connect rapidio_v3 maintenance read/writes with bank "regs" */
is maintenance_v1;
