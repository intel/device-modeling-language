/*
  Â© 2021-2023 Intel Corporation
  SPDX-License-Identifier: MPL-2.0
*/
dml 1.4;

device test;

typedef struct {
    int32 x;
    struct {
        int32 i;
        int32 j;
    } y;
} struct_t;

header %{
typedef struct {
    int32 x;
    struct {
        int32 i;
        int32 j;
        int32 k;
    } y;
    int32 z;
} ext_struct_t;
%}

extern typedef struct {
    int32 x;
    struct {
        int32 i;
        int32 j;
        // int32 k;
    } y;
    // int32 z;
} ext_struct_t;

typedef layout "little-endian" {
    int32 x;
    layout "little-endian" {
        int32 i;
        int32 j;
    } y;
} layout_t;

typedef bitfields 64 {
    int32 x @[63:32];
    bitfields 32 {
        int16 i @ [31:16];
        int16 j @ [15:0];
    } y @[31:0];
} bitfields_t;

method init() {
    local struct_t a = { .y = { .i = 2, .j = 3 }, .x = 1 };
    local ext_struct_t b = { .y = { .i = 2, .j = 3 }, .x = 1 };
    local layout_t c = { .y = { .i = 2, .j = 3 }, .x = 1 };
    local bitfields_t d = { .y = { .i = 2, .j = 3 }, .x = 1 };

    assert a.x   == 1;
    assert a.y.i == 2;
    assert a.y.j == 3;
    assert b.x   == 1;
    assert b.y.i == 2;
    assert b.y.j == 3;
    assert c.x   == 1;
    assert c.y.i == 2;
    assert c.y.j == 3;
    assert d.x   == 1;
    assert d.y   == ((2 << 16) | 3);

    local struct_t e = { .y = { .i = 2, ... }, ... };
    local ext_struct_t f = { .y = { .i = 2, ... }, ... };
    local layout_t g = { .y = { .i = 2, ... }, ... };
    local bitfields_t h = { .y = { .i = 2, ... }, ... };
    assert e.x == 0 && e.y.j == 0;
    assert e.y.i == 2;
    assert f.x   == 0 && f.y.j == 0;
    assert f.y.i == 2;
    assert g.x   == 0 && g.y.j == 0;
    assert g.y.i == 2;
    assert h.x   == 0;
    assert h.y   == 2 << 16;
}
