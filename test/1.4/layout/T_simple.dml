/*
  Â© 2021 Intel Corporation
  SPDX-License-Identifier: MPL-2.0
*/
dml 1.4;
device test;

// Describe this descriptor:
//
//       0 1 2 3
//      +-------+
//   00 |   a   |
//      +---+---+
//   04 | b | c |
//      +-+-+---+
//   08 | |  d  |
//      +-+-+---+
//   0c |  e[0] |
//      +-------+
//   10 |  e[1] |
//      +-------+
//   ..    ...
//      +-------+
//   xx |  e[n] |  (xx = 0c+4n)
//      +-------+
//
// Where d has fields:
//
//   23  16 15             1 0
//  +------+----------------+-+
//  |  n   |       y        |z|
//  +------+----------------+-+
//


typedef layout "big-endian" {
    uint32 a;
    uint16 b;
    uint16 c;
    uint8 reserved;
    uint24 d;
    uint40 e40;
    uint48 e48;
    uint56 e56;
    uint64 e64;
} bedesc;

typedef layout "little-endian" {
    uint32 a;
    uint16 b;
    uint16 c;
    uint8 reserved;
    uint24 d;
    uint40 e40;
    uint48 e48;
    uint56 e56;
    uint64 e64;
} ledesc;

extern int memcmp(const void *s1, const void *s2, size_t n);

method betest()
{
    assert sizeoftype bedesc == 38;

    local uint8 buf [256];
    local int i;
    for (i = 0; i < 256; i++)
        buf[i] = i;

    local bedesc *d = cast(buf, bedesc *);

    // Test reading
    assert d->a == 0x00010203;
    assert d->b == 0x0405;
    assert d->c == 0x0607;
    assert d->d == 0x090a0b;
    assert d->e40 == 0x0c0d0e0f10;
    assert d->e48 == 0x111213141516;
    assert d->e56 == 0x1718191a1b1c1d;
    assert d->e64 == 0x1e1f202122232425;

    // Test writing
    d->a = 0x11121314;
    d->b = 0x2122;
    d->c = 0x3132;
    d->d = 0x414243;
    d->e40 = 0x5152535455;
    d->e48 = 0x616263646566;
    d->e56 = 0x71727374757677;
    d->e64 = 0x8182838485868788;
    assert memcmp(buf,
                  "\x11\x12\x13\x14" + "\x21\x22" + "\x31\x32" + "\x08"
                  + "\x41\x42\x43" + "\x51\x52\x53\x54\x55"
                  + "\x61\x62\x63\x64\x65\x66"
                  + "\x71\x72\x73\x74\x75\x76\x77"
                  + "\x81\x82\x83\x84\x85\x86\x87\x88",
                  sizeoftype bedesc) == 0;

    // Test other things
    d->a += 1;
    d->a = d->a + 1;
    // d->a++;
}

method letest()
{

    assert sizeoftype ledesc == 38;

    local uint8 buf [256];
    local int i;
    for (i = 0; i < 256; i++)
        buf[i] = i;

    local ledesc *d = cast(buf, ledesc *);

    // Test reading
   assert d->a == 0x03020100;
   assert d->b == 0x0504;
   assert d->c == 0x0706;
   assert d->d == 0x0b0a09;
   assert d->e40 == 0x100f0e0d0c;
   assert d->e48 == 0x161514131211;
   assert d->e56 == 0x1d1c1b1a191817;
   assert d->e64 == 0x2524232221201f1e;

    // Test writing
    d->a = 0x11121314;
    d->b = 0x2122;
    d->c = 0x3132;
    d->d = 0x414243;
    d->e40 = 0x5152535455;
    d->e48 = 0x616263646566;
    d->e56 = 0x71727374757677;
    d->e64 = 0x8182838485868788;
    assert memcmp(buf,
                  "\x14\x13\x12\x11" + "\x22\x21" + "\x32\x31" + "\x08"
                  + "\x43\x42\x41" + "\x55\x54\x53\x52\x51"
                  + "\x66\x65\x64\x63\x62\x61"
                  + "\x77\x76\x75\x74\x73\x72\x71"
                  + "\x88\x87\x86\x85\x84\x83\x82\x81",
                  sizeoftype ledesc) == 0;
}

method init()
{
    betest();
    letest();
}
