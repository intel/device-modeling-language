/*
  Â© 2021-2022 Intel Corporation
  SPDX-License-Identifier: MPL-2.0
*/
dml 1.4;

device test;

import "simics/simulator/conf-object.dml";

import "testing.dml";

attribute b is (bool_attr) {
//    method get() -> (attr_value_t) default { return default(); }
//    method set(attr_value_t value) throws default { default(value); }
}

attribute u is (uint64_attr) {
//    method get() -> (attr_value_t) default { return default(); }
//    method set(attr_value_t value) throws default { default(value); }
}

attribute i is (int64_attr) {
//    method get() -> (attr_value_t) default { return default(); }
//    method set(attr_value_t value) throws default { default(value); }
}

attribute f is (double_attr) {
//    method get() -> (attr_value_t) default { return default(); }
//    method set(attr_value_t value) throws default { default(value); }
}


method test() throws {
    b.val = true;
    expect(SIM_attr_boolean(SIM_get_attribute(dev.obj, "b")), "get b");
    local attr_value_t bool_attr = SIM_make_attr_boolean(false);
    SIM_set_attribute(dev.obj, "b", &bool_attr);
    expect(!b.val, "set b");

    local uint64 large0 = 0x8765432112345678;
    local uint64 large1 = 0x9876543212345678;

    u.val = large0;
    expect(SIM_attr_is_uint64(SIM_get_attribute(dev.obj, "u")), "sign u");
    expect(cast(SIM_attr_integer(SIM_get_attribute(dev.obj, "u")), uint64)
           == large0, "get u");
    local attr_value_t large_attr = SIM_make_attr_uint64(large1);
    SIM_set_attribute(dev.obj, "u", &large_attr);
    expect(u.val == large1, "set u");
    assert SIM_clear_exception() == 0;
    local attr_value_t minus_one_attr = SIM_make_attr_int64(-1);
    SIM_set_attribute(dev.obj, "u", &minus_one_attr);
    expect(SIM_clear_exception() != 0, "invalid set u");

    i.val = -134;
    expect(SIM_attr_integer(
                SIM_get_attribute(dev.obj, "i")) == -134, "get i");
    expect(SIM_attr_is_int64(SIM_get_attribute(dev.obj, "i")), "sign i");
    SIM_set_attribute(dev.obj, "i", &minus_one_attr);
    expect(i.val == -1, "set i");
    assert SIM_clear_exception() == 0;
    SIM_set_attribute(dev.obj, "i", &large_attr);
    expect(SIM_clear_exception() != 0, "invalid set i");

    f.val = 3.14;
    expect(SIM_attr_floating(SIM_get_attribute(dev.obj, "f")) == 3.14,
            "get f");
    local attr_value_t float_attr = SIM_make_attr_floating(1.414);
    SIM_set_attribute(dev.obj, "f", &float_attr);
    expect(f.val == 1.414, "set f");
}
