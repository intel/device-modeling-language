/*
  Â© 2021 Intel Corporation
  SPDX-License-Identifier: MPL-2.0
*/
dml 1.4;
device test;

import "utility.dml";

template r is (read, write, init_val) {
    param init_val = (offset << 8) | (offset + 1);
}

template b {
    is miss_pattern_bank;
    param overlapping = true;
    param miss_pattern = 0xff;

    // aligned
    register r2 size 2 @ 0x2 is (r);
    register r6 size 2 @ 0x6 is (r);
    register r8 size 2 @ 0x8 is (r);
    register rc size 2 @ 0xc is (r);

    // unaligned
    register r21 size 2 @ 0x21 is (r);
    register r25 size 2 @ 0x25 is (r);

    // similar layout in an array
    group g[i < 2] {
        // 0x12, 0x16, 0x18, 0x1c
        register a[j < 2] size 2 @ 0x10 + i * 8 + (1-i)*2 + j *4 is (r);
        // 0x31, 0x35
        register b size 2 @ 0x31 + i * 4 is (r);
    }
}

bank ob {
    is b;
    param partial = false;
}

bank pb {
    is b;
    param partial = true;
}

bank override_get is miss_pattern_bank {
    param miss_pattern = 0xff;
    method unmapped_get(uint64 offset, uint64 bits) -> (uint64) throws {
        return 0xdeadbeef & bits;
    }
}

bank override_read_write is miss_pattern_bank {
    param miss_pattern = 0xff;
    method unmapped_read(uint64 offset, uint64 bits, void *aux)
        -> (uint64) throws {
        return 0xdeadbeef & bits;
    }
    method unmapped_write(uint64 offset, uint64 bits, uint64 val, void *aux)
        throws {
        throw;
    }
}
