/*
  Â© 2021-2022 Intel Corporation
  SPDX-License-Identifier: MPL-2.0
*/
dml 1.4;
device test;

import "testing.dml";
import "utility.dml";

bank registers {
    param partial = true;

    register r size 4 @ 0x0 {
        field d @ [31:24] is (read, write) {
            method read() -> (uint64) {
                return 0x0d;
            }
        }
        field c @ [23:16] is (read, write) {
            method read() -> (uint64) {
                return 0x0c;
            }
        }
        field b @ [15:8] is (read, write) {
            method read() -> (uint64) {
                return 0x0b;
            }
        }
        field a @ [7:0] is (read, write) {
            method read() -> (uint64) {
                return 0x0a;
            }
        }
    }

    register r2 size 4 @ 0x4 {
        field c @ [31:20] is (read, write) {
            method read() -> (uint64) {
                return 0x0;
            }
        }
        field b @ [19:12] is (read, write) {
            method read() -> (uint64) {
                return 0xff;
            }
        }
        field a @ [11:0] is (read, write) {
            method read() -> (uint64) {
                return 0x0;
            }
        }
    }

    method test_read() throws {
        local uint64 val;

        val = r.read_register(0xff, NULL);
        expect(val == 0x0a, "val = 0x0a");

        val = r.read_register(0xffff, NULL);
        expect(val == 0x0b0a, "val = 0x0b0a");

        val = r.read_register(0xff00, NULL);
        expect(val == 0x0b00, "val = 0x0b00");

        val = r.read_register(0xff00ff, NULL);
        expect(val == 0x0c000a, "val = 0x0c000a");

        val = r2.read_register(0xff0000, NULL);
        expect(val == 0xf0000, "val = 0xf0000");
    }

    method test_write() throws {
        r.val = 0;
        r.write_register(0x01020304, 0xff, NULL);
        expect(r.val == 0x04, "val = 0x04");

        r.val = 0;
        r.write_register(0x01020304, 0xffff, NULL);
        expect(r.val == 0x0304, "val = 0x0304");

        r.val = 0;
        r.write_register(0x01020304, 0xff00, NULL);
        expect(r.val == 0x0300, "val = 0x0300");

        r.val = 0;
        r.write_register(0x01020304, 0xff00ff, NULL);
        expect(r.val == 0x020004, "val = 0x020004");

        r2.val = 0;
        r2.write_register(0x01020304, 0xff0000, NULL);
        expect(r2.val == 0x20000, "val = 0x20000");
    }

    method test() throws {
        test_read();
        test_write();
    }
}

bank disabled_field_invoked {
    param partial = true;

    session bool b_read = false;
    register r size 4 @ 0x0 {
        field c @ [23:16] is (read, write) {
            method read() -> (uint64) {
                return 0x0c;
            }
        }
        field b @ [15:8] is (read, write) {
            method read() -> (uint64) {
                b_read = true;
                return 0x0b;
            }
        }
        field a @ [7:0] is (read, write) {
            method read() -> (uint64) {
                return 0x0a;
            }
        }
    }

    method test() throws {
        local uint64 val;
        val = read(0x0, 0xff00ff, NULL);
        expect(val == 0x0c000a, "val = 0x0c000a");
        expect(!b_read, "b was read");
    }
}

bank disabled_register_invoked {
    param partial = true;
    param overlapping = true;

    session bool r2_read = false;

    register r1 size 1 @ 0x0 {
        param init_val = 0x0a;
    }
    register r2 size 1 @ 0x1 {
        param init_val = 0x0b;
        method read_register(uint64 enabled_bytes,
                                  void *user) -> (uint64) {
            r2_read = true;
            return 0x0b;
        }
    }
    register r3 size 1 @ 0x2 {
        param init_val = 0x0c;
    }

    method test() throws {
        local uint64 val;
        val = read(0x0, 0xff00ff, NULL);

        expect(val == 0x0c000a, "val = 0x0c000a");
        expect(!r2_read, "r2 was read");
    }
}

bank explicit_fields {
    param partial = true;

    register r size 4 @ 0x0 {
        field d @ [31:24] is (read, write) {
            method read() -> (uint64) {
                return 0x0d;
            }
        }
        field c @ [23:16] is (read, write) {
            method read() -> (uint64) {
                return 0x0c;
            }
        }
        field b @ [15:8] is (read, write) {
            method read() -> (uint64) {
                return 0x0b;
            }
        }
        field a @ [7:0] is (read, write) {
            method read() -> (uint64) {
                return 0x0a;
            }
        }
    }

    method test_read() throws {
        local uint64 val;

        val = read(0x0, 0xff, NULL);
        expect(val == 0x0a, "val = 0x0a");

        val = read(0x0, 0xffff, NULL);
        expect(val == 0x0b0a, "val = 0x0b0a");

        val = read(0x0, 0xffffff, NULL);
        expect(val == 0x0c0b0a, "val = 0x0c0b0a");

        val = read(0x0, 0xffffffff, NULL);
        expect(val == 0x0d0c0b0a, "val = 0x0d0c0b0a");

        val = read(0x0, 0x0, NULL);
        expect(val == 0x0, "val = 0x0");

        val = read(0x0, 0xff0000ff, NULL);
        expect(val == 0x0d00000a, "val = 0x0d00000a");

        val = read(0x0, 0xffff00, NULL);
        expect(val == 0x000c0b00, "val = 0x000c0b00");
    }

    method test_write() throws {
        r.val = 0;
        write(0x0, 0x01020304, 0xff, NULL);
        expect(r.val == 0x04, "val = 0x04");

        r.val = 0;
        write(0x0, 0x01020304, 0xffff, NULL);
        expect(r.val == 0x0304, "val = 0x0304");

        r.val = 0;
        write(0x0, 0x01020304, 0xffffff, NULL);
        expect(r.val == 0x020304, "val = 0x020304");

        r.val = 0;
        write(0x0, 0x01020304, 0xffffffff, NULL);
        expect(r.val == 0x01020304, "val = 0x01020304");

        r.val = 0;
        write(0x0, 0x01020304, 0x0, NULL);
        expect(r.val == 0x0, "val = 0x0");

        r.val = 0;
        write(0x0, 0x01020304, 0xff0000ff, NULL);
        expect(r.val == 0x01000004, "val = 0x01000004");

        r.val = 0;
        write(0x0, 0x01020304, 0xffff00, NULL);
        expect(r.val == 0x00020300, "val = 0x00020300");
    }

    method test() throws {
        test_read();
        test_write();
    }
}

bank ignored_enabled {
    param partial = true;

    register r size 4 @ 0x0 {
        method read_register(uint64 enabled_bytes,
                                  void *user) -> (uint64) {
            return 0xffffffff;
        }
    }

    method test() throws {
        local uint64 val;
        val = read(0x0, 0xff00, NULL);
        expect(val == 0xff00, "val = 0xff00");
    }
}

bank implicit_fields {
    register r1 size 4 @ 0x0 {
        param init_val = 0x0d0c0b0a;
    }

    register r2 size 4 @ 0x4 {
        param init_val = 0x000c0b00;

        field d @ [31:24] is (read, write) {
            method read() -> (uint64) {
                return 0x0d;
            }
        }
        field a @ [7:0] is (read, write) {
            method read() -> (uint64) {
                return 0x0a;
            }
        }
    }

    method test_register(uint64 offset) throws {
        local uint64 val;

        val = read(offset, 0x0, NULL);
        expect(val == 0x0, "val = 0x0");

        val = read(offset, 0xffffffff, NULL);
        expect(val == 0x0d0c0b0a, "val = 0x0d0c0b0a");

        val = read(offset, 0xff0000ff, NULL);
        expect(val == 0x0d00000a, "val = 0x0d00000a");
    }

    method test() throws {
        test_register(0x0);
        test_register(0x4);
    }
}

bank overlapping {
    param partial = true;
    param overlapping = true;

    register r1 size 4 @ 0x0 {
        param init_val = 0x0d0c0b0a;
        field d @ [31:24] is (read, write) {}
        field c @ [23:16] is (read, write) {}
        field b @ [15:8] is (read, write) {}
        field a @ [7:0] is (read, write) {}
    }
    register r2 size 4 @ 0x4 {
        param init_val = 0x04030201;
        field d @ [31:24] is (read, write) {}
        field c @ [23:16] is (read, write) {}
        field b @ [15:8] is (read, write) {}
        field a @ [7:0] is (read, write) {}
    }

    method test_read() throws {
        local uint64 val;

        val = read(0x2, 0xffffffff, NULL);
        expect(val == 0x02010d0c, "val = 0x02010d0c");
    }

    method test_write() throws {
        r1.val = r2.val = 0;

        write(0x2, 0x02010d0c, 0xffffffff, NULL);
        expect(r1.val == 0x0d0c0000, "r1 = 0x0d0c0000");
        expect(r2.val == 0x0201, "r2 = 0x0102");
    }

    method test() throws {
        test_read();
        test_write();
    }
}

bank unmapped {
    param overlapping = true;
    param partial = true;

    register r1 size 1 @ 0x0 {
        param init_val = 0x0a;
    }

    register r2 size 1 @ 0x2 {
        param init_val = 0x0c;
    }

    method unmapped_read(uint64 offset, uint64 bits, void *user)
        -> (uint64) throws default {
        return 0x000b00;
    }

    method test() throws {
        local uint64 val;
        val = read(0x0, 0xffffff, NULL);
        expect(val == 0x0c0b0a, "val = 0x0c0b0a");
    }
}

method test() throws {
    registers.test();

    disabled_field_invoked.test();
    disabled_register_invoked.test();
    explicit_fields.test();
    ignored_enabled.test();
    implicit_fields.test();
    overlapping.test();
    unmapped.test();
}
