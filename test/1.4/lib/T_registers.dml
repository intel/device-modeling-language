/*
  Â© 2021-2022 Intel Corporation
  SPDX-License-Identifier: MPL-2.0
*/
dml 1.4;

device test;

import "testing.dml";
import "utility.dml";

bank b {
    param large_offset = 8877665544332211;
    param large_stride = 4400330022001100;

    register largeoffset size 4 @ large_offset is (read, write) {
        method read() -> (uint64) {
            return 0xdeadbeef;
        }
    }

    register largestride[i < 4] size 4 @ large_stride * i + 1100
        is (read, write) {
        method read() -> (uint64) {
            return 0xcafebabe;
        }
    }

    register bug9096[i < 6] size 4 @ i * 24 + 16 is (read, write) {
        param init_val = 0x22222222;
    }

    method test() throws {
        local uint32 val;
        val = read(large_offset, 0xffffffff, NULL);
        expect(val == 0xdeadbeef, "largeoffset");
        val = read(large_stride * 3 + 1100, 0xffffffff, NULL);
        expect(val == 0xcafebabe, "largestride");
        // bug 9096, can apparently catch a stride calculation bug
        val = read(16, 0xffffffff, NULL);
        expect(val == 0x22222222, "9096 1");
        val = read(40, 0xffffffff, NULL);
        expect(val == 0x22222222, "9096 2");
    }
}

bank array[b < 2] {
    register r  size 4 @ 0 is (read, write) {
        param init_val = b == 0 ? 0xbadc0ffe : 0xdeadbeef;
    }
    // 0x4, test field array behavior
    register r2 size 4 @ 4 {
        // [[15:12], [11:8]], [[7:4], [3:0]]
        field f[i < 2][j < 2] @ [i*8 + j*4 + 3 : i*8 + j*4] {
            param init_val = i*2 + j;
        }
        // [[31:28], [27:24]], [[23:20], [19:16]]
        group g[i < 2] {
            field f[j < 2] @ [16 + i*8 + j*4 + 3 : 16 + i*8 + j*4] {
                param init_val = 4 + i*2 + j;
            }
        }
    }
    // 0x10, 0x14, 0x18, 0x1c
    register ra[i < 2][j < 2]  size 4 @ i*8 + j*4 + 0x10 is (read, write) {
        param init_val = offset;
    }
    group g[i < 2] {
        // 0x40, 0x50
        register gr             size 4 @ 0x40 + i * 0x10 is (read, write) {
            param init_val = offset;
        }
        // 0x44, 0x48, 0x54, 0x58
        register gra[j < 2] size 4 @ 0x40 + i * 0x10 + 4 + j * 4
            is (read, write) {
            param init_val = offset;
        }
    }

    method test() throws {
        local uint32 val;

        val = read(0x4, 0xffffffff, NULL);
        expect(val == 0x76543210, "field array");

        val = read(0x0, 0xffffffff, NULL);
        expect(val == (b == 0 ? 0xbadc0ffe : 0xdeadbeef), "arr 0");
        val = read(0x10, 0xffffffff, NULL);
        expect(val == 0x10, "arr 10");
        val = read(0x14, 0xffffffff, NULL);
        expect(val == 0x14, "arr 14");
        val = read(0x18, 0xffffffff, NULL);
        expect(val == 0x18, "arr 18");
        val = read(0x1c, 0xffffffff, NULL);
        expect(val == 0x1c, "arr 22");
        val = read(0x40, 0xffffffff, NULL);
        expect(val == 0x40, "arr 40");
        val = read(0x50, 0xffffffff, NULL);
        expect(val == 0x50, "arr 50");
        val = read(0x44, 0xffffffff, NULL);
        expect(val == 0x44, "arr 44");
        val = read(0x48, 0xffffffff, NULL);
        expect(val == 0x48, "arr 48");
        val = read(0x54, 0xffffffff, NULL);
        expect(val == 0x54, "arr 54");
        val = read(0x58, 0xffffffff, NULL);
        expect(val == 0x58, "arr 58");
    }
}

bank sparse_fields {
    session uint64 reads;
    param partial = true;
    register r size 8 @ 0 {
        field f3 @ [35:28] is (read, write) {
            method read() -> (uint64) {
                reads[3] = 1;
                return 0;
            }
        }
        field f2 @ [16] is (read, write) {
            method read() -> (uint64) {
                reads[2] = 1;
                return 0;
            }
        }
        field f1 @ [15] is (read, write) {
            method read() -> (uint64) {
                reads[1] = 1;
                return 0;
            }
        }
        field f0 @ [7:0] is (read, write) {
            method read() -> (uint64) {
                reads[0] = 1;
                return 0;
            }
        }
    }
    method test() throws {
        local uint64 val;
        val = read(0, 0xff, NULL);
        expect(reads == 0b0001, "fields 0");
        reads = 0;
        val = read(1, 0xff, NULL);
        expect(reads == 0b0010, "fields 1");
        reads = 0;
        val = read(2, 0xff, NULL);
        expect(reads == 0b0100, "fields 2");
        reads = 0;
        val = read(3, 0xff, NULL);
        expect(reads == 0b1000, "fields 3");
        reads = 0;
        val = read(4, 0xff, NULL);
        expect(reads == 0b1000, "fields 4");
        reads = 0;
    }
}

template order_field {
    is read;
    is write;
    method write(uint64 val) {
        names[idx] = this.name[0];
        f_indices[idx] = this.indices[0];
        ++idx;
    }
}
bank field_order {
    register order[unused < 2] size 4 is (unmapped) {
        // 3 7 11
        field a[i < 3] @ [i * 4 + 3] is (order_field);
        // 10:8 6:4 2:0
        field b[i < 3] @ [10 - i * 4 : 8 - i * 4] is (order_field);

        session int f_indices[10];
        session char names[10];
        session int idx;
        // Test that the access order of fields is deterministic, most
        // significant field first
        method test() throws {
            idx = 0;
            this.write_register(0, 0xffffffff, NULL);
            expect(idx == 6, "forder idx");
            expect(names[0] == 'b' && f_indices[0] == 2, "0");
            expect(names[1] == 'a' && f_indices[1] == 0, "1");
            expect(names[2] == 'b' && f_indices[2] == 1, "2");
            expect(names[3] == 'a' && f_indices[3] == 1, "3");
            expect(names[4] == 'b' && f_indices[4] == 0, "4");
            expect(names[5] == 'a' && f_indices[5] == 2, "5");
        }
    }
}

template misstest {
    is bank;
    param overlapping = true;
    register r1[i < 2] size 1 @ i * 4 + 1 is (read, write) {
        param init_val = i;
    }
    register r2 size 2 @ 3 is (read, write) { param init_val = 0x0203; }

    session uint64 miss_bits;

    // hack: don't forgive the miss if user data is non-NULL
    method unmapped_read(uint64 offset, uint64 bits, void *user)
        -> (uint64) throws {
        log info: "offset = %d", offset;
        assert offset == 0;
        miss_bits = bits;
        if (user != NULL) throw;
        return 0x1122334455667788;
    }
    method unmapped_write(uint64 offset, uint64 value, uint64 bits,
                          void *user) throws {
        assert offset == 0 && value == 0x1122334455667788;
        miss_bits = bits;
        if (user != NULL) throw;
    }
}

bank miss is (misstest) {
   method test() throws {
        miss_bits = 0;
        local uint64 val;
        val = read(0, 0xffffffffffffffff, NULL);
        expect(miss_bits == 0xffff000000ff00ff, "miss read bits");
        expect(val == 0x1122010203660088, "miss read val");
        miss_bits = 0;
        write(0, 0x1122334455667788, 0xffffffffffffffff, NULL);
        expect(miss_bits == 0xffff000000ff00ff, "miss bits write");
        local bool ok = false;
        try {
            val = read(0, 0xffffffffffffffff, &miss_bits);
        } catch ok = true;
        expect(ok, "miss read throw");
        ok = false;
        try {
            write(0, 0x1122334455667788, 0xffffffffffffffff, &miss_bits);
        } catch ok = true;
        expect(ok, "miss read throw");
    }
}

bank miss_be is (misstest) {
    param byte_order = "big-endian";
    method test() throws {
        miss_bits = 0;
        local uint64 val;
        val = read(0, 0xffffffffffffffff, NULL);
        expect(miss_bits == 0xff00ff000000ffff, "be miss read bits");
        expect(val == 0x1100330203017788, "be miss read val");
        miss_bits = 0;
        write(0, 0x1122334455667788, 0xffffffffffffffff, NULL);
        expect(miss_bits == 0xff00ff000000ffff, "be miss bits write");
        local bool ok = false;
        try {
            val = read(0, 0xffffffffffffffff, &miss_bits); } catch ok = true;
        expect(ok, "be miss read throw");
        ok = false;
        try {
            write(0, 0x1122334455667788, 0xffffffffffffffff, &miss_bits);
        } catch ok = true;
        expect(ok, "be miss read throw");
    }
}

bank unmapped {
    register unmapped size 4 is (unmapped);
    // OK to have multiple unmapped regs, even though the offsets overlap
    register unmapped2 size 1 @ unmapped_offset;

    method unmapped_read(uint64 offset, uint64 bits, void *user)
        -> (uint64) throws {
        return 0x1122334455667788;
    }

    method test() throws {
        local uint64 val;
        val = read(unmapped_offset, 0xff, NULL);
        expect(val == 0x88, "unm");
        val = read(unmapped_offset - 1, 0xffff, NULL);
        expect(val == 0x7788, "unm-1");
    }
}

method test() throws {
    b.test();
    array[0].test();
    array[1].test();
    sparse_fields.test();
    field_order.order[0].test();
    unmapped.test();
    miss.test();
    miss_be.test();
}
