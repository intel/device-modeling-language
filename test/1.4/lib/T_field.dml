/*
  Â© 2021-2022 Intel Corporation
  SPDX-License-Identifier: MPL-2.0
*/
dml 1.4;

device test;

// .val can be used, but not from shared methods
template use_val is (get, set) {
    method set(uint64 val) {
        this.val = val;
        this.val <<= 1;
        this.val >>= 1;
        this.val += 1;
    }
    method get() -> (uint64) {
        return this.val + 2;
    }
}

template use_get_val is (get, set) {
    shared method set(uint64 val) {
        set_val(val + 1);
    }
    shared method get() -> (uint64) {
        return get_val() + 2;
    }
}

bank b {
    param byte_order = "big-endian";
    register r1 size 4 @ 0 is use_val;
    register r2 size 4 @ 4 {
        field f @ [31:0] is use_val;
    }
    register r3 size 4 @ 8 is use_get_val;
    register r4 size 4 @ 12 {
        field f @ [31:0] is use_get_val;
    }
}

template field_order is bank {
    register r size 4 @ 0 {
        saved uint64 write_order;
        saved uint64 read_order;
        field a[i < 4] @ [((i + 1) % 4) * 8 + 7 : ((i + 1) % 4) * 8]
            is (read, write) {
            method write(uint64 val) {
                write_order <<= 8;
                write_order[7:0] = i;
            }
            method read() -> (uint64) {
	    	read_order <<= 8;
		read_order[7:0] = i;
		return 0;
            }
        }
    }
}
bank le is field_order { param byte_order = "little-endian"; }
bank be is field_order { param byte_order = "big-endian"; }
