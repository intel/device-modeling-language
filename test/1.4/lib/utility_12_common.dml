/*
  Â© 2021-2022 Intel Corporation
  SPDX-License-Identifier: MPL-2.0
*/
dml 1.4;

import "dml12-compatibility.dml";
import "utility.dml";

bank b {
    param overlapping = true;
    param partial = true;
    param register_size = 4;
    register read_write     @ 4 is (read, write);
    register ignore_write   @ 8 is (ignore_write,    read);
    register read_zero      @ 12 is (read_zero,      write);
    register read_only      @ 16 is (read_only,      read);
    register write_1_clears @ 20 is (write_1_clears, read);
    register clear_on_read  @ 24 is (clear_on_read,  write);
    register write_1_only   @ 28 is (write_1_only,   read);
    register write_0_only   @ 32 is (write_0_only,   read);

    register reserved       @ 52 is (reserved);
    register constant0      @ 56 is (constant) { param init_val = 0; }
    register constant1      @ 60 is (constant) { param init_val = 1; }
    register silent_constant @ 68 is (silent_constant) { param value = 1; }
    register zeros         @ 72 is (zeros);
    register ones           @ 76 is (ones);
    register ignore         @ 80 is (ignore);
    register undocumented0   @ 84 is (undocumented);
    register undocumented1   @ 88 is (undocumented);

    register fields0 size 1 @ 0 {
        field read_write     @ [0] is (read, write);
        field ignore_write   @ [1] is (ignore_write, read);
        field read_zero      @ [2] is (read_zero,    write);
        field read_only      @ [3] is (read_only,    read);
        field reserved1      @ [4] is (reserved);
        field reserved2      @ [5] is (reserved);
    }
    register fields1 size 1 @ 1 {
        field write_0_only   @ [7:6] is (write_0_only, read);
        field write_1_only   @ [5:4] is (write_1_only, read);
        field clear_on_read  @ [3:2] is (clear_on_read, write);
        field write_1_clears @ [1:0] is (write_1_clears, read);
    }
    register fields3 size 1 @ 3 {
        field x @ [2] is (read, write);
        field y @ [5] is (read, write);
    }
    register fields4 size 1  @ 104 {
        field constant0       @ [0] is (constant)  { param init_val = 0; }
        field constant1       @ [2:1] is (constant)  { param init_val = 3; }
    }
    register fields5 size 1  @ 108 {
        field constant0       @ [0] is (constant)  { param init_val = 0; }
        field constant1       @ [2:1] is (silent_constant)  {
            param init_val = 3;
        }
    }
    register fields6 size 1 @ 112 {
        field zeros          @ [0] is (zeros);
        field ones           @ [1] is (ones);
        field many_ones      @ [5:2] is (ones);
    }
    register fields7 size 1 @ 116 {
        field ignore         @ [7:0] is (ignore);
    }
    register fields8 size 1 @ 120 {
        field undocumented   @ [0] is (undocumented);
    }
    // register-only templates
    register write_only     @ 100 is (write_only, write);

    // resets, check only compile
    register reset          @ 124 is (unified_hard_reset, unified_soft_reset) {
         field reset        @ [0] is (unified_hard_reset, unified_soft_reset);
    }
}

attribute simple_bool is bool_attr;
attribute simple_uint64 is uint64_attr;
attribute simple_int64 is int64_attr;
attribute simple_double is double_attr;

template unified_hard_reset is hard_reset {
    method hard_reset() {
        try {
            default();
            log info, 1: "%s has hard reset", name;
        } catch {}
    }
}

template unified_soft_reset is soft_reset {
    method soft_reset() {
        try {
            default();
            log info, 1: "%s has soft reset", name;
        } catch {}
    }
}

// This code called from both 1.2 and 1.4
method test_attributes_14() -> (bool) {
    // Intentionally use different values from the set/verify pair
    simple_bool.val = false;
    simple_uint64.val = 3;
    simple_int64.val = -6;
    simple_double.val = 4.2;
    if (simple_bool.val)
        return false;
    if (simple_uint64.val != 3)
        return false;
    if (simple_int64.val != -6)
        return false;
    if (simple_double.val != 4.2)
        return false;
    return true;
}

// Called from 1.2, these values previously written from 1.2
method test_attributes_12_to_14_get() -> (bool) {
    if (simple_bool.val)
        return false;
    if (simple_uint64.val != 2)
        return false;
    if (simple_int64.val != -2)
        return false;
    if (simple_double.val != 6.12)
        return false;
    return true;
}
