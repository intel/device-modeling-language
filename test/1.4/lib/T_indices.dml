/*
  Â© 2021-2023 Intel Corporation
  SPDX-License-Identifier: MPL-2.0
*/
dml 1.4;
device test;

import "utility.dml";
import "testing.dml";

// This test serves as a general check that we can compile
// multi-dimensional constructs and that the 'indices' argument
// in each instance is correct

bank b[i < 2][j < 2] {
    param register_size = 4;
    register r[k < 2][l < 2] is (unmapped) {
        field f[m < 2][n < 2] @ [m*2 + n];
    }
    group g[k < 2][l < 2] {
        register r is (unmapped);
        group g {}
    }
}

connect c[i < 2][j < 2] {
    interface signal {}
    param required = false;
}

attribute a[i < 2][j < 2] is (bool_attr);

port p[i < 2][j < 2] {
    implement signal {
        method signal_lower() {}
        method signal_raise() {}
    }
}

method test() throws {
    for (local int i = 0; i < 2; i++) {
        for (local int j = 0; j < 2; j++) {
            assert b[i][j].indices[0] == i;
            assert b[i][j].indices[1] == j;
            for (local int k = 0; k < 2; k++) {
                for (local int l = 0; l < 2; l++) {
                    assert b[i][j].r[k][l].indices[0] == k;
                    assert b[i][j].r[k][l].indices[1] == l;
                    for (local int m = 0; m < 2; m++) {
                        for (local int n = 0; n < 2; n++) {
                            assert b[i][j].r[j][k].f[l][m].indices[0] == l;
                            assert b[i][j].r[j][k].f[l][m].indices[1] == m;
                        }
                    }
                }
            }
        }
    }
    for (local int i = 0; i < 2; i++) {
        for (local int j = 0; j < 2; j++) {
            assert c[i][j].indices[0] == i;
            assert c[i][j].indices[1] == j;
        }
    }
    for (local int i = 0; i < 2; i++) {
        for (local int j = 0; j < 2; j++) {
            assert a[i][j].indices[0] == i;
            assert a[i][j].indices[1] == j;
        }
    }
    for (local int i = 0; i < 2; i++) {
        for (local int j = 0; j < 2; j++) {
            assert p[i][j].indices[0] == i;
            assert p[i][j].indices[1] == j;
        }
    }
}
