/*
  Â© 2021-2022 Intel Corporation
  SPDX-License-Identifier: MPL-2.0
*/
dml 1.4;

device test;

import "utility.dml";

is hreset;
is sreset;
is poreset;

bank b {
    register r[i < 2] size 1 is (unmapped, read, write) {
        param init_val = i;
    }
    register p size 1 is (unmapped, read, write) {
        method power_on_reset() {
            this.val = 16;
        }
        method hard_reset() {
            this.val = 17;
        }
        method soft_reset() {
            this.val = 18;
        }
    }

    register q size 2 is (unmapped) {
        field f1 @ [3:0] is (read, write) {
            param init_val = 0xb;
        }
        field f2 @ [7:4] is (read, write) {
            method power_on_reset() {
                set_val(0xc);
            }
            method hard_reset() {
                set_val(0xd);
            }
            method soft_reset() {
                // this method is called on soft reset, but the value is
                // overwritten by reg.soft_reset_val
                set_val(0xe);
                /// GREP .*SOFT RESET q
                log info: "SOFT RESET q";
            }
        }
        field f3 @ [11:8] is (read, write) {
        }
        // 4 is overridden on both reset and init;
        // 3 is overridden only on reset;
        // 2 is used by f3;
        // 1 is preserved (outside fields)
        param init_val = 0x1234;
        is soft_reset_val;
        // takes precedence over values defined on field level
        param soft_reset_val = 0x6789;
    }

    // a reset method is responsible for resetting subobjects, if
    // applicable. So if the method is overridden without calling default, then
    // reset methods will not be called in subobjects.
    group g {
        is power_on_reset;
        is hard_reset;
        is soft_reset;
        method power_on_reset() { r.val = 2; }
        method hard_reset() { r.val = 3; }
        method soft_reset() { r.val = 4; }
        register r size 1 is (unmapped) {
            method power_on_reset() { assert false; }
            method hard_reset() { assert false; }
            method soft_reset() { assert false; }
        }
    }
}
