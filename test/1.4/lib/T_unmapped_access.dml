/*
  Â© 2021-2022 Intel Corporation
  SPDX-License-Identifier: MPL-2.0
*/
dml 1.4;
device test;

import "testing.dml";
import "utility.dml";

template partially_mapped_register is (register, unmapped) {
    param size = 4;
    param init_val = 0xf0f0f0f0;
    field f @ [31:16];
}

session uint64 most_recent_val;
session uint64 most_recent_mask;
session void *most_recent_aux;

template unmapped_bits_set is register {
    method read_unmapped_bits(uint64 enabled_bits, void *aux) -> (uint64) {
        most_recent_mask = enabled_bits;
        most_recent_aux = aux;
        return ~0;
    }
}

template log_unmapped_bit_write is register {
    method write_unmapped_bits(uint64 value, uint64 enabled_bits, void *aux) {
        most_recent_val = value;
        most_recent_mask = enabled_bits;
        most_recent_aux = aux;
    }
}

bank b {
    register r1 is partially_mapped_register;
    register r1_2 is partially_mapped_register;
    register r2 is partially_mapped_register {
        field g @ [7:4];
    }
    register r3 {
        is (partially_mapped_register,
            unmapped_bits_set,
            log_unmapped_bit_write);
    }
    register r4 {
        is (partially_mapped_register,
            unmapped_bits_set,
            log_unmapped_bit_write);
        method write_register(uint64 enabled_bits, uint64 value, void* aux) {
            log info, 1: "Overridden write_register: %#x", enabled_bits & value;
        }
        method read_register(uint64 enabled_bits, void* aux) -> (uint64) {
            return 0;
        }
    }
    register r5 size 4 is (unmapped) {
        is (unmapped_bits_set, log_unmapped_bit_write);
    }
}

method test() throws {
    // Check regular register semantics
    /// GREP \[obj spec-viol\] .*b.r1, bitranges;.*
    /// GREP .*15:0 .*written = 0b1111111111111111, previous.*= 0b0000111100001111.*
    b.r1.write_register(0xffffffff, 0xffffffff, NULL);
    // No log on second write
    b.r1.write_register(0xffffffff, 0xffffffff, NULL);

    // Check split ranges
    /// GREP \[obj spec-viol\] .*b.r1, bitranges;.*
    /// GREP .*15:8 .*written = 0b11111111, previous.*= 0b00001111.*
    /// GREP .*3:0 .*written = 0b1111, previous.*= 0b0000.*
    b.r1_2.write_register(0xffffffff, 0x0000ff0f, NULL);
    b.r1_2.write_register(0xf0f0f0f0, 0xffffffff, NULL);
    expect(b.r1_2.read_register(0xfffffff00, NULL) == 0xf0f0f000,
           "default read partially mapped reg");

    // segmented by field bit range
    /// GREP \[obj spec-viol\] .*b.r2, bitranges;.*
    /// GREP .*15:8 .*written = 0b11110000, previous.*= 0b00001111.*
    /// GREP .*3:0 .*written = 0b1111, previous.*= 0b0000.*
    b.r2.write_register(0x0f0f0f0f, 0xffffffff, NULL);
    expect(b.r2.read_register(0xfffffffff, NULL) == 0x0f0ff000,
           "default read segmented partially mapped reg");

    // Check overridden semantics
    b.r3.write_register(0xfffff0ff, 0xfffffff0, cast(11, void*));
    expect(most_recent_val == 0xf0ff, "simple custom write_unmapped val");
    expect(most_recent_mask == 0xfff0, "simple custom write_unmapped mask");
    expect(most_recent_aux == cast(11, void*), "simple custom write_unmapped aux");

    // Not called if no unmapped enabled bits
    b.r3.write_register(0x00000000, 0xffff0000, NULL);
    expect(most_recent_val == 0xf0ff,
           "recheck simple custom_write_unmapped val");
    expect(most_recent_mask == 0xfff0,
           "recheck simple custom_write_unmapped mask");
    expect(most_recent_aux == cast(11, void*),
           "recheck simple custom write_unmapped aux");

    expect(b.r3.read_register(0xfffffffff, cast(22, void*)) == 0x0000ffff,
           "custom read full unmapped reg");
    expect(most_recent_mask == 0xffff, "simple custom read_unmapped mask");
    expect(most_recent_aux == cast(22, void*),
           "simple custom read_unmapped aux");

    expect(b.r3.read_register(0xfffffff00, cast(33, void*)) == 0x0000ff00,
           "custom read partial unmapped reg");
    expect(most_recent_mask == 0xff00, "partial custom read_unmapped mask");
    expect(most_recent_aux == cast(33, void*),
           "partial custom read_unmapped aux");

    expect(b.r3.read_register(0xfffff0000, NULL) == 0x00000000,
           "custom read no unmapped reg");
    expect(most_recent_mask == 0xff00,
           "recheck partial custom read_unmapped mask");
    expect(most_recent_aux == cast(33, void*),
           "recheck partial custom read_unmapped aux");

    // TODO: Is this the expected log object for overridden write_register?
    /// GREP \[obj.bank.b info\] Overridden write_register: 0xfff0fff0
    b.r4.write_register(0xfff0ffff, 0xfffffff0, NULL);
    expect(b.r4.read_register(0xfffffffff, NULL) == 0x0,
           "overridden read unmapped reg");

    b.r5.write_register(0xfff0ffff, 0xfffffff0, NULL);
    expect(b.r5.read_register(0xfffffffff, NULL) == 0xfff0fff0,
           "default no field reg");
    expect(most_recent_val == 0xf0ff,
           "recheck simple custom_write_unmapped val after no-field");
    expect(most_recent_mask == 0xff00,
           "recheck partial custom read_unmapped mask after no-field");
    expect(most_recent_aux == cast(33, void*),
           "recheck partial custom read_unmapped aux after no-field");
}
