/*
  Â© 2021-2022 Intel Corporation
  SPDX-License-Identifier: MPL-2.0
*/
dml 1.4;

device test;

// Test the io_memory related templates from dml-builtins.dml and utility.dml

import "utility.dml";

implement io_memory {
    is function_io_memory;
}

port bare {
    implement io_memory {
        is bank_io_memory;
        param bank = a;
    }
}

bank a {
    param mappable = false;
    method read(uint64 address, uint64 enabled_bytes, void *user)
        -> (uint64) throws {
        return 0xaa;
    }
}
bank b {
    is function_mapped_bank;
    param function = 0xb;
    method read(uint64 address, uint64 enabled_bytes, void *user)
        -> (uint64) throws {
        return 0xbb;
    }
}
bank c {
    is function_mapped_bank;
    param function = 0xc;
    method read(uint64 address, uint64 enabled_bytes, void *user)
        -> (uint64) throws {
        return 0xcc;
    }
}
bank d[i < 2][j < 2] {
    is function_mapped_bank;
    param function = 0x10 + 2 * i + j;
    method read(uint64 address, uint64 enabled_bytes, void *user)
        -> (uint64) throws {
        return 0x10 * i + j;
    }
}

bank e {
    method io_memory_access(generic_transaction_t *memop, uint64 offset,
                            void *aux) -> (bool) {
        return default(memop, offset, cast(1234, void *));
    }
    method get(uint64 offset_, uint64 size_) -> (uint64) throws {
        saved uint64 offset;
        offset = offset_;
        saved uint64 size;
        size = size_;
        if (offset == 13)
            throw;
        return 4711;
    }
    method set(uint64 offset_, uint64 size_, uint64 value_) {
        saved uint64 offset;
        offset = offset_;
        saved uint64 size;
        size = size_;
        saved uint64 value;
        value = value_;
    }
    method read(uint64 offset_, uint64 enabled_bytes, void *aux_)
        -> (uint64) throws {
        saved uint64 offset;
        offset = offset_;
        saved uint64 mask;
        mask = enabled_bytes;
        saved uint64 aux;
        aux = cast(aux_, uintptr_t);
        if (offset == 13)
            throw;
        return 4711;
    }
    method write(uint64 offset_, uint64 value_, uint64 enabled_bytes,
                 void *aux_) throws {
        saved uint64 offset;
        offset = offset_;
        saved uint64 value;
        value = value_;
        saved uint64 mask;
        mask = enabled_bytes;
        saved uint64 aux;
        aux = cast(aux_, uintptr_t);
        if (offset == 13)
            throw;
    }
}
