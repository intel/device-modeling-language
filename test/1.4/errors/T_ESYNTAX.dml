/*
  Â© 2021-2022 Intel Corporation
  SPDX-License-Identifier: MPL-2.0
*/
dml 1.4;
device test;

/// ERROR ESYNTAX <command-line>
// unfortunately we have no nice way to check that errors are reported for all
// five defs
/// DMLC-FLAG -D//
/// DMLC-FLAG -D7=5
/// DMLC-FLAG -DX:8
/// DMLC-FLAG -DX=-3
/// DMLC-FLAG -DX=zzz
// no error on this line, sort of confirms that above -DX definitions failed
param X = 0;

// untyped parameters are forbidden in outargs, and in non-inline methods also
// for inargs
/// ERROR ESYNTAX
method m0(int) {
}

// inline annotation forbidden if method has no untyped arguments
inline
/// ERROR ESYNTAX
    method m2() {
}

inline
/// ERROR ESYNTAX
    method m3(int i) -> (int) {
}

template t {
    // no error, intended use
    param p : int;
    shared method m() {}
    #if (false) {
        /// ERROR ESYNTAX
        param p : int;
        /// ERROR ESYNTAX
        shared method m() {}
    }
}
/// ERROR ESYNTAX
param p : int;
/// ERROR ESYNTAX
shared method m() {}

param big    =   0xffff_ffff_ffff_ffff;
/// ERROR ESYNTAX
param bigger = 0x1_0000_0000_0000_0000;
/// ERROR ESYNTAX
param bigdec = 18446744073709551616;
param bigbin
/// ERROR ESYNTAX
 = 0b1_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000;

method d(int a, int b) { return (0, 0); }

method throwing() -> (int) throws { return 0; }
method simple() -> (int) { return 0; }
inline method inlined(inline i) -> (int) { return 0; }
method multi_out() -> (int, int) { return (0, 0); }

// forgot #if
/// ERROR ESYNTAX
if
    (false) {
}
/// ERROR ESYNTAX
else
{ }

method init() {
    local int a;
    local int b;
    // We may allow this syntax in the future, e.g. "(a, b) = (b, a);"
    /// ERROR ESYNTAX
    (a, b) = 5;

    // Assignment chain currently not allowed for complex methods
    try {
        /// ERROR ESYNTAX
        a = b = throwing();
    } catch {}
    /// ERROR ESYNTAX
    a = b = inlined(0);
    /// ERROR ESYNTAX
    (a, b) = (a, b) = multi_out();
    // No error here: nonthrowing() is an expression
    a = b = simple();

    // TODO: goto should be allowed with some restrictions, SIMICS-6130
    /// ERROR ESYNTAX
    goto foo;
}
