/*
  Â© 2021-2022 Intel Corporation
  SPDX-License-Identifier: MPL-2.0
*/
dml 1.4;

device test;

import "testing.dml";

import "simics/devs/i2c.dml";

connect ifaces {
    interface i2c_bus { param required = true; }
}

attribute a is (int64_attr);

template param_typed {
    param p1 : int64;
    param p2 : int64;
}

session int64 s;
template param_val {
    /// ERROR EINDEPENDENTVIOL
    param p1 = a.val;
    /// ERROR EINDEPENDENTVIOL
    param p2 = s;

    session int ts;

    shared independent method sm() -> (int) {
        /// ERROR EINDEPENDENTVIOL
        log info: "r";
        /// ERROR EINDEPENDENTVIOL
        dependent();

        local int i;
        local int j;
        local int k;
        /// ERROR EINDEPENDENTVIOL
        i = s;
        /// ERROR EINDEPENDENTVIOL
        j = ts;
        /// ERROR EINDEPENDENTVIOL
        j = this.ts;
        return i + j + k;
    }
}

port p is (param_typed, param_val);

independent method q() -> (int) {
    /// ERROR EINDEPENDENTVIOL
    log info: "q";
    /// ERROR EINDEPENDENTVIOL
    dependent();
    /// ERROR EINDEPENDENTVIOL
    local int to_ret = s;
    /// ERROR EINDEPENDENTVIOL
    session int ses;
    /// ERROR EINDEPENDENTVIOL
    saved int sav;

    /// ERROR EINDEPENDENTVIOL
    local bool not_present = !ifaces.i2c_bus.start;

    if (!not_present) {
        /// ERROR EINDEPENDENTVIOL
        to_ret += ifaces.i2c_bus.start(0);
    }

    /// ERROR EINDEPENDENTVIOL
    increment(&to_ret);

    return to_ret;
}

method dependent() {
    return;
}

inline method increment(inline x) {
    ++*x;
}

method test() throws {
    local param_typed _p = cast(p, param_typed);
    local int a = q() + p.sm();
    not_truly_independent(dev.obj);
}

independent method not_truly_independent(conf_object_t *obj) {
    // no error
    (&dependent)(obj);
}
