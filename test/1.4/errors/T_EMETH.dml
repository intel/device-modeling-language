/*
  Â© 2021 Intel Corporation
  SPDX-License-Identifier: MPL-2.0
*/
dml 1.4;

device test;

typedef uint32 int_alias_t;

template t {
    inline method inline_args(inline x, int y) default {}
    method throwing() throws default {}
    method int_args(uint32 a, int_alias_t b) default {}
    method int_return() -> (int) default { return 0; }
    method int_return_2() -> (int_alias_t, uint32) default { return 0; }

    shared method downcast_with_fallback(u fallback) -> (u) default {
        return fallback;
    }
}

is t;

template u is t {}

template v1 is u {
    // no error
    shared method downcast_with_fallback(u fallback) -> (u) {
        return cast(this, u);
    }
}

template v2 is u {
    /// ERROR EMETH
    shared method downcast_with_fallback(object fallback) -> (u) {
        return cast(this, u);
    }
}

template v3 is u {
    /// ERROR EMETH
    shared method downcast_with_fallback(u fallback) -> (object) {
        return cast(this, object);
    }
}

/// ERROR EMETH
inline method inline_args(int x, inline y) {}

/// ERROR EMETH
method throwing() {}

method int_args(
/// ERROR EMETH
    char a,
    int_alias_t b) default {}
/// ERROR EMETH
method int_return() -> (char) default { return 0; }
method int_return_2() -> (int_alias_t,
                          /// ERROR EMETH
                          char)
    default { return 0; }

port p is t {
    // no error
    method int_args(int_alias_t a, uint32 b) {}
    method int_return_2() -> (uint32, int_alias_t) {}
}

header %{
    typedef struct {
        void (*m)(conf_object_t *o, int i);
        void (*vararg)(conf_object_t *o, ...);
    } m_interface_t;
    %}
extern typedef struct {
    void (*m)(conf_object_t *o, int i);
    void (*vararg)(conf_object_t *o, ...);
} m_interface_t;

port p0 {
    implement m {
        /// ERROR EMETH
        method m() {}
    }
}

port p1 {
    implement m {
        /// ERROR EMETH
        method m(int i) -> (int) {
            return 0;
        }
    }
}

port p2 {
    implement m {
        /// ERROR EARGT
        method m(char *c) { }
    }
}

port p1 {
    implement m {
        /// ERROR EMETH
        method vararg() { }
    }
}
