/*
  Â© 2021-2022 Intel Corporation
  SPDX-License-Identifier: MPL-2.0
*/
dml 1.4;

device test;

session bool b;

// no error
method m1() -> (int) throws {
    if (b)
        return 1;
    else
        throw;
}

/// ERROR ENORET
method m2() -> (int) {
    if (b)
        return 1;
}

/// ERROR ENORET
method m3() -> (int) {
    if (b)
        ;
    else
        return 1;
}

// no error
method m4() -> (int) {
    try {
        if (b)
            return 1;
        else
            throw;
    } catch {
        return 2;
    }
}

// no output -> no error
method m5(int i) {
}

// no output -> no error, even if we throw
method m6(int i) throws {
}

// no error
method m7(int i) -> (int) throws {
    switch (i) {
    case 0:
        throw;
    case 1:
    case 2:
        ;
    default:
        return 5;
    }
}

method m8() -> (int) {
    try {
        do {
            break;
            // this statement is dead...
            throw;
        } while (true);
        return 0;
    } catch {
        // .. so this block is also dead ..
    }
    // .. so finally, this point is unreachable and we should get no error
}

/// ERROR ENORET
inline method m9(inline x) -> (int) {
}

template t {
    /// ERROR ENORET
    shared method m() -> (int) default {
    }
}

method m10() -> (int) {
    try {
        #foreach b in ([dev]) {
            break;
            // this statement is dead...
            throw;
        }
        return 0;
    } catch {
        // .. so this block is also dead ..
    }
    // .. so finally, this point is unreachable and we should get no error
}

method m11() -> (int) {
    try {
        #foreach b in ([dev]) {
            throw;
        }
        // this point is unreachable...
    } catch {
        return 0;
    }
    // ... as is this one, so we should get no error
}

method init() {
    local int i;
    try {
        i = m1();
    } catch {}
    i = m2();
    i = m3();
    i = m4();
    m5(1);
    try m6(1); catch;
    try i = m7(1); catch ;
    i = m8();
    i = m9(1);
    i = m10();
    i = m11();
}
