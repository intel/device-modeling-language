/*
  Â© 2024 Intel Corporation
  SPDX-License-Identifier: MPL-2.0
*/
dml 1.4;

device test;

template t0 {
    method m0() {}
}

template t1 is t0 {
    shared method m1() default {}
}

template t2 is t1 {
    param enable_t2 default true;
    #if (enable_t2) {
        method m1() default {}
        method m2() default {}
    }
}

template t3 is t2 {
    param enable_t3 default false;
    #if (enable_t3) {
        method m1() default {}
        method m2() default {}
    }
}

in each t1 {
    method m3() {}
}

group g is t3 {
    param enable_t2 = false;
    param enable_t3 = true;
}


template subdeclarer {
    param declare_subgroup default false;

    #if (declare_subgroup) {
        group subgroup {
            method m() {}
        }
    }
}

param declare_subgroup = true;
is subdeclarer;
group subgroup is subdeclarer;

method init() {
    // no error
    g.templates.t1.m0();
    g.templates.t1.m1();
    cast(g, t3).templates.t1.m1();

    /// ERROR EMEMBER
    g.templates.t1.nonexistent();
    /// ERROR EMEMBER
    cast(g, t3).templates.t1.nonexistent();

    // no error (uses t1's implementation)
    g.templates.t2.m1();
    /// ERROR EMEMBER
    g.templates.t2.m2();

    // no error
    g.templates.t3.m1();
    g.templates.t3.m2();

    // Even though the in-each guarantees its existence, m3 is still not part
    // of the template.
    /// ERROR EMEMBER
    g.templates.t1.m3();


    // Even though it's the 'subdeclarer' template that provides the
    // implementation of m() for the subgroup, it's not the particular
    // instantation of the template for the subgroup that provides the
    // implementation, but rather, the instantation of 'subdeclarer' for the
    // device template. Because of that, m() is not considered a valid TQMIC
    // candidate.
    /// ERROR EMEMBER
    subgroup.templates.subdeclarer.m();
}
