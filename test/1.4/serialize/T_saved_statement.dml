/*
  Â© 2021-2022 Intel Corporation
  SPDX-License-Identifier: MPL-2.0
*/
dml 1.4;

device test;

import "utility.dml";

// Implicitly tested by the naming of other saved attributes being as expected
method dead_method_with_saved() {
    saved int dead_saved = 5;
}

method method_with_saved(int set1, int set2) {
    saved int with_init = 5;
    // technically, DML implicitly sets this to 0
    saved int without_init;
    with_init = set1;
    without_init = set2;
}

port p[i < 4] {
    method port_array_method(int set) {
        // cannot initialize with i, apparently
        saved int v = 0;
        session int s;
        v = i + set;
    }
}

bank b[i < 4] {
    session int filler;
    register r size 4 is unmapped {
        session int filler;
        field f[j < 3] @ [j] {
            method nested_array_method(int set) {
                saved int v = 0;
                session int s;
                v = i * 3 + j + set;
            }
        }
    }
}

attribute set_saved is write_only_attr {
    param type = "[iiii]";
    method set(attr_value_t in_val) throws {
        local int set1 = SIM_attr_integer(SIM_attr_list_item(in_val, 0));
        local int set2 = SIM_attr_integer(SIM_attr_list_item(in_val, 1));
        local int set3 = SIM_attr_integer(SIM_attr_list_item(in_val, 2));
        local int set4 = SIM_attr_integer(SIM_attr_list_item(in_val, 3));
        method_with_saved(set1, set2);
        p[2].port_array_method(set3);
        b[1].r.f[2].nested_array_method(set4);
        test_context(5);
    }
}

method regular_context() {
    saved int v;
    v++;
}

inline method test_context(inline unused) {
    // These should both be fine
    regular_context();
    after 0.1 s: regular_context();
}