/*
  Â© 2021-2022 Intel Corporation
  SPDX-License-Identifier: MPL-2.0
*/
dml 1.4;

device test;

import "testing.dml";

template base {
    shared method m(int i) -> (int);
    param param: int;
    shared method o(int i) -> (int) { return this.m(i); }
    session int d;
    saved int e;
    param traitref_param: base;

    shared method hello2() {
        /// GREP \[obj info\] hello
        log info: "hello";
    }

    shared method hello() {
        // p[1].hello calls p[2].hello2
        this.traitref_param.hello2();
    }
}

template child is base {
    shared method m(int i) -> (int) {
        local int k;
        local int j;
        (j, k) = n(i + 1);
        return j;
    }
    shared method n(int i) -> (int, int) default {
        return (3, 1);
    }
}

port p[i < 2] {
    is child;
    param param = 13.2 + i;
    param traitref_param = cast(p[1-i], base);

    method n(int input) -> (int, int) default {
        local int j;
        local int k;
        (j, k) = default(input);
        return (input * (j + i), k + 3);
    }
}

// The way param pointers are stored, param values must appear on addresses
// aligned by two; without the alignment logic, references to one of the below
// params will break.
template byte_params {
    param aa : uint8;
    param ab : uint8;
    param ac : uint8;
}
group bytes is byte_params {
    param aa = 3;
    param ab = 4;
    param ac = 5;
}

// Test that sequence params work. They are represented differently from
// params of other types; three cases:
// a: "each T in this" represented as one each_in_t, with a certain marker
// b: each T in <object expr that doesn't depend on index params>: represented
//    as a single each_in_t
// c: each T in <object expr that depends on index params>: represented
//    as an array of each_in_t:s
template marker { param val : int; }
method marker_sum(sequence(marker) markers) -> (int) {
    local int sum = 0;
    foreach marker in (markers) {
        sum += marker.val;
    }
    return sum;
}
template seqs {
    param a : sequence(marker);
    param b : sequence(marker);
    param c : sequence(marker);
    shared method expect_sums(int a, int b, int c) {
        assert marker_sum(this.a) == a;
        assert marker_sum(this.b) == b;
        assert marker_sum(this.c) == c;
    }
}
group seqs[i<2][j<3] is seqs {
    param a = each marker in (this);
    param b = each marker in (seqs[i][1-j]);
    param c = each marker in (dev);
    group x is marker { param val = i*100 + j*10; }
    group y[k < 4] is marker { param val = i * 100 + j * 10 + k; }
    method test() {
        this.expect_sums(5 * (i * 100 + j * 10) + 6,
                         5 * (i * 100 + (1 - j) * 10) + 6,
                         100 * 3 * 5 + 10 * 2 * (1+2) * 5 + 6 * 2 * 3);
    }
}

session int count = 0;
method side() -> (int) {
    ++count;
    return 0;
}

header %{
    typedef struct {
        int x;
        const int y;
    } deep_const_t;
    static deep_const_t dc_val[2] = {{00,01},{10,11}};
%}
extern typedef struct {
    int x;
    const int y;
} deep_const_t;
extern deep_const_t dc_val[2];
template deep_const {
    param val : deep_const_t;
    shared method test(int i) {
        assert val.x == i * 10;
        assert val.y == i * 10 + 1;
    }
}
group  dc[i<2] is deep_const {
    param val = dc_val[i];
}

method test() throws {
    local child c = cast(p[1], child);
    local base pp;
    local base *ppp = &pp;
    *ppp = cast(cast(c, base), base);
    pp.m(0);
    c.m(0);
    c.o(0);
    expect(ppp->o(3) == 16, "ppp->o(3) == 16");
    expect(p[0].o(3) == 12, "p[0].o(3) == 12");;
    // The parameters value is given as a float value 14.2; the parameter's type
    // causes this to be truncated to an integer when referenced
    // dynamically as a trait parameter.
    expect(cast(p[1], child).param == 14, "cast(p[1], child).param == 14");
    expect(p[1].param == 14.2, "p[1].param == 14.2");
    p[1].d = 4;
    p[1].e = 5;
    p[0].d = 6;
    count = 0;
    expect((ppp + side())->d == 4, "ppp->d == 4");
    assert count == 1;
    expect(ppp->e == 5, "ppp->e == 5");
    expect(p[1 + side()].traitref_param.d == 6, "p[1].traitref_param.d == 6");
    assert count == 2;
    expect(p[0].traitref_param.e == 5, "p[0].traitref_param.e == 5");
    expect(p[1].param == 14.2, "p[1].param == 14.2");
    p[1].hello();

    assert cast(bytes, byte_params).aa == 3;
    assert cast(bytes, byte_params).ab == 4;
    assert cast(bytes, byte_params).ac == 5;

    for (local int i = 0; i < 2; i++) {
        for (local int j = 0; j < 2; j++) {
            seqs[i][j].test();
        }
    }

    dc[0].test(0);
    dc[1].test(1);
}
