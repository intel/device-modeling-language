/*
  Â© 2021-2022 Intel Corporation
  SPDX-License-Identifier: MPL-2.0
*/
dml 1.4;

device test;

import "testing.dml";

// Test that exporting works by going all the way around
// dml -> exported C -> extern C -> dml
// TODO: Test exporting methods from interface and implement, as well
//       as shared methods once they work
extern uint64 call_foo(conf_object_t *, uint64);
extern uint64 call_bm(conf_object_t *);
extern uint64 call_brm(conf_object_t *);
extern uint64 call_brfm(conf_object_t *);
extern uint64 call_m(conf_object_t *);
extern uint64 call_indie(uint64);

session int s;

method foo(uint64 a) -> (uint64) {
    ++s;
    return a + 1;
}

header %{
    extern uint64 foo(conf_object_t *, uint64);
    uint64 call_foo(conf_object_t *obj, uint64 a) {
        return foo(obj, a);
    }
    extern uint64 bm(conf_object_t *);
    uint64 call_bm(conf_object_t *obj) {
        return bm(obj);
    }
    extern uint64 brm(conf_object_t *);
    uint64 call_brm(conf_object_t *obj) {
        return brm(obj);
    }
    extern uint64 brfm(conf_object_t *);
    uint64 call_brfm(conf_object_t *obj) {
        return brfm(obj);
    }
    extern uint64 m(conf_object_t *);
    uint64 call_m(conf_object_t *obj) {
        return m(obj);
    }
    extern uint64 indie(uint64);
    uint64 call_indie(uint64 i) {
        return indie(i);
    }
%}

export foo as "foo";

bank b {
    method m() -> (uint64) {
        ++s;
        return 10;
    }
    register r size 4 @ 0 {
        method m() -> (uint64) {
            ++s;
            return 5;
        }
        field f @ [0:0] {
            method m() -> (uint64) {
                ++s;
                return 1;
            }
        }
    }
}

export b.m as "bm";
export b.r.m as "brm";
export b.r.f.m as "brfm";

template m_holder {
    method m() -> (uint64) {
        ++s;
        return 3;
    }
}

is m_holder;
export m as "m";

independent method indie(uint64 i) -> (uint64) {
    return i + 7;
}

export indie as "indie";

method test() throws {
       assert s == 0;
       expect(call_foo(this.obj, 1) == 2,
              "trivial method with argument, dev access, and return");
       assert s == 1;
       expect(call_bm(this.obj) == 10,
              "method exported from bank");
       assert s == 2;
       expect(call_brm(this.obj) == 5,
              "method exported from register");
       assert s == 3;
       expect(call_brfm(this.obj) == 1,
              "method exported from field");
       assert s == 4;
       expect(call_m(this.obj) == 3,
              "method accessing template parameters");
       assert s == 5;
       expect(call_indie(1) == 8,
              "independent method with argument and return");
}
