/*
  Â© 2021-2023 Intel Corporation
  SPDX-License-Identifier: MPL-2.0
*/
dml 1.4;

device test;

import "simics/simulator/conf-object.dml";

loggroup lg1;  loggroup lg2;  loggroup lg3;  loggroup lg4;  loggroup lg5;
loggroup lg6;  loggroup lg7;  loggroup lg8;  loggroup lg9;  loggroup lg10;
loggroup lg11; loggroup lg12; loggroup lg13; loggroup lg14; loggroup lg15;
loggroup lg16; loggroup lg17; loggroup lg18; loggroup lg19; loggroup lg20;
loggroup lg21; loggroup lg22; loggroup lg23; loggroup lg24; loggroup lg25;
loggroup lg26; loggroup lg27; loggroup lg28; loggroup lg29; loggroup lg30;
loggroup lg31; loggroup lg32; loggroup lg33; loggroup lg34; loggroup lg35;
loggroup lg36; loggroup lg37; loggroup lg38; loggroup lg39; loggroup lg40;
loggroup lg41; loggroup lg42; loggroup lg43; loggroup lg44; loggroup lg45;
loggroup lg46; loggroup lg47; loggroup lg48; loggroup lg49; loggroup lg50;
loggroup lg51; loggroup lg52; loggroup lg53; loggroup lg54; loggroup lg55;
loggroup lg56; loggroup lg57; loggroup lg58; loggroup lg59; loggroup lg60;
loggroup lg61;

method init() {
    test_shared_logs();

    local uint64 i = 7;
    local uint8 j = 5;
    // types of %d and %* args are automatic, regardless of type
    /// GREP .*arg 64 <0000007>
    log info: "arg 64 <%0*d>", i, i;
    /// GREP .*arg 8 <    5>
    log info: "arg 8 <%*d>", j, j;

    local int side_effect = 0;
    local int two = 2;
    // filtered on log level: not logged, side effect does not happen
    log info, two: "not logged %d", ++side_effect;
    assert side_effect == 0;
    local int level = 1;
    /// GREP .*log on level, #1
    log info, level: "log on level, #%d", ++side_effect;
    assert side_effect == 1;

    local attr_value_t a = SIM_make_attr_uint64(0);
    assert SIM_set_attribute(dev.obj, "log_group_mask", &a) == Sim_Set_Ok;
    // Somewhat unexpected: nothing is logged, but the side-effect does happen
    log error, 1, lg1: "not logged %d", ++side_effect;
    assert side_effect == 2;
    a = SIM_make_attr_uint64(lg61);
    assert cast(lg61, uint64) == 1 << 60;
    assert SIM_set_attribute(dev.obj, "log_group_mask", &a) == Sim_Set_Ok;
    /// GREP .*log on group, #3
    log info, 1, lg61: "log on group, #%d", ++side_effect;
    assert side_effect == 3;
}

attribute test_nolog is write_only_attr {
    param type = "n";

    method set(attr_value_t val) throws {
        log info, 1, lg1: "log on unselected group";
        log info, 1, lg60: "log on another unselected group";
        log info: "log on no group";
    }
}


template t is _qname {
    shared method hello() {
        log info: "hello from %s", _qname();
    }
}

is t;
group g is t {
    in each object { is t; }

    group c[i < 2];

    subdevice s[i < 3] {
        group c[j < 5][k < 7] is t {
            subdevice s;
        }
    }
}

method test_shared_logs() {
    /// GREP \[obj info\] hello from test
    hello();
    /// GREP \[obj info\] hello from g
    g.hello();
    /// GREP \[obj info\] hello from g.c\[1\]
    g.c[1].hello();
    /// GREP \[obj\.g\.s\[2\] info\] hello from g\.s\[2\]
    g.s[2].hello();
    /// GREP \[obj\.g\.s\[2\] info\] hello from g\.s\[2\]\.c\[3\]\[5\]
    g.s[2].c[3][5].hello();
    /// GREP \[obj\.g\.s\[2\]\.c\[3\]\[5\]\.s info\] hello from g\.s\[2\]\.c\[3\]\[5\]\.s
    g.s[2].c[3][5].s.hello();
}
