/*
  Â© 2021-2022 Intel Corporation
  SPDX-License-Identifier: MPL-2.0
*/
dml 1.4;

device test;

method once() {
    log info, 1 then 4: "regular once 1";
    log info, 1 then 5: "exact once";
}
method once2() {
    log info, 1 then 4: "regular once 2";
}

template st is name {
    shared method shared_once() {
        log info, 1 then 4: "shared method 1 once in %s", name;
    }
    shared method shared_once2() {
        log info, 1 then 4: "shared method 2 once in %s", name;
    }
}

group g1 is st;
group g2 is st;

session int multiply_inherited_count = 0;
template x is name {
    shared method m() {
        log info, 1 then 4: "multiply inherited";
    }
}
template y is x {}
template z is x {}
group g is (y,z);

template at {
    shared method m() {
        log info, 1 then 5: "shared in array";
    }
}
group a[i < 2][j < 2] is at {
    method m2() {
        log info, 1 then 5: "array method";
    }
}

attribute test is bool_attr {
    method set(attr_value_t val) throws {
        once();
        once();
        once2();
        once2();
        g1.shared_once();
        g1.shared_once();
        g1.shared_once2();
        g1.shared_once2();
        g2.shared_once();
        g2.shared_once();
    }
}

attribute test_multi_inheritance is bool_attr {
    method set(attr_value_t val) throws {
        cast(g, y).m();
        cast(g, y).m();
        cast(g, z).m();
        cast(g, z).m();
    }
}

attribute test_arrays is bool_attr {
    method set(attr_value_t val) throws {
        for (local int i = 0; i < 2; i++) {
            for (local int j = 0; j < 2; j++) {
                cast(a[i][j], at).m();
                cast(a[i][j], at).m();
            }
        }
        for (local int i = 0; i < 2; i++) {
            for (local int j = 0; j < 2; j++) {
                a[i][j].m2();
                a[i][j].m2();
            }
        }
    }
}
