/*
  Â© 2021-2022 Intel Corporation
  SPDX-License-Identifier: MPL-2.0
*/
dml 1.4;

device test;

import "testing.dml";

import "simics/simulator/sim-get-class.dml";

// check that GCC actually performs the aliasing-based optimizations we think
// for non-endian types
method bad() {
    local uint8 buf[10];
    local uint32 *p1 = cast(buf, uint32 *);
    // we filter the pointer through a unit function that the compiler doesn't
    // see; this stops gcc from collapsing the entire function to a constant
    SIM_set_class_data(SIM_get_class("test"), buf);
    local uint8 *buf2 = SIM_get_class_data(SIM_get_class("test"));
    local uint64 *p2 = cast(buf2, uint64 *);
    *p1 = 0x11223344;
    *p2 = 0x99aabbccddeeff;
    // Since uint64 and uint32 are not compatible, 'gcc -fstrict-aliasing'
    // deduces that the *p2 assignment did not affect *p1
    // This is really undefined behaviour, but there is no way for gcc to
    // prove that.
    assert *p1 == 0x11223344;
}

// now check these optimizations are *not* done on endian ints
method good() {
    local uint8 buf[10];
    SIM_set_class_data(SIM_get_class("test"), buf);
    local uint8 *buf2 = SIM_get_class_data(SIM_get_class("test"));
    local uint56_le_t *p1 = cast(buf, uint56_le_t*);
    local uint48_le_t *p2 = cast(buf2 + 1, uint48_le_t*);
    *p1 = 0x11223344556677;
    *p2 = 0xaabbccddeeff;
    assert *p1 == 0xaabbccddeeff77;
}

method test() throws {
    bad();
    good();
}
