/*
  Â© 2021-2022 Intel Corporation
  SPDX-License-Identifier: MPL-2.0
*/
dml 1.4;

device test;

import "testing.dml";
import "utility.dml";

bank _default {
    method test() throws {
        try {
            local uint64 value;
            value = unmapped_get(4711, 0xdeadbeef);
        } catch {
            return;
        }
        expect(false, "default should throw");
    }
}

template test_bank {
    is bank;

    param overlapping = true;
    param register_size = 1;
    register r1 @ 18 is (read, write) {
        param init_val = 0x01;
    }
    register r2 @ 20 is (read, write) {
        param init_val = 0x03;
    }
}

bank overload is (test_bank) {
    method unmapped_get(uint64 offset, uint64 bits) -> (uint64) throws default {
        assert offset == 17;
        assert bits == 0xff00ff00ff;
        return 0x0000000cff0bff0a;
    }

    method test() throws {
        local uint64 val;
        try {
            val = get(17, 5);
        } catch { assert false; }

        expect(val == 0x0c030b010a, "val == 0x0c030b010a");
    }
}

bank pattern is (test_bank, miss_pattern_bank) {
    param miss_pattern = 0xff;

    method test() throws {
        local uint64 val;
        try {
            val = get(17, 5);
        } catch { assert false; }

        expect(val == 0xff03ff01ff, "val == 0xff03ff01ff");
    }
}

method test() throws {
    _default.test();
    overload.test();
    pattern.test();
}
