/*
  © 2021-2022 Intel Corporation
  SPDX-License-Identifier: MPL-2.0
*/

/* column numbering works with unicode: ä */ dml 1.4;

/// COMPILE-ONLY
// ignored
/// DMLC-FLAG -Ptags

/* This file is an unordered mix of all auto-converted constructs.  We have
   rarely commented what code exercises which rule; in general, this can be
   seen by comparing corresponding locations in 1.2/misc and 1.4/misc

   tests.py verifies that all porting messages are exercised.
*/

import "utility.dml";
import "simics/devs/signal.dml";
import "porting-imported.dml";
import "porting-import.dml";
import "../../1.4/misc/porting-common-dml14.dml";

typedef struct { int i; } foo_t;

param my_value = 143;

bank b {
    param overlapping = true;
    is miss_pattern_bank;
    param miss_pattern = 0xfc;
    is function_mapped_bank;
    param function = 3;
    register r size 1 @ 0 {
        field f @ [4:3] {
            param init_val = 3;
            is soft_reset_val;
            param soft_reset_val = 4;
            is read;
            method read() -> (uint64) {
                local uint64 val;
                local int r2;
                val = this.val + r6.val;
                return val;
            }
            is write;
            method write(uint64 val) {
                local int f;
                this.val = val + dev.b.r.f.val;
            }
            is set;
            method set(uint64 val) {
                default(val);
            }
        }
        field f2[i < 2 + 1] @ [5 + i];
        field f3 @ [2] {
            param other = r.f;
            // one-bit field, used as condition
            // is no longer OK in 1.4 since type is uint64
            is write;
            method write(uint64 value) {
                if (value != 0) ;
                write_action(value);
            }
            method write_action(uint1 value) {
                if (this.val == 0)
                    other.val = 2;
            }
        }
    }
    register r4 size 1 @ 3 {
        field f3[i < 2 + 1] @ [5 + i] is unimpl;
        field f2 @ [2] is silent_unimpl;
        field f1 @ [1] is read_unimpl;
        field f0 @ [0] is write_unimpl;
    }
    register r6 size 1 @ 5 {
        is read;
        method read() -> (uint64) {
            local uint64 val;
            val = get();
            val = this.val;
            return val;
        }
        is write;
        method write(uint64 val) {
            this.val = val;
            set(val);
        }
    }
    // This pattern appears a lot in real (generated) code; check that it
    // doesn't devastate the performance of the PHASH check
    register r8[i < 30] size 1 @
        10 + (i == 0 ? 0
              : i == 1 ? 1
              : i == 2 ? 2
              : i == 3 ? 3
              : i == 4 ? 4
              : i == 5 ? 5
              : i == 6 ? 6
              : i == 7 ? 7
              : i == 8 ? 8
              : i == 9 ? 9
              : i == 10 ? 10
              : i == 11 ? 11
              : i == 12 ? 12
              : i == 13 ? 13
              : i == 14 ? 14
              : i == 15 ? 15
              : i == 16 ? 16
              : i == 17 ? 17
              : i == 18 ? 18
              : i == 19 ? 19
              : i == 20 ? 20
              : i == 21 ? 21
              : i == 22 ? 22
              : i == 23 ? 23
              : i == 24 ? 24
              : i == 25 ? 25
              : i == 26 ? 26
              : i == 27 ? 27
              : i == 28 ? 28
              : i == 29 ? 29 : 0);
    is soft_reset;
    method soft_reset() {
        log info: "hard reset %d", r8[2 + 3].val;
        default();
    }
    is hard_reset;
    method hard_reset() {
        log info: "soft reset";
        default();
    }
}

bank arri[i < 16];
bank arr[j < 16];
param sixteen = 16;
param fifteen = 15;
bank arr[j < sixteen];
bank arr[j < sixteen];
bank arr[j < (sixteen)];
bank arr[j < fifteen + 1];
bank arr[j < [0, 15][[1][0]] + 1];

param iii=4;
port pp {
    param iii = 5;
    param jjj = 6;
    method m(int jjj) {
        // must insert 'this.' before jjj, but not iii
        iii;
        this.jjj;
    }
}

connect c {
    method set(conf_object_t *obj) {
        log info: "before set conn";
        default(obj);
        log info: "after set conn";
    }
    method validate(conf_object_t *obj) -> (bool) {
        local bool valid;
        if (this.obj == obj)
            valid = true;
        return valid;
    }
}

template t {
    method m() default {
        local int i;
        i = o();
        (i, i) = mo();
    }

    method o() -> (int) default {
        local int i;
        p();
        p();
        after 1.3 + 0.3 s: p();
        after 2.3 s: p();
        return i;
    }

    method p() default {
    }
    method dead_typed(int i) default {
        log info: "%d", b.r.f.val;
    }
// PORT-DML-WARNING WUNUSED
    inline method dead_inline(inline i) default {
        log info: "%d", b.r.f;
    }
}

method dead_typed(int i) {
    log info: "%d", b.r.f.val;
}
// PORT-DML-WARNING WUNUSED
inline method dead_inline(inline i) {
    session int j;
    log info: "%d", b.r.f;
}

is t;

method m() {
    default();
    log info: "foo";
    log spec_viol, 3, 0: "bar";
    log unimpl, 1: "baaz";
    log critical: "quux";
}

method o() -> (int) {
    local int i;
    i = default();
    return i;
}

method p() {
}

// PORT-DML-WARNING WUNUSED
inline method i(inline p) -> (uint64) {
    local uint64 x;
    return x;
}

// PORT-DML-WARNING WUNUSED
inline method ii(inline p) -> (uint64, uint64) /* x, y */ {
    local uint64 x;
    local uint64 y;
    return (x, y);
}

session int d;

method /* wääät */ common_throws() throws {
}

method common_no_inline(char *(**x)(int arg0)) {
}

template local_no_inline {
    method local_no_inline(int x) default {}
}
is local_no_inline;
// PORT-DML-WARNING WUNUSED
method local_no_inline(int x) {
}

method mo() -> (int, int) /* i, e */ default {
    local int i;
    local int e;
    i = 3;
    e = 4;
    if (i == 3)
        return (i, e);
    return (i, e);
}

connect c {
    method cond(conf_object_t *obj) -> (bool) {
        local bool eq;
        eq = obj == this.obj;
        return eq;
    }
}

attribute a {
    param type = "n";
    method get() -> (attr_value_t) {
        local attr_value_t val;
        return val;
    }
    method set(attr_value_t val) throws {
    }
}

attribute ai is int64_attr {
    param documentation = "xyz";
    param desc = "foo";
    method set(attr_value_t value) throws {
        log info: "before set attr";
        default(value);
        log info: "after set attr";
        local int au = this.val; 
        dev.au.val = au;
    }
}

attribute au is uint64_attr {}

attribute au1 is uint64_attr {
}

attribute ad is double_attr {
// hello
}

// PORT-DML-WARNING WUNUSED
#if (false) {
    attribute ab { param allocate_type = "bool"; }
    error;
// PORT-DML-WARNING WUNUSED
} #else #if (true) {
    attribute ab is bool_attr {}
} #else {
    attribute ab { param allocate_type = "bool"; }
    error;
}

template inferior_x {
    method x() default {}
}

template inferior_y {
    param y default undefined;
}

template inferior_y2 {
    param y default undefined;
}

template superior1 is (inferior_x, inferior_y) {
    method x() {}
    param y = 1;
}

template superior2 is (inferior_x, inferior_y, inferior_y2) {
    param y = 2;
}

template superior3 is inferior_x {
    is inferior_y;
    method x() {}
}

port p1 is (inferior_x, superior1, inferior_y);
port p2 is (inferior_y, superior2, inferior_y2);
port p3 is (superior3, inferior_x);

// PORT-DML-WARNING WUNUSED
template dead {
    param p = b.r.f;
}

// check that we get no warning if a declaration is instantiated twice
// where one is used and the other unused.
template half_dead {
    inline method x(inline y) { }
    #if (alive) {
        interface signal;
    } #else {
        interface signal;
    }
}

param undef = undefined;

connect c is half_dead {
    param alive = false;
    interface signal { param required = false; }
}

connect c2 is half_dead {
    param alive = true;
}

param some_string = stringify(1001);
param some_other_string = stringify((b.r6.offset));

event ev is custom_cycle_event {
    method get_event_info(void *data) -> (attr_value_t) {
        local attr_value_t attr;
        attr = SIM_make_attr_nil();
        return attr;
    }
    method set_event_info(attr_value_t attr) -> (void *) {
        local void *data;
        return data;
    }
    method destroy(void *data) {}
    method event(void *data) {}
}

template evt is event {
    method get_event_info(void *data) -> (attr_value_t) {
        local attr_value_t attr;
        attr = SIM_make_attr_nil();
        return attr;
    }
    method set_event_info(attr_value_t attr) -> (void *) {
        local void *data;
        return data;
    }
    method destroy(void *data) {}
    method event(void *data) {}
}

event ev2 is (custom_time_event, evt) {
}

method init() {
    c2.x(0);
    p();
    m();
    pp.m(0);
    local int i;
    i = o();
    common_no_inline(NULL);
    log info: "%d %d %d", au.val, b.r6.val, b.r.f.val;
    #if (defined(undef)) {
        error;
    } #else if (defined(undef)) {
    } else #if (true) {
    } #else {
        error;
    }

    i = defined(undef) #? undef #: false ? 0 : true #? 3 #: undefined;
    i = (defined undef #? undef.x #: false) ? 1 : 0;
    i = (!defined undef #? true #: undef.z) ? 1 : 0;
    #if (defined undef) {
        if (undef.cond) {
        }
    }

    #select x in ([b.r6, b2.r3]) where (x.val == 5) { x.val = 3; } #else {}
    #foreach x in ([b.r6, b2.r3]) { x.val = 4; }

    if (b.r.f3.val != 0 ? b.r.f2[0].val != 0 && b.r.f2[2].val == 0 : false)
        ;
    if (c.signal.val) {
        if (!c.signal.signal_lower) {
            c.signal.signal_raise();
        }
    }
}
