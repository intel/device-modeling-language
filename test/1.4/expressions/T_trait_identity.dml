/*
  Â© 2021-2023 Intel Corporation
  SPDX-License-Identifier: MPL-2.0
*/
dml 1.4;

device test;

import "testing.dml";

param base1 = base[1];

template t {}

group base[i < 2] is t {
    group child[l < 5][m < 7] is t;
}

method test() throws {
    #if (cast(base[0], object) == cast(base1, object)) {
        error "base[0] == base1";
    }

    #if (cast(base[1], object) != cast(base1, object)) {
        error "base[1] != base1";
    }

    #if (cast(base[0].child[0][0], object)
         == cast(base[0], object)) {
        error "base[0].child[0][0] == base[0]";
    }

    #if (cast(base[0].child[0][0], t) == cast(base[0], t)) {
        error "base[0].child[0][0] == base[0]";
    }

    for (local int i = 0; i < 2; ++i) {
        assert cast(base[i], t) == cast(base[i], t);
        assert cast(base[i], t) != cast(base[i ^ 1], t);
        assert cast(base[i].child[0][0], t) != cast(base[i], t);


        assert cast(cast(base[i], t), object)
            == cast(base[i], object);
        assert cast(cast(base[i], t), object)
            == cast(cast(base[i], object), object);

        local object id_1 = cast(base[i], object);
        local object id_2 = cast(cast(base[i], t), object);
        assert id_1 == id_2;
        assert cast(base[i], object) == id_2;
        assert id_1 == cast(cast(base[i], t), object);
    }

    local int found = 0;
    foreach child in (each t in (base[1])) {
        local bool same = child == cast(base[1].child[2][3], t);
        assert (strcmp(base[1].child[2][3].qname,
                       cast(child, object)._qname()) == 0)
               == same;
        found += same ? 1 : 0;
    }
    assert found == 1;
}
