/*
  Â© 2021-2022 Intel Corporation
  SPDX-License-Identifier: MPL-2.0
*/
dml 1.4;

device test;

import "testing.dml";

template indirect {}

template tr is indirect {
    shared method m() -> (int);
}

template t {
    is tr;
    method m() -> (int) { return p + '0'; }
    param p;
}

bank a {
    group b[i < 2] is (t) {
        param p = 7;
        group c[j < 2] is (t) { param p = i*2+j; }
        group d is (t) { param p = i + 4; }
    }
}

method test() throws {
    local bool found = false;
    foreach obj in (each tr in (a.b[0].d)) {
        found = true;
    }
    expect(!found, "don't yield self");

    local char values[4][20];
    local int objidx = 0;
    #foreach obj in ([a.b[0].c[0], a.b[0], a.b[1], a]) {
        local int i = 0;
        foreach g in (each tr in (obj)) {
            values[objidx][i] = g.m();
            ++i;
        }
        values[objidx][i] = 0;
        ++objidx;
    }
    expect(values[0][0] == 0, values[0]);
    // the order of c and d instances is undefined
    expect(strcmp(values[1], "014") == 0 || strcmp(values[1], "401") == 0,
            values[1]);
    expect(strcmp(values[2], "235") == 0 || strcmp(values[2], "523") == 0,
            values[2]);
    // recursion does not descend into subobjects that implement the template
    expect(strcmp(values[3], "77") == 0, values[3]);

    // iteration should also catch templates that are supertemplates of the
    // current trait
    found = false;
    foreach obj in (each indirect in (a.b[0])) {
        found = true;
    }
    expect(found, "indirectly instantiated template");
}
