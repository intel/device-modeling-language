/*
  Â© 2021-2023 Intel Corporation
  SPDX-License-Identifier: MPL-2.0
*/
// Test functionality of EndianInt types in various contexts

dml 1.4;

device test;

header %{
bool coerce_vargs(uint64 coerce, ...) {
    va_list varargs;
    va_start(varargs, coerce);
    uint64 var_arg = va_arg(varargs, uint64);
    va_end(varargs);
    bool ok = 1;
    ok = ok & (coerce == 0xFFFFFFF);
    ok = ok & (var_arg == 0xFFFFFF0);
    return ok;
}
%}

extern bool coerce_vargs(uint64, ...);

template use_typed_endianint_parameters {
    // No need to test the types exhuastively
    param typed_int64_be_t : int64_be_t;
    param typed_uint64_le_t : uint64_le_t;
    param typed_uint8_le_t : uint8_le_t;
    param typed_int8_le_t : int8_le_t;
    shared method s_m_t(int x) throws default {
        // coerced eint argument in shared throwing method call
        assert x == 10;
    }
    shared method s_m(int x) -> (int) default {
        return x / 2;
    }
    method m_t(int x) default {
        // coerced eint argument in template method call
        assert x == 10;
    }
    method m(int x) -> (int) default {
        return x / 2;
    }
}

param int_val = 5;

port p is use_typed_endianint_parameters {
    param typed_int64_be_t  = -255;
    param typed_uint64_le_t = 0xFFFFFFFF;
    param typed_uint8_le_t  = 255;
    param typed_int8_le_t = int_val;
}

typedef struct {
  int24_be_t int24be;
  int48_le_t int48lea[2];
} be_struct;

typedef uint24_be_t endian_alias_t;

method int_arg(int64 arg) -> (int64) {
    assert arg == 10;
    // recreate endian int locally, and return
    return cast(arg, int64_le_t);
}

method init() {
    local int64_be_t int64be   = 0x7f;
    local int64_le_t int64le   = 0x7f;
    local int56_le_t uint56le  = 0x7f;
    local int48_le_t int48le   = 0x7f;
    local uint24_be_t uint24be = 0x7f;
    local uint64_le_t uint64le = 0x7f;
    local int8_be_t int8be   = 0x7f;
    local int8_le_t int8le   = 0x7f;
    local uint8_be_t uint8be = 0x7f;
    // These should all trivially be true;
    assert int64be == 0x7f;
    assert int64be == int64le;
    assert int64be == uint64le;
    assert int64be == uint56le;
    assert int64be == int48le;
    assert int64be == uint24be;
    assert int64be == int8be;
    assert int64be == int8le;
    assert int64be == uint8be;
    // Sanity check some transitive, reflexive, and commutative properties
    assert int64be == int64be;
    assert int64le == int64be;
    assert uint64le == int64be;
    assert int64le == uint64le;
    assert uint64le == int8be;
    assert int8be == uint64le;
    assert int8be == uint8be;

    // Check that parameters and typed parameters work correctly
    local int8_be_t local_from_param = int_val;
    assert local_from_param == 5;
    local use_typed_endianint_parameters tp =
        cast(p, use_typed_endianint_parameters);
    assert tp.typed_int64_be_t == -255;
    assert tp.typed_uint64_le_t == 0xFFFFFFFF;
    assert tp.typed_uint8_le_t == 255;
    assert tp.typed_int8_le_t == 5;

    // Check session variable
    // TODO: Session initializers are required to be constant,
    // which implicitly converted endian ints are not
    session int32_be_t int32_be_t_session;
    int32_be_t_session = -2555;
    session uint16_le_t uint16_le_t_session;
    uint16_le_t_session = 455;
    assert int32_be_t_session == -2555;
    assert uint16_le_t_session == 455;
    local bitfields 32 { uint32 whatever @ [31:0]; } bf = 0xff;
    local int64_be_t from_bitfield = bf;
    assert from_bitfield == 0xff;

    // Check that shorthand variable statements work
    local int48_le_t var = 10;
    var += 5;
    assert var == 15;
    var -= 10;
    assert var == 5;
    var *= 4;
    assert var == 20;
    var /= 5;
    assert var == 4;
    var %= 3;
    assert var == 1;

    local int i = 10;
    i += var;
    assert i == 11;
    i -= var;
    assert i == 10;
    i *= var;
    assert i == 10;
    i /= var;
    assert i == 10;
    i %= var;
    assert i == 0;

    // Check endianint as struct member
    local be_struct bes;
    local be_struct bes2;
    local be_struct *besp = &bes;
    bes.int24be = 5;
    bes.int48lea[0] = 10;
    bes.int48lea[1] = 15;
    assert bes.int24be == 5;
    assert bes.int48lea[0] == 10;
    assert bes.int48lea[1] == 15;
    assert besp->int24be == 5;
    assert besp->int48lea[0] == 10;
    assert besp->int48lea[1] == 15;
    besp->int24be = 10;
    assert bes.int24be == 10;
    assert besp->int24be == 10;
    besp->int48lea[1] = 5;
    assert bes.int48lea[1] == 5;
    assert besp->int48lea[1] == 5;
    bes2 = bes;
    assert bes2.int24be == 10;
    assert bes2.int48lea[0] == 10;
    assert bes2.int48lea[1] == 5;

    // Check size of endianint in structs
    assert sizeoftype be_struct == 15;
    assert sizeof(bes) == 15;

    // Method call with eint arg
    var = 10;
    assert int_arg(var) == 10;

    assert coerce_vargs(cast(0xFFFFFFF, uint56_be_t),
                        cast(0xFFFFFF0, uint56_le_t));

    // Trait method call with eint arg
    // indirect, throws
    try {
        tp.s_m_t(var);
    } catch assert false;
    // indirect, nothrow
    assert tp.s_m(var) == 5;
    // direct, throws
    try {
        p.s_m_t(var);
    } catch assert false;
    // direct, nothrow
    assert p.s_m(var) == 5;
    // non-shared, throws
    p.m_t(var);
    // non-shared, nothrow
    assert p.m(var) == 5;

    // Check log info formatting
    log info, 1: "eint: %d", var;

    // Check bitslicing operations
    local uint24_le_t ule24;
    ule24 = 0xf2f0f1;
    assert ule24[7:0] == 0xf1;
    ule24[15:8] = 0xf;
    assert ule24 == 0xf20ff1;

    // Check casts, only concerned about compilation
    i = 5;
    local int48_be_t i48be;
    // Implicit
    i48be = 5;
    // Explicit
    i48be = cast(5, int48_be_t);
    // From variable, implicit
    i48be = i;
    // From variable, explicit
    i48be = cast(i, int48_be_t);
    // Other way around
    i = i48be;
    i = cast(i48be, int);
    i = cast(i48be, endian_alias_t);

    // Check endian int as array index
    local int8 arr[8] = {0, 1, 2, 3, 4, 5, 6, 7};
    assert arr[i48be] == 5;

    // Check implicit coerce to bitfield
    // Only concerned about compilation
    local bitfields 48 {
       uint4 a @ [5:2];
    } bt = i48be;

    // Check rudimentary pointer arithmetic
    local int iarr[3] = {0, 1, 2};
    local int *iarrp = &iarr[1];
    var = 1;
    assert (iarrp + var) == &iarr[2];
    assert (var + iarrp) == &iarr[2];
    assert (iarrp - var) == &iarr[0];
}
