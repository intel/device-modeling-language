/*
  Â© 2022 Intel Corporation
  SPDX-License-Identifier: MPL-2.0
*/
dml 1.4;

device test;

session int s;

method foo(uint64 a) -> (uint64) {
    ++s;
    return a + 1;
}

bank b {
    method m() -> (uint64) {
        ++s;
        return 10;
    }
    register r size 4 @ 0 {
        method m() -> (uint64) {
            ++s;
            return 5;
        }
        field f @ [0:0] {
            method m() -> (uint64) {
                ++s;
                return 1;
            }
        }
    }
}
template m_holder {
    method m() -> (uint64) {
        ++s;
        return 3;
    }
}

is m_holder;

independent method indie(uint64 i, uint64 j) -> (uint64) {
    return i + j;
}

method init() {
    assert s == 0;
    // trivial method with argument, dev access, and return
    assert (&foo)(dev.obj, 1) == 2;

    assert s == 1;
    // method statically exported from bank
    assert (&b.m)(dev.obj) == 10;
    assert s == 2;
    // method statically exported from register
    assert (&b.r.m)(dev.obj) == 5;
    assert s == 3;
    // method statically exported from field
    assert (&b.r.f.m)(dev.obj) == 1;
    assert s == 4;
    // method accessing template parameters
    assert (&m)(dev.obj) == 3;
    assert s == 5;
    // independent method with arguments and return
    assert (&indie)(1, 7) == 8;
}
