/*
  Â© 2021-2022 Intel Corporation
  SPDX-License-Identifier: MPL-2.0
*/
dml 1.4;
device test;
import "testing.dml";

template mopq {
    method M() default {
        /// GREP \[obj info\] default M
        log info: "default M";
    }

    method O(int x) default {
        /// GREP \[obj info\] default O 3
        log info: "default O %d", x;
    }

    inline method P(inline x) default {
        /// GREP \[obj info\] default P 3
        log info: "default P %d", x;
    }

    method Q() -> (int, int) default {
        return (1, 2);
    }
}

is mopq;

method M() {
    /// GREP \[obj info\] overridden M
    log info: "overridden M";
    default();
}

method O(int y) {
    /// GREP \[obj info\] overridden O 2
    log info: "overridden O %d", y;
    default(y+1);
}

inline method P(inline x) {
    /// GREP \[obj info\] overridden P 2
    log info: "overridden P %d", x;
    default(x+1);
}

method Q() -> (int, int) {
    local int i;
    local int j;
    (i, j) = default();
    return (j, i);
}

template t {
    shared method m() -> (int) default { return this.n() + 4; }
    shared method n() -> (int) default { return 1; }
    shared method th() -> (int) throws default { return this.n() + 4; }
}

template u is t {
    shared method m() -> (int) default { return default() + 8; }
    shared method n() -> (int) default { return default() + 2; }
    shared method th() -> (int) throws default {
        local int n;
        n = default();
        return n + 8;
    }
}

is u;

method test() throws {
    M();
    O(2);
    P(2);
    local int i;
    local int j;
    (i, j) = Q();
    expect(i == 2 && j == 1, "Q");
    expect(cast(dev, t).n() == 3, "n");
    expect(cast(dev, t).m() == 15, "m");
}
