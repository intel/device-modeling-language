/*
  Â© 2021 Intel Corporation
  SPDX-License-Identifier: MPL-2.0
*/
dml 1.4;
device test;

template t {
    attribute flag[i < 2] is bool_attr;
    attribute storage[i < 2] is uint64_attr;

    hook() h1;
    hook(uint64) h2;

    method m1() {
        log info: "running m1";
        flag[0].val = true;
    }

    method m2(uint64 v) {
        log info: "running m2 with v = %d", v;
        storage[0].val = v;
    }

    method m1_h() {
        log info: "running m1_h";
        flag[1].val = true;
    }

    method m2_h(uint64 v) {
        log info: "running m2_h with v = %d", v;
        storage[1].val = v;
    }

    method post_m1() {
        after 0.1 s: m1();
    }

    method post_m2(uint64 v) {
        after 0.1 s: m2(v);
    }
    method post_h1_send_now() {
        after 0.1 s: h1.send_now();
    }

    method post_h2_send_now(uint64 v) {
        after 0.1 s: h2.send_now(v);
    }
}

is t;

group g is t;

port p[i < 2][j < 2] is t;

in each t {
    is post_init;
    method post_init() {
        if (!SIM_is_restoring_state(dev.obj)) {
            after h1: m1_h();
            after h2 -> x: m2_h(x);
        }
    }
}

method post_init() {
    if (!SIM_is_restoring_state(dev.obj)) {
        after h1: m1_h();
        after h2 -> x: m2_h(x);
    }
}

attribute exec_afters is write_only_attr {
    param type = "n";
    method set(attr_value_t val) throws {
        log info: "running exec_afters";
        #foreach obj in ([dev, g, p[0][1], p[1][1]]) {
            obj.post_m1();
            obj.post_h1_send_now();
        }
        #foreach obj in ([dev, g]) {
            obj.post_m2(1);
            obj.post_h2_send_now(1);
        }
        #foreach obj in ([p[0][1], p[1][1]]) {
            obj.post_m2(4);
            obj.post_h2_send_now(4);
        }
    }
}

attribute cancel_afters is write_only_attr {
    param type = "n";
    method set(attr_value_t val) throws {
        log info: "running cancel_afters";
        g.cancel_after();
        p[0][1].cancel_after();
    }
}
