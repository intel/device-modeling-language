/*
  Â© 2021-2022 Intel Corporation
  SPDX-License-Identifier: MPL-2.0
*/
dml 1.2;
device test;
import "testing.dml";

header %{
    typedef int (*f_t)(conf_object_t *obj, int x);
    typedef struct {
        f_t f1;
        f_t f2;
    } foo_interface_t;

    int f(conf_object_t *obj, int x) { return x + 1; }
    void reg(conf_object_t *obj) {
        static const foo_interface_t i = { f, NULL };
        SIM_register_interface(SIM_object_class(obj), "foo", &i);
    }
%}
extern void reg(conf_object_t *obj);

extern typedef int (*f_t)(conf_object_t *obj, int x);
extern typedef struct {
    f_t f1;
    f_t f2;
} foo_interface_t;

typedef foo_interface_t bar_interface_t;

connect c {
    interface foo;
}

connect dummy {
    interface bar;
}

method init() {
    reg($dev.obj);
    local set_error_t err;
    call $c.set_attribute(SIM_make_attr_object($dev.obj)) -> (err);
    assert err == Sim_Set_Ok;
}

method test -> (bool ok) {
    // ! is a magic operator for comparing interface methods to NULL
    // see also bug 24144
    if (!$c.foo.f2) {
        ok = $c.foo.f1(2) == 3;
    } else {
        ok = false;
    }
    // Detects if 'bar' has broken type
    ok = ok && sizeof($dummy.bar) != 0;
}
