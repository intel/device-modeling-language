/*
  Â© 2021-2022 Intel Corporation
  SPDX-License-Identifier: MPL-2.0
*/
dml 1.2;
device test;
import "testing.dml";

// Bug #5808

method ucompare(val1, val2, ok) -> (newok) {
    if (val1 == val2) {
        log "info": "%u == %u", val1, val2;
        newok = ok;
    } else {
        log "info": "%u != %u", val1, val2;
        newok = false;
    }
}

method scompare(val1, val2, ok) -> (newok) {
    if (val1 == val2) {
        log "info": "%d == %d", val1, val2;
        newok = ok;
    } else {
        log "info": "%d != %d", val1, val2;
        newok = false;
    }
}

typedef struct {
    uint16 u16;
} u16_s;

data uint16 d;

method test -> (bool ok) {
    local uint32 x = 0xff345678;
    local uint1 u1;
    local uint2 u2;
    local uint8 u8;
    local uint16 u16;
    local uint32 u32;
    local uint32 ua32[1];
    local int1 s1;
    local int2 s2;
    local int4 s4;
    local int8 s8;
    local int32 s32;
    local u16_s s;

    ok = true;

    // This is how it works in DML 1.2, not really how it should work

    s2 = 3;
    inline $scompare(s2, 3, ok) -> (ok);
    //inline $scompare(s2, -1, ok) -> (ok);

    s8 = 255;
    inline $scompare(s8, -1, ok) -> (ok);

    u1 = x[0];
    inline $ucompare(u1, 0, ok) -> (ok);

    u1 = x[3];
    inline $ucompare(u1, 1, ok) -> (ok);

    s1 = x[0];
    inline $scompare(s1, 0, ok) -> (ok);

    s1 = x[3];
    inline $scompare(s1, 1, ok) -> (ok);
    //inline $scompare(s1, -1, ok) -> (ok);

    s4 = x[6:3];
    inline $scompare(s4, 15, ok) -> (ok);
    //inline $scompare(s4, -1, ok) -> (ok);

    s4 = x[5:2];
    inline $scompare(s4, 14, ok) -> (ok);
    //inline $scompare(s4, -2, ok) -> (ok);

    s8 = x[31:24];
    inline $scompare(s8, -1, ok) -> (ok);

    u32 = 0x12345678;

    u16 = u32[15:4];
    inline $ucompare(u16, 0x567, ok) -> (ok);

    u16 = u32[15:4, le];
    inline $ucompare(u16, 0x567, ok) -> (ok);

    u16 = u32[4:15, be];
    inline $ucompare(u16, 0x234, ok) -> (ok);

    u16 = cast(u32, uint16)[4:15, be];
    inline $ucompare(u16, 0x678, ok) -> (ok);

    u16 = cast(u32, uint64)[32:43, be];
    inline $ucompare(u16, 0x123, ok) -> (ok);

    ua32[0] = 0x12345678;
    u8 = ua32[0][7:0];
    inline $ucompare(u8, 0x78, ok) -> (ok);

    s.u16 = 0;
    s.u16[15:8] = 0x12;
    s.u16[7:0] = 0x34;
    inline $ucompare(s.u16, 0x1234, ok) -> (ok);

    u8 = s.u16[15:8];
    inline $ucompare(u8, 0x12, ok) -> (ok);

    local bitfields 32 { uint32 reserved @ [31:0]; } bf = 0x12345678;
    u8 = bf[31:24];
    inline $ucompare(u8, 0x12, ok) -> (ok);

    $d[4:4] = 1;
    ok = ok && ($d[4:4] == 1);

    $d[5] = 1;
    ok = ok && ($d[4] == 1);
}
