/*
  Â© 2021-2022 Intel Corporation
  SPDX-License-Identifier: MPL-2.0
*/
dml 1.2;
device test;

bank b1 {
    /// ERROR EREGOL
    register a size 4 @ 8;
    register b size 4 @ 10;
}

bank b2 {
    /// ERROR EREGOL
    register a[4] size 4 @ 8 + 8 * $i;
    register b[2] size 4 @ 12 + 4 * $i;
}

// bug 7858
bank b3 {
    group channel [chno in 0..4] {
        /// ERROR EREGOL
        register r0 size 4 @ 0x00;
    }
}

bank b4 {
    /// ERROR EREGOL
    register a size 1 @ undefined { parameter regnum = 13; }
    register b size 1 @ undefined { parameter regnum = 13; }
}

bank b5 {
    /// ERROR EREGOL
    register a[3] size 1 @ undefined { parameter regnum = ($i & 1); }
}

// bug 19713
bank b6 {
   register A size 4 @ 0x148;
   register B size 4 @ 0x14c;
   register C size 4 @ 0x150;
   register D size 4 @ 0x160;

   /// ERROR EREGOL
   register CONFLICT0 size 2 @ 0x0;
   // Ideally, this line should also get an error. It doesn't, because the
   // addition of G is entirely inhibited by the first error.
   register CONFLICT200 size 4 @ 0x200;

   /// ERROR EREGOL
   group G[i in 0..1] { register X size 4 @ $i*0x200; }
}
