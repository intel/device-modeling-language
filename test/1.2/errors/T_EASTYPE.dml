/*
  Â© 2021 Intel Corporation
  SPDX-License-Identifier: MPL-2.0
*/
dml 1.2;
device test;

/// WARNING WEXPERIMENTAL
trait tr {
    parameter int p;
    template {
        /// ERROR EASTYPE
        parameter p = "string";
    }
}
// unfortunately, error is only triggered upon trait instantiation
port p is (tr);

method foo(int x) { }

extern z;

typedef bitfields 24 {
    uint24 a @ [23:0];
} bitfield_24_1_field;

typedef bitfields 24 {
    uint16 a @ [23:8];
    uint8 b @ [7:0];
} bitfield_24_2_field;

typedef bitfields 32 {
    uint24 a @ [23:0];
} bitfield_32;

// for now, this is how we get a pointer to an endian bitfield
typedef layout "big-endian" {
    bitfield_24_1_field f24_1;
    bitfield_24_2_field f24_2;
    bitfield_32 f32;
} le_t;

extern void extern_fun(void);

typedef int32 int_alias1;
typedef int32 int_alias2;

method init() {
    local int x;
    /// ERROR EASTYPE
    x = true;
    /// ERROR EASTYPE
    x = "tjo";
    local const int *xp;
    /// ERROR EASTYPE
    xp = "tjo";
    local bool b;
    /// ERROR EASTYPE
    xp = &b;
    /// ERROR EASTYPE
    local int y = true;
    /// ERROR EASTYPE
    x = $foo;
    /// ERROR EASTYPE
    z = 17;
    /// ERROR EASTYPE
    local bitfields 8 {} bf = 0.3;

    // No error: two typedefs that refer to the same type
    local int_alias1 *iap = NULL;
    local int_alias2 *iap2 = iap;

    local bitfield_24_1_field *f24_1_p;
    local bitfield_24_2_field *f24_2_p;
    local bitfield_32 *f32_p;
    local uint32 *i32_p;

    local le_t l;
    local typeof(l.f24_1) *ef24_1_p;
    local typeof(l.f24_2) *ef24_2_p;
    local typeof(l.f32) *ef32_p;
    local int24_be_t *ei24_p;

    // We can freely assign pointers regardless of members
    f24_1_p = f24_2_p;
    f24_2_p = f24_1_p;
    i32_p = f32_p;
    f32_p = i32_p;

    ef24_1_p = ef24_2_p;
    ef24_2_p = ef24_1_p;
    ei24_p = ef24_1_p;
    ef24_1_p = ei24_p;

    // but not regardless of bitsize
    /// ERROR EASTYPE
    f32_p = f24_2_p;
    /// ERROR EASTYPE
    f24_1_p = f32_p;
    /// ERROR EASTYPE
    i32_p = f24_1_p;
    /// ERROR EASTYPE
    f24_1_p = i32_p;

    /// ERROR EASTYPE
    ef32_p = ef24_2_p;
    /// ERROR EASTYPE
    ef24_1_p = ef32_p;
    /// ERROR EASTYPE
    ei24_p = ef32_p;
    /// ERROR EASTYPE
    ef32_p = ei24_p;

    // and not regardless of endianness property
    /// ERROR EASTYPE
    ef24_1_p = f24_1_p;
    /// ERROR EASTYPE
    f24_1_p = ef24_1_p;

    local void (*fn1)(int) = NULL;
    fn1 = fn1;
    /// ERROR EASTYPE
    local int (*fn2)(void) = fn1;
    /// ERROR EASTYPE
    local void (*fn3)(int, int) = fn1;
    /// ERROR EASTYPE
    local void (*fn4)(char) = fn1;
    /// ERROR EASTYPE
    local void (*fn5)(int, ...) = fn1;
    /// ERROR EASTYPE
    *fn1 = *fn1;

    local void (*fp)(void);
    fp = extern_fun;
    /// ERROR EASTYPE
    *fp = extern_fun;
    /// ERROR EASTYPE
    extern_fun = fp;
    /// ERROR EASTYPE
    extern_fun = *fp;
}
