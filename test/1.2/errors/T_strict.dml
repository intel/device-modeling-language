/*
  Â© 2021 Intel Corporation
  SPDX-License-Identifier: MPL-2.0
*/
dml 1.2;
provisional simics_util_vect;

/* <add id="dml changes strict"/> */

device test;

// This test checks that new errors appear when compiling with --strict-dml12.
// We also need that these errors don't appear _without_ --strict-dml12. This
// can be verified manually by running with the following DMLC-FLAG line
// removed; this should give a compile with simics status 0.
/// DMLC-FLAG --strict-dml12
// We don't test this automatically here, since we assume that this is covered
// by other tests.

typedef uint32 t;

typedef struct {
    void (*f)(conf_object_t *obj);
} i_interface_t;

/*
  <append id="dml changes strict">
  <li>In classic DML 1.2, an unused template is allowed to instantiate
  a non-existing template. This is not permitted in DML 1.4.
  </li>
  </append>
*/
template unused {
    /// ERROR ENTMPL
    is nonexisting;
}

bank b {
    register r size 4 @ 0;
}

/*
  <append id="dml changes strict">
  <li>In DML 1.4, <tt>$</tt> is no longer used
  for object references, and top-level object scope is therefore merged
  with the global scope. This means that you cannot both declare a bank X
  (referenced as $X in 1.2, as X in 1.4) and a global constant X (referenced
  as X in both 1.2 and 1.4).
  </li>
  </append>
*/
/// ERROR ENAMECOLL
constant aa = 4;
/// ERROR ENAMECOLL
data int aa;

method m(int i) {
    /*
    <append id="dml changes strict">
    <li>When inlining a method with a constant value as an argument,
    the argument will no longer be considered constant in the method body
    if the argument was declared with a type. In classic DML 1.2, a constant
    is always inlined as a constant, whose type might not match with the
    declared type.
    </li>
    </append>
    */
    if (i != 3) {
        /// ERROR EERRSTMT
        error;
    }
}

/*
  <append id="dml changes strict">
  <li>Anonymous banks (syntax: <tt>bank { ... }</tt>) are no longer
    allowed.</li>
    </append>
*/
/// ERROR ESYNTAX
bank {}

method stringlit(char *s) {
}

/*
  <append id="dml changes strict">

  <li>DML 1.2 permitted certain C keywords, e.g. <tt>signed</tt> and
  <tt>register</tt>, to be used as names of local variables. This is no longer
  permitted.
  </li> </append>
*/
/// ERROR ESYNTAX
method m2(int signed) {
    signed = 3;
}

implement i;

typedef void (*f_t)(conf_object_t *);
method init() {
    /*
    <append id="dml changes strict">
    <li>
    Integer arithmetic works differently in DML 1.4. In short, all operands to
    arithmetic operands are promoted to 64 bits before performing the
    operation, much like 16- and 8-bit operands are promoted to 32 bits in C.

    Also, many semantic irregularities and bugs in 1.2 semantics have been
    corrected in 1.4.
    </li> </append>
    */
    if (-0x8000_0000_0000_0000 == 0x8000_0000_0000_0000) {
        /// ERROR EERRSTMT
        error;
    }
    /// ERROR ESYNTAX
    local int signed;
    /*
    <append id="dml changes strict">
    <li>It is no longer permitted to use a register or field object as operand
    to the <tt>!</tt> operator. In classic DML 1.2, there was a loophole that
    permitted this.
    </li>
    </append>
    */
    /// ERROR ENBOOL
    !$b.r;
    /*
    <append id="dml changes strict">
    <li>In DML 1.2, you can reference a method in an <tt>interface</tt> object
    by casting it to a function pointer type. That is no longer permitted
    in DML 1.4. </li>
    </append>
    */
    /// ERROR EIFREF
    cast($c.i.f, f_t);
    /*
    <append id="dml changes strict">
    <li>The <tt>goto</tt> statement has been removed from DML 1.3. We
    plan to re-introduce a restricted variant of the goto statement
    which is only allowed to jump forward, and to an enclosing scope.
    </li>
    </append>
    */
    /// ERROR ESYNTAX
    goto label;
    label:;
    /*
    <append id="dml changes strict">
    <li>It is no longer allowed to iterate over the undocumented <tt>vect</tt>
    type in a <tt>select</tt> statement. In classic DML 1.2, this was
    permitted but had unexpected behaviour.
    </li>
    </append>
    */
    local int vect v;
    local int i;
    /// ERROR ENLST
    select i in (v) where (true) {} else {}
    inline $m(3);
    call $m2(2);
    /*
    <append id="dml changes strict">
    <li>If a method argument has type <tt>const char *</tt>, it is no
    longer permitted to pass a string literal.
    </li>
    </append>
    */
    /// ERROR ECONSTP
    call $stringlit("foo");

    /*
    <append id="dml changes strict">
    <li>The <tt>!</tt> operator is stricter in 1.3; in particular, it no longer
    accepts a constant integer as operand. Other condition expressions, like
    the <tt>if</tt> condition or <tt>&amp;&amp;</tt> operands, no
    longer accept the 0 or 1 literal; use <tt>false</tt> or <tt>true</tt>
    instead.
    </li> </append>
     */
    /// ERROR ENBOOL
    !1;
    /// ERROR ENBOOL
    if (0) {}
    /*
    <append id="dml changes strict">
    <li>In DML 1.4, the <tt>sizeof</tt> and <tt>typeof</tt> operators
    require that the operand is an lvalue.</li>
    </append>
    */
    /// ERROR ERVAL
    sizeof(0);
    /// ERROR ERVAL
    local typeof(5[1:0]) i;

    /*
    <append id="dml changes strict">
    <li>A reference to an <tt>implement</tt> object can no longer be used as
    a value.
    </li></append>
    */
    /// ERROR ENVAL
    local i_interface_t i_iface = $i;
}

/*
  <append id="dml changes strict">
  <li>In classic DML 1.2, one could write <tt>extern X;</tt> to declare that
  some symbol X is externally defined as a C symbol, without providing a hint
  on the type of X. This is not permitted in DML 1.4.
  </li></append>
*/
/// ERROR EEXTERN
extern foo;

connect c {
    /*
    <append id="dml changes strict">
    <li>The undocumented <tt>c_name</tt> parameter no longer has an effect
    on <tt>interface</tt> objects. This may affect old C + DML integrations.
    </li>
    </append>
    */
    interface i {
        /// WARNING WDEPRECATED
        parameter c_name = "foo-bar";
    }
}

// gives warning even without --strict-dml12; tested by T_WDEPRECATED.dml
/*<append id="dml changes strict">
  <li>A method's input parameters now belong to the method's top
  scope, instead of a separate scope. Thus, it is illegal to declare a
  variable in method's top scope which shadows a method
  parameter. </li></append>
*/
/* Not covered by a test
  <append id="dml changes strict">
  <li> In classic DML 1.2, the <tt>loggroup X;</tt> statement would expose the
  log group as an identifier <tt>X</tt> in generated C code. This is no longer
  done, which may affect old C + DML integrations.
  </li></append>
*/
