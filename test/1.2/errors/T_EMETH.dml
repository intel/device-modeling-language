/*
  Â© 2021-2022 Intel Corporation
  SPDX-License-Identifier: MPL-2.0
*/
dml 1.2;

device d;

import "simics/devs/interrupt.dml";

implement simple_interrupt {
    /// ERROR EMETH
    method interrupt() {}
    method interrupt_clear(int i) {}
}


method inp() -> () default {
}

/// ERROR EMETH
method inp(int x) -> () {
}

method outp() -> () default {
}

/// ERROR EMETH
method outp() -> (int x) {
}


method throwing() default {
}

// The nothrow annotation must match exactly between default and non-default
// implementations. This is even true if the overriding method is the stricter
// one.

// No error: nothrow may override throws in 1.2 (but not in 1.4)
method throwing() nothrow {
}

method int_arg(int i) default {}
// error only in 1.4
method int_arg(char i) {}
method int_return() -> (int x) default { }
// error only in 1.4
method int_return() -> (char x) { }

/// WARNING WEXPERIMENTAL
trait t {
    method inp(int x) default {}
    method outp() -> (int x) default {}
    method throwing() throws default {}
}
port p_inp {
    is t;
    /// ERROR EMETH
    method inp() nothrow {}
}
port p_outp {
    is t;
    /// ERROR EMETH
    method outp() nothrow {}
}
port p_throwing {
    is t;
    /// ERROR EMETH
    method throwing() nothrow {}
}

port p_inp2 {
    is t;
    /// ERROR EMETH
    method inp(int *x) nothrow {}
}

port p_outp2 {
    is t;
    /// ERROR EMETH
    method outp() -> (bool x) nothrow {}
}

port p_inp3 {
    is t;
    /// ERROR EMETH
    method inp(x) nothrow {}
}

template t2 is t {
    method inp(int x) nothrow default {}
    method non_shared(int x) nothrow default {}
}

/// WARNING WEXPERIMENTAL
port p_inp4 is t2 {
    /// ERROR EMETH
    method inp(x) nothrow {}
    // no error: non-matching 'inline' is OK in 1.2 if we don't override a
    // shared method
    method non_shared(x) nothrow {}
}

port p_outp3 {
    is t;
    /// ERROR EMETH
    method outp() -> (x) nothrow {}
}

/// WARNING WEXPERIMENTAL
trait t_inp {
    is t;
    /// ERROR EMETH
    method inp(char *x) default {}
}

/// WARNING WEXPERIMENTAL
trait t_outp {
    is t;
    /// ERROR EMETH
    method outp() -> (char *x) default {}
}

/// WARNING WEXPERIMENTAL
trait t_throwing {
    is t;
    /// ERROR EMETH
    method throwing() default {}
}

attribute bad {
    parameter configuration = "pseudo";
    parameter type = "n";
    method get() -> (attr_value_t x) {}
    // used to cause an ICE
    /// ERROR EMETH
    method set() {}
}
