/*
  Â© 2021-2022 Intel Corporation
  SPDX-License-Identifier: MPL-2.0
*/
dml 1.2;
device test;

attribute first_attr[2] {
    parameter allocate_type = "int32";
    parameter documentation = "xyz";
    parameter desc = "abc";
}
attribute second_attr[2] {
    parameter allocate_type = "int32";
    // bug 11356
    parameter documentation = $first_attr[$i].documentation;
    parameter desc = $first_attr[$i].desc;
}

bank b[j in 0..1] {
    register r1[2] size 4 @ undefined {
        // many errors are blamed on 'parameter allocate=$reg.allocate'
        // in the implicit field
        /// ERROR EIDXVAR
        parameter allocate = ($i == 1 ? true : false);
        parameter configuration = "none";
    }
    register r2[2] size 4 @ undefined {
        // Bug 17734
        /// ERROR EIDXVAR
        parameter internal = $i == 0;
    }
    register r3[2] size 4 @ undefined {
        // Bug 9467
        /// ERROR EIDXVAR
        parameter documentation = $i == 0 ? "zero" : "non-zero";
    }
    // Field range cannot depend on register index
    register r4[2] size 4 @ undefined {
        field f[k in 0..1]
            /// ERROR EIDXVAR
            @ [$i + $k];
    }

    // Bug 21478, used to crash when --info is used
    register r6[2] size 1 @ $i {
        parameter documentation = "long";
        /// ERROR EIDXVAR
        parameter desc = $i == 0 ? "a": "b";
    }

    register r7[2] size 1 @ undefined {
        field f1[0] {
            /// ERROR EIDXVAR
            parameter _confidentiality = $i;
        }
        field f2[1];
    }

    register r8 size 1 {
        /// ERROR EIDXVAR
        parameter offset = $j + 10;
    }

    register r9 size 1 @ undefined {
        /// ERROR EIDXVAR
        parameter regnum = $j;
        /// ERROR EIDXVAR
        parameter internal = $j == 0;
    }

    register r10 size 1 {
        /// ERROR EIDXVAR
        parameter offset = $j + 11 - $j;
    }

    /// ERROR EIDXVAR
    group g[i in 0..$j];
    /// ERROR EIDXVAR
    data int da[$j];
    /// ERROR EIDXVAR
    method m1(int x[$j]) {}
    /// ERROR EIDXVAR
    method m2() -> (int x[$j]) {}
    /// ERROR EIDXVAR
    if ($j == 0) {
    }

    register r11[2] size 1 @ undefined { parameter documentation = "x"; }
    register r12 size 1 @ undefined {
        // no error! expression is evaluated with static index $j, but that's OK
        // since we never reference $j.
        parameter documentation = $r11[0].documentation;
    }
    register r13 size 1 @ undefined {
        // no error! static index used as index into object array, but that is
        // allowed here since r11[0].documentation does not reference the bank
        // index
        parameter documentation = $b[$j].r11[0].documentation;
    }
    register r14 size 1 @ undefined {
        // Incomplete reference to an object: implicit reference to $j.
        // A complete reference would have given a less informative ENCONST
        // instead
        /// ERROR EIDXVAR
        parameter documentation = $r11[0] == 0 ? "a" : "b";
    }
    register r16 size 1 @ undefined {
        // No error: subobjects of incomplete references can be looked up,
        // as long as those subobjects don't reference the missing index
        // variable
        parameter documentation = $r11[0].size ? "a" : "b";
    }
    // Same error as in r14, but unlike r14, this case is also applicable in
    // DML 1.4
    data int d;
    register r15 size 1 @ undefined {
        /// ERROR EIDXVAR
        parameter documentation = $d == 0 ? "a" : "b";
    }
}

// evclass implicitly references index variables
event ea[2] {
    parameter timebase = "cycles";
    /// ERROR EIDXVAR
    if (defined($evclass)) {}
}
event e {
    parameter timebase = "cycles";
    // no error
    if (defined($evclass)) {}
}
