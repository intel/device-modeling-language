/*
  Â© 2021-2022 Intel Corporation
  SPDX-License-Identifier: MPL-2.0
*/
dml 1.2;
device test;
import "testing.dml";

bank b {
    register r0 size 4 @ 0
    {
        field f[0] {
            /// WARNING WUNUSEDDEFAULT
            method after_write() {}
            /// WARNING WUNUSEDDEFAULT
            method before_write() {}
            /// WARNING WUNUSEDDEFAULT
            method after_read() {}
            /// WARNING WUNUSEDDEFAULT
            method before_read() {}
            /// WARNING WUNUSEDDEFAULT
            method after_set() {}
            /// WARNING WUNUSEDDEFAULT
            method before_set() {}
            /// WARNING WUNUSEDDEFAULT
            method after_get() {}
            /// WARNING WUNUSEDDEFAULT
            method before_get() {}
            /// WARNING WUNUSEDDEFAULT
            method after_hard_reset() {}
            /// WARNING WUNUSEDDEFAULT
            method after_soft_reset() {}
        }
        /// WARNING WUNUSEDDEFAULT
        method read() -> (uint32 value) {}
        /// WARNING WUNUSEDDEFAULT
        method write(uint32 value) {}
    }

    // No warnings here, because all methods are referenced
    register r size 4 @ 4
    {
        field f[0] {
            // referenced by call
            method after_write() {}
            method before_write() {}
            method after_read() {}
            method before_read() {}
            method after_set() {}
            method before_set() {}
            method after_get() {}
            method before_get() {}
            // referenced by inline
            method after_hard_reset() {}
            // referenced by extern
            method extern after_soft_reset() {}
        }
        // referenced by call
        method read() -> (uint32 value) {}
        method write(uint32 value) {}
    }
}

method init() {
    // Warning still happens if the method's body isn't actually expanded
    // somewhere. Not sure if this is the right thing to do; it did however
    // simplify implementation a bit
    local typeof $b.r0.write *i;

    call $b.r.f.before_read();
    call $b.r.f.after_read();
    call $b.r.f.before_write();
    call $b.r.f.after_write();
    call $b.r.f.before_get();
    call $b.r.f.after_get();
    call $b.r.f.before_set();
    call $b.r.f.after_set();
    inline $b.r.f.after_hard_reset();
    local uint32 val;
    call $b.r.read() -> (val);
    call $b.r.write(0);
}
