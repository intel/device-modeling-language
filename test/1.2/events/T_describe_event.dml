/*
  Â© 2021-2022 Intel Corporation
  SPDX-License-Identifier: MPL-2.0
*/
dml 1.2;
device test;

event ev_desc {
    parameter desc = "from desc param";
    parameter timebase = "cycles";
}

event ev_no_desc {
    parameter timebase = "cycles";
}

event ev_custom {
    parameter timebase = "cycles";

    method describe_event(void *data) -> (char *desc) {
        desc = MM_STRDUP(cast(data, const char *));
    }
}

group ev_array[i in 0..1][j in 0..1] {
    event ev {
        parameter timebase = "cycles";
        method describe_event(void *data) -> (char *desc) {
            desc = MM_STRDUP(cast(data, const char *));
        }
    }
}

event eva[i in 0..1][j in 0..1] {
    parameter timebase = "cycles";
    method describe_event(void *data) -> (char *desc) {
       desc = MM_STRDUP(cast(data, const char *));
    }
}


attribute post_all {
    parameter configuration = "pseudo";
    parameter type = "n";
    method set(attr_value_t val) {
        inline $ev_desc.post(1, NULL);
        inline $ev_no_desc.post(2, NULL);
        inline $ev_custom.post(3, MM_STRDUP("blurp"));
        inline $ev_array[0][0].ev.post(4, MM_STRDUP("ev_array[0][0]"));
        inline $ev_array[0][1].ev.post(5, MM_STRDUP("ev_array[0][1]"));
        inline $ev_array[0][1].ev.post(6, MM_STRDUP("ev_array[1][0]"));
        inline $ev_array[1][1].ev.post(7, MM_STRDUP("ev_array[1][1]"));
        inline $eva[0][0].post(8, MM_STRDUP("eva[0][0]"));
        inline $eva[0][1].post(9, MM_STRDUP("eva[0][1]"));
        inline $eva[1][0].post(10, MM_STRDUP("eva[1][0]"));
        inline $eva[1][1].post(11, MM_STRDUP("eva[1][1]"));
    }
}
