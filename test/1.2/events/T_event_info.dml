/*
  Â© 2021-2022 Intel Corporation
  SPDX-License-Identifier: MPL-2.0
*/
dml 1.2;
device test;

// In real devices, we require that set_event_info and get_event_info are
// inverses. In this test we break that invariant to make testing easier.

template evattr {
    parameter allocate_type = "uint32";

    event e {
        parameter timebase = "cycles";

        method set_event_info(attr_value_t info) -> (void *data) {
            local int i = SIM_attr_integer(info);
            log "info": "%s data set to %d (adding 3 to that)", $qname, i;
            data = cast(cast(i + 3, uintptr_t), void *);
        }

        method get_event_info(void *data) -> (attr_value_t info) {
            local int i = cast(data, uintptr_t);
            log "info": "data %d converted to attribute (adding 20 to that)", i;
            info = SIM_make_attr_int64(i + 20);
        }

        method event(void *data) {
            local int i = cast(data, uintptr_t);
            log "info": "%s data %d converted to attribute (adding 20 to that)", $qname, i;
            $e.parent = i;
        }
    }

    method val() -> (int val) {
        val = $this;
    }
}

attribute a {
    is evattr;
}

attribute b[i in 0..1][j in 0..1] {
    is evattr;
}

attribute post_all {
    parameter configuration = "pseudo";
    parameter type = "i";
    method set(attr_value_t val) {
        local int i = SIM_attr_integer(val);
        log "info": "Posting event with data %d", i;
        inline $a.e.post(1, cast(cast(i, uintptr_t), void *));
        inline $b[1][1].e.post(1, cast(cast(i, uintptr_t), void *));
    }
}
