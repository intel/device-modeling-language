/*
  Â© 2021-2022 Intel Corporation
  SPDX-License-Identifier: MPL-2.0
*/
dml 1.2;
device test;
import "testing.dml";
import "io-memory.dml";
bank b {
    register r size 4 @ 0x100000000 {
        parameter hard_reset_value = 0xdeadbeef;
    }
}

bank neg {
    // bug 24549: negative offsets are equivalent to very large offsets
    /// WARNING WNEGOFFS
    register n size 4 @ -4 { parameter hard_reset_value = 0x34343434; }
    register z size 4 @ 0 { parameter hard_reset_value = 0x12121212; }
}

// Obsoleted by lib/T_registers in 1.4

method test -> (bool result) {
    local generic_transaction_t memop; // this isn't actually used
    local uint64 val;
    call $b.read_access(&memop, 0x100000000, 4) -> (result, val);
    if (val != 0xdeadbeef)
        result = false;
    call $neg.read_access(&memop, 0, 4) -> (result, val);
    if (val != 0x12121212)
        result = false;
    call $neg.read_access(&memop, -4, 4) -> (result, val);
    if (val != 0x34343434)
        result = false;
}
