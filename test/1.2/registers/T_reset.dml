/*
  Â© 2021-2022 Intel Corporation
  SPDX-License-Identifier: MPL-2.0
*/
dml 1.2;
device test;
import "testing.dml";

bank hard {
    parameter register_size = 4;

    register r1 @ undefined {
        parameter hard_reset_value = 1;
    }

    register r2 @ undefined {
        method hard_reset {
            $this = 2;
        }
    }

    register r3 @ undefined {
        parameter hard_reset_value = 3;
        method hard_reset {
            // This takes precedence
            $this = 4;
        }
    }

    register r4 @ undefined {
        parameter hard_reset_value = 5;
        field f1[31:0];
    }

    register r5 @ undefined {
        field f1[31:0] {
            parameter hard_reset_value = 6;
        }
    }

    register r6 @ undefined {
        parameter hard_reset_value = 7;
        field f1[31:0] {
            parameter hard_reset_value = 8;
        }
    }

    register r7 @ undefined {
        field f1[31:0];
        method hard_reset {
            $f1 = 9;
        }
    }

    register r8 @ undefined {
        field f1[31:0] {
            parameter hard_reset_value = 10;
        }
        method hard_reset {
            $f1 = 11;
        }
    }

    register r9 @ undefined {
        field f1[31:0] {
            method hard_reset {
                $this = 12;
            }
        }
        method hard_reset {
            $f1 = 13;
        }
    }

    register r10 @ undefined {
        parameter hard_reset_value = 0x11112222;
        field f1[31:16];
        field f2[15:0];
    }
}

method init() {
    // overwritten by automatic hard_reset, see bug 19790
    $hard.r1 = 14;
}

bank soft {
    parameter register_size = 4;

    register r1 @ undefined {
        parameter hard_reset_value = 1;
    }

    register r2 @ undefined {
        parameter soft_reset_value = 2;
    }

    register r3 @ undefined {
        parameter hard_reset_value = 3;
        parameter soft_reset_value = 4;
    }

    register r4 @ undefined {
        method soft_reset {
            $this = 5;
        }
    }

    register r5 @ undefined {
        parameter soft_reset_value = 6;
        method soft_reset {
            // This takes precedence
            $this = 7;
        }
    }

    register r6 @ undefined {
        parameter soft_reset_value = 8;
        field f1[31:0];
    }

    register r7 @ undefined {
        parameter hard_reset_value = 9;
        field f1[31:0];
    }

    register r8 @ undefined {
        field f1[31:0] {
            parameter soft_reset_value = 10;
        }
    }

    register r9 @ undefined {
        field f1[31:0] {
            parameter hard_reset_value = 11;
        }
    }

    register r10 @ undefined {
        field f1[31:0] {
            parameter hard_reset_value = 12;
            parameter soft_reset_value = 13;
        }
    }

    register r11 @ undefined {
            parameter hard_reset_value = 14;
            parameter soft_reset_value = 15;
        field f1[31:0] {
            parameter soft_reset_value = 16;
        }
    }

    register r12 @ undefined {
            parameter hard_reset_value = 17;
            parameter soft_reset_value = 18;
        field f1[31:0] {
            parameter hard_reset_value = 19;
        }
    }

    register r13 @ undefined {
        field f1[31:0];
        method soft_reset {
            $f1 = 20;
        }
    }

    register r14 @ undefined {
        field f1[31:0] {
            parameter soft_reset_value = 21;
        }
        method soft_reset {
            $f1 = 22;
        }
    }

    register r15 @ undefined {
        field f1[31:0] {
            method soft_reset {
                $this = 23;
            }
        }
        method soft_reset {
            $f1 = 24;
        }
    }

    register r16 @ undefined {
        parameter soft_reset_value = 0x11112222;
        field f1[31:16];
        field f2[15:0];
    }
}

method test_hard_reset -> (bool ok) {
    ok = true;

    log "info": "hard.r1 = %u", $hard.r1;
    if ($hard.r1 != 1) ok = false;

    log "info": "hard.r2 = %u", $hard.r2;
    if ($hard.r2 != 2) ok = false;

    log "info": "hard.r3 = %u", $hard.r3;
    if ($hard.r3 != 4) ok = false;

    log "info": "hard.r4.f1 = %u", $hard.r4.f1;
    if ($hard.r4.f1 != 5) ok = false;

    log "info": "hard.r5.f1 = %u", $hard.r5.f1;
    if ($hard.r5.f1 != 6) ok = false;

    log "info": "hard.r6.f1 = %u", $hard.r6.f1;
    if ($hard.r6.f1 != 8) ok = false;

    log "info": "hard.r7.f1 = %u", $hard.r7.f1;
    if ($hard.r7.f1 != 9) ok = false;

    log "info": "hard.r8.f1 = %u", $hard.r8.f1;
    if ($hard.r8.f1 != 11) ok = false;

    log "info": "hard.r9.f1 = %u", $hard.r9.f1;
    if ($hard.r9.f1 != 13) ok = false;

    log "info": "hard.r10.f1 = %#x", $hard.r10.f1;
    log "info": "hard.r10.f2 = %#x", $hard.r10.f2;
    if ($hard.r10.f1 != 0x1111) ok = false;
    if ($hard.r10.f2 != 0x2222) ok = false;
}

method test_soft_reset -> (bool ok) {
    ok = true;

    call $soft_reset;

    log "info": "soft.r1 = %u", $soft.r1;
    if ($soft.r1 != 1) ok = false;

    log "info": "soft.r2 = %u", $soft.r2;
    if ($soft.r2 != 2) ok = false;

    log "info": "soft.r3 = %u", $soft.r3;
    if ($soft.r3 != 4) ok = false;

    log "info": "soft.r4 = %u", $soft.r4;
    if ($soft.r4 != 5) ok = false;

    log "info": "soft.r5 = %u", $soft.r5;
    if ($soft.r5 != 7) ok = false;

    log "info": "soft.r6.f1 = %u", $soft.r6.f1;
    if ($soft.r6.f1 != 8) ok = false;

    log "info": "soft.r7.f1 = %u", $soft.r7.f1;
    if ($soft.r7.f1 != 9) ok = false;

    log "info": "soft.r8.f1 = %u", $soft.r8.f1;
    if ($soft.r8.f1 != 10) ok = false;

    log "info": "soft.r9.f1 = %u", $soft.r9.f1;
    if ($soft.r9.f1 != 11) ok = false;

    log "info": "soft.r10.f1 = %u", $soft.r10.f1;
    if ($soft.r10.f1 != 13) ok = false;

    log "info": "soft.r11.f1 = %u", $soft.r11.f1;
    if ($soft.r11.f1 != 16) ok = false;

    log "info": "soft.r12.f1 = %u", $soft.r12.f1;
    if ($soft.r12.f1 != 19) ok = false;

    log "info": "soft.r13.f1 = %u", $soft.r13.f1;
    if ($soft.r13.f1 != 20) ok = false;

    log "info": "soft.r14.f1 = %u", $soft.r14.f1;
    if ($soft.r14.f1 != 22) ok = false;

    log "info": "soft.r15.f1 = %u", $soft.r15.f1;
    if ($soft.r15.f1 != 24) ok = false;

    log "info": "soft.r16.f1 = %#x", $soft.r16.f1;
    log "info": "soft.r16.f2 = %#x", $soft.r16.f2;
    if ($soft.r16.f1 != 0x1111) ok = false;
    if ($soft.r16.f2 != 0x2222) ok = false;
}

method test -> (bool ok) {
    local bool subok;

    ok = true;

    call $test_hard_reset -> (subok);
    if (!subok) {
        log "error": "hard_reset failed";
        ok = false;
    }

    call $test_soft_reset -> (subok);
    if (!subok) {
        log "error": "soft_reset failed";
        ok = false;
    }
}
