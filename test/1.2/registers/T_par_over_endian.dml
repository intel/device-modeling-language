/*
  Â© 2021-2022 Intel Corporation
  SPDX-License-Identifier: MPL-2.0
*/
dml 1.2;

device test;

template testfield {
    // These register fields simply return for each byte the lowest
    // byte in the offset
    parameter allocate = false;

    method read -> (value) {
        call $calculate_value -> (value);
        log "info": "Read from field %s => %#x", $qname, value;
    }

    method write(value) {
        local uint64 facit;
        log "info": "Write to field %s <= %#x", $qname, value;
        call $calculate_value -> (facit);
        if (value != facit) {
            log "error": "Illegal value: %#x != %#x", value, facit;
            throw;
        }
    }

    method get -> (value) {
        call $calculate_value -> (value);
    }

    method set(value) {
        // not used
    }

    method calculate_value -> (uint64 value) {
        local int i;
        value = 0;
        for (i = 0; i < $bitsize/8; i++) {
            local uint8 offs;
            //if ($reg.byte_order == "little-endian")
                offs = ($reg.offset + $lsb/8 + i)[7:0];
            //else if ($reg.byte_order == "big-endian")
            //    offs = ($reg.offset + ($lsb+$bitsize-1)/8 - i)[7:0];
            //else
            //    error;
            value[i*8 + 7:i*8] = offs;
        }
    }
}

template testreg {
    field f[$reg.bitsize-1:0] is (testfield);
}

template regs {
    parameter register_size = 4;

    // Basic register layout for testing overlapping and partial
    // accesses

    register r1 @0x000  {
        field f1[7:0] is (testfield);
        field f2[15:8] is (testfield);
        field f3[23:16] is (testfield);
        field f4[31:24] is (testfield);
    }
    register r2 @0x004  {
        field f1[7:0] is (testfield);
        field f2[15:8] is (testfield);
        field f3[23:16] is (testfield);
        field f4[31:24] is (testfield);
    }
    register r3 @0x008  {
        field f1[7:0] is (testfield);
        field f2[15:8] is (testfield);
        field f3[23:16] is (testfield);
        field f4[31:24] is (testfield);
    }

    // Registers of different sizes
    register s1 size 1 @ 0x1000000 is (testreg);
    register s2 size 2 @ 0x2000000 is (testreg);
    register s3 size 3 @ 0x3000000 is (testreg);
    register s4 size 4 @ 0x4000000 is (testreg);
    register s5 size 5 @ 0x5000000 is (testreg);
    register s6 size 6 @ 0x6000000 is (testreg);
    register s7 size 7 @ 0x7000000 is (testreg);
    register s8 size 8 @ 0x8000000 is (testreg);

    // A dense array
    register a1[i in 0..3] @ 0x0100 + $i * 4 is (testreg);

    // A sparse array
    register a2[i in 0..3] @ 0x0200 + $i * 8 is (testreg);

    // Two interleaved arrays
    register a3[i in 0..3] @ 0x0300 + $i * 8 is (testreg);
    register a4[i in 0..3] @ 0x0304 + $i * 8 is (testreg);

    // An array that isn't naturally aligned
    register a5[i in 0..3] @ 0x0408 + $i * 4 is (testreg);

    // interleaved arrays with different strides
    register a6[i in 0..2] size 1 @ 0x0508 - $i * 4 is (testreg);
    register a7[i in 0..3] size 1 @ 0x0501 + $i * 2 is (testreg);
    register x1 size 1 @ 0x0502 is (testreg);
    register x2 size 1 @ 0x0506 is (testreg);
}

bank par_over_le is (regs) {
    parameter partial = true;
    parameter overlapping = true;
    parameter byte_order = "little-endian";
}
bank nonpar_over_le is (regs) {
    parameter partial = false;
    parameter overlapping = true;
    parameter byte_order = "little-endian";
}
bank par_nonover_le is (regs) {
    parameter partial = true;
    parameter overlapping = false;
    parameter byte_order = "little-endian";
}
bank nonpar_nonover_le is (regs) {
    parameter partial = false;
    parameter overlapping = false;
    parameter byte_order = "little-endian";
}
bank par_over_be is (regs) {
    parameter partial = true;
    parameter overlapping = true;
    parameter byte_order = "big-endian";
}
bank nonpar_over_be is (regs) {
    parameter partial = false;
    parameter overlapping = true;
    parameter byte_order = "big-endian";
}
bank par_nonover_be is (regs) {
    parameter partial = true;
    parameter overlapping = false;
    parameter byte_order = "big-endian";
}
bank nonpar_nonover_be is (regs) {
    parameter partial = false;
    parameter overlapping = false;
    parameter byte_order = "big-endian";
}
