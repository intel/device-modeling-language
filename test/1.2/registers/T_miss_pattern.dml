/*
  Â© 2021-2022 Intel Corporation
  SPDX-License-Identifier: MPL-2.0
*/
dml 1.2;
device test;

template r {
    parameter hard_reset_value = ($offset << 8) | ($offset + 1);
}

template b {
    parameter overlapping = true;
    parameter miss_pattern = 0xff;

    // aligned
    register r2 size 2 @ 0x2 is (r);
    register r6 size 2 @ 0x6 is (r);
    register r8 size 2 @ 0x8 is (r);
    register rc size 2 @ 0xc is (r);

    // unaligned
    register r21 size 2 @ 0x21 is (r);
    register r25 size 2 @ 0x25 is (r);

    // similar layout in an array
    group g[2] {
        // 0x12, 0x16, 0x18, 0x1c
        register a[j in 0..1] size 2 @ 0x10 + $i * 8 + (1-$i)*2 + $j *4 is (r);
        // 0x31, 0x35
        register b size 2 @ 0x31 + $i * 4 is (r);
    }
}

bank ob {
    is b;
}

bank pb {
    is b;
    parameter partial = true;
}

bank f {
    register r size 2 @ 2;
    parameter partial = false;
    parameter overlapping = false;
    /// WARNING WEXPERIMENTAL_UNMAPPED
    method _unmapped_read_access(generic_transaction_t *memop,
                                 physical_address_t offset,
                                 physical_address_t size)
        -> (bool success, uint64 readvalue) nothrow {
        readvalue = 0x12345678;
        success = size == 4;
        assert success;
    }
    /// WARNING WEXPERIMENTAL_UNMAPPED
    method _unmapped_write_access(
        generic_transaction_t *memop, physical_address_t offset,
        physical_address_t size, uint64 writevalue) -> (bool success) nothrow {
        $writevalue = writevalue;
        $size = size;
        $offset = offset;
        success = true;
    }
    register offset size 4 @ undefined;
    register size size 4 @ undefined;
    register writevalue size 8 @ undefined;
}

bank t {
    parameter overlapping = true;
    parameter partial = true;
    register r7 size 2 @ 7 { parameter hard_reset_value = 0xcccc; }
    register r14 size 1 @ 14;
    /// WARNING WEXPERIMENTAL_UNMAPPED
    method _unmapped_read_access(generic_transaction_t *memop,
                                 physical_address_t offset,
                                 physical_address_t size)
        -> (bool success, uint64 readvalue) nothrow {
        readvalue = offset;
        assert size == 1;
        success = true;
    }

    /// WARNING WEXPERIMENTAL_UNMAPPED
    method _unmapped_write_access(
        generic_transaction_t *memop, physical_address_t offset,
        physical_address_t size, uint64 writevalue) -> (bool success) nothrow {
        assert size == 1;
        assert offset >= 8 && offset < 16;
        assert writevalue < 256;
        $writevalue[offset - 8] = writevalue;
        $count++;
        success = true;
    }
    register count size 4 @ undefined;
    register writevalue[8] size 8 @ undefined;
}

bank tb {
    parameter overlapping = true;
    parameter partial = true;
    parameter byte_order = "big-endian";
    register r7 size 2 @ 7 { parameter hard_reset_value = 0xcccc; }
    register r14 size 1 @ 14;

    /// WARNING WEXPERIMENTAL_UNMAPPED
    method _unmapped_write_access(
        generic_transaction_t *memop, physical_address_t offset,
        physical_address_t size, uint64 writevalue) -> (bool success) nothrow {
        assert size == 1;
        assert offset >= 8 && offset < 16;
        assert writevalue < 256;
        $writevalue[offset - 8] = writevalue;
        $count++;
        success = true;
    }
    register count size 4 @ undefined;
    register writevalue[8] size 8 @ undefined;
}
