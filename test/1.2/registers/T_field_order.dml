/*
  Â© 2021-2022 Intel Corporation
  SPDX-License-Identifier: MPL-2.0
*/
dml 1.2;
device test;

import "testing.dml";

// This is a stability test that checks that the order in which
// fields are accessed is well-defined

method expect(bool cond, const char *msg) {
    if (!cond) {
        SIM_attribute_error(msg);
        throw;
    }
}

template testfield {
    method write(value) {
        log "info": "wrote %s (msb %d lsb %d)", $qname, $msb, $lsb;
        $last_msb = $msb;
    }
}

bank b {
    register order[unused in 0..1] size 4 @ undefined {
        method test() {
            local int i;
            local int indices[10];
            local char names[10];
            // Access order is defined by the order of the fields array, so
            // test that
            foreach f in ($fields) {
                log info: "name %s index %d", f.name, f.index;
                names[i] = f.name[0];
                indices[i] = f.index;
                i++;
            }
            // Fields are processed in order of significance (most significant
            // bit first), even for interleaved field arrays
            inline $expect(names[0] == 'b' && indices[0] == 2, "0");
            inline $expect(names[1] == 'a' && indices[1] == 0, "1");
            inline $expect(names[2] == 'b' && indices[2] == 1, "2");
            inline $expect(names[3] == 'a' && indices[3] == 1, "3");
            inline $expect(names[4] == 'b' && indices[4] == 0, "4");
            inline $expect(names[5] == 'a' && indices[5] == 2, "5");

            // test that last element of fields is indeed accessed last
            local generic_transaction_t t;
            inline $write_access(&t, 32, 0, 0);
            inline $expect($last_msb == 11, "last msb");
        }

        data int last_msb;
        field a[i in 0..2] @ [$i * 4 + 3] is (testfield);
        field b[i in 0..2] @ [10 - $i * 4 : 8 - $i * 4] is (testfield);
    }
}

method test() -> (bool ok) {
    ok = true;
    try call $b.order[1].test(); catch ok = false;
}
