/*
  © 2021-2022 Intel Corporation
  SPDX-License-Identifier: MPL-2.0
*/

/* column numbering works with unicode: ä */ dml 1.2;

/// COMPILE-ONLY
// ignored
//

/* This file is an unordered mix of all auto-converted constructs.  We have
   rarely commented what code exercises which rule; in general, this can be
   seen by comparing corresponding locations in 1.2/misc and 1.4/misc

   tests.py verifies that all porting messages are exercised.
*/

import "utility.dml";
import "simics/devs/signal.dml";
import "porting-imported.dml";
import "porting-import.dml";
import "../../1.4/misc/porting-common-dml14.dml";

struct foo_t { int i; }

constant my_value = 143;

bank b {
    parameter overlapping = true;
    parameter miss_pattern = 0xfc;
    parameter function = 3;
    register r size 1 @ 0 {
        field f[4:3] {
            parameter hard_reset_value = 3;
            parameter soft_reset_value = 4;
            method read() -> (val) {
                local int r2;
                val = $this + $r6;
            }
            method write(uint2 val) {
                local int f;
                $this = val + $f;
            }
            method set(val) {
                default(val);
            }
        }
        field f2[i in 0..2] @ [5 + $i];
        field f3[2] {
            parameter other = $r.f;
            // one-bit field, used as condition
            // is no longer OK in 1.4 since type is uint64
            method write(value) {
                if (value) ;
                $write_action(value);
            }
            method write_action(uint1 value) {
                if (!$this)
                    $other = 2;
            }
        }
    }
    register r4 size 1 @ 3 {
        field f3[i in 0..2] @ [5 + $i] is unimplemented;
        field f2[2] is silent_unimplemented;
        field f1[1] is _read_unimplemented;
        field f0[0] is _write_unimplemented;
    }
    register r6 size 1 @ 5 {
        method read() -> (val) {
            inline $get -> (val);
            val = $this;
        }
        method write(val) {
            $this = val;
            inline $set(val);
        }
    }
    // This pattern appears a lot in real (generated) code; check that it
    // doesn't devastate the performance of the PHASH check
    register r8[30] size 1 @
        10 + ($i == 0 ? 0
              : $i == 1 ? 1
              : $i == 2 ? 2
              : $i == 3 ? 3
              : $i == 4 ? 4
              : $i == 5 ? 5
              : $i == 6 ? 6
              : $i == 7 ? 7
              : $i == 8 ? 8
              : $i == 9 ? 9
              : $i == 10 ? 10
              : $i == 11 ? 11
              : $i == 12 ? 12
              : $i == 13 ? 13
              : $i == 14 ? 14
              : $i == 15 ? 15
              : $i == 16 ? 16
              : $i == 17 ? 17
              : $i == 18 ? 18
              : $i == 19 ? 19
              : $i == 20 ? 20
              : $i == 21 ? 21
              : $i == 22 ? 22
              : $i == 23 ? 23
              : $i == 24 ? 24
              : $i == 25 ? 25
              : $i == 26 ? 26
              : $i == 27 ? 27
              : $i == 28 ? 28
              : $i == 29 ? 29 : 0);
    method soft_reset() {
        log info: "hard reset %d", $r8[2 + 3];
        default();
    }
    method hard_reset() {
        log info: "soft reset";
        default();
    }
}

bank arri[16];
bank arr[j in 0..15];
parameter sixteen = 16;
parameter fifteen = 15;
bank arr[j in 0..$sixteen - 1];
bank arr[j in 0..($sixteen - 1)];
bank arr[j in 0..(($sixteen - 1))];
bank arr[j in 0..$fifteen];
bank arr[j in 0..[0, 15][[1][0]]];

constant iii=4;
port pp {
    parameter iii = 5;
    parameter jjj = 6;
    method m(int jjj) {
        // must insert 'this.' before jjj, but not iii
        $iii;
        $jjj;
    }
}

connect c {
    method before_set() {
        log info: "before set conn";
    }
    method after_set() {
        log info: "after set conn";
    }
    method validate_port(conf_object_t *obj, const char *port) -> (bool valid) {
        if ($obj == obj)
            valid = true;
    }
}

template t {
    method m default {
        auto int i;
        call $o -> (i);
        call $mo() -> (i, i);
    }

    method o -> (int i) default {
        call $p;
        call $p() -> ();
        after (1.3 + 0.3) call $p;
        after(2.3) call $p();
    }

    method p() default {
    }
    method dead_typed(int i) default {
        log info: "%d", $b.r.f;
    }
// PORT-DML-WARNING WUNUSED
    method dead_inline(i) default {
        log info: "%d", $b.r.f;
    }
}

method dead_typed(int i) {
    log info: "%d", $b.r.f;
}
// PORT-DML-WARNING WUNUSED
method dead_inline(i) {
    static int j;
    log info: "%d", $b.r.f;
}

is t;

method m {
    call default;
    log "info": "foo";
    log "spec_violation", 3, 0: "bar";
    log "unimplemented", 1: "baaz";
    log "critical": "quux";
}

method o -> (int i) {
    call default -> (i);
}

method p() {
}

// PORT-DML-WARNING WUNUSED
method i(p) -> (x) nothrow {
}

// PORT-DML-WARNING WUNUSED
method ii(p) -> (x, y) {
}

data int d;

method /* wääät */ common_throws {
}

method common_no_inline(x) nothrow {
}

template local_no_inline {
    method local_no_inline(int x) default {}
}
is local_no_inline;
// PORT-DML-WARNING WUNUSED
method local_no_inline(x) {
}

method mo() -> (int i, int e) default {
    i = 3;
    e = 4;
    if (i == 3)
        return;
}

connect c {
    method cond(conf_object_t *obj) -> (bool eq) nothrow {
        eq = obj == $obj;
    }
}

attribute a {
    parameter type = "n";
    method get() -> (attr_value_t val) {
    }
    method set(attr_value_t val) {
    }
}

attribute ai {
    parameter documentation = "xyz";
    parameter allocate_type = "int32";
    parameter desc = "foo";
    method before_set() {
        log info: "before set attr";
    }
    method after_set() {
        log info: "after set attr";
        local int au = $this; 
        $au = au;
    }
}

attribute au { parameter allocate_type = "uint32"; }

attribute au1 {
    parameter allocate_type = "uint1";
    parameter type = "i";
}

attribute ad {
    parameter allocate_type = "double"; // hello
}

// PORT-DML-WARNING WUNUSED
if (false) {
    attribute ab { parameter allocate_type = "bool"; }
    error;
// PORT-DML-WARNING WUNUSED
} else if (true) {
    attribute ab { parameter allocate_type = "bool"; }
} else {
    attribute ab { parameter allocate_type = "bool"; }
    error;
}

template inferior_x {
    method x() default {}
}

template inferior_y {
    parameter y default undefined;
}

template inferior_y2 {
    parameter y default undefined;
}

template superior1 {
    method x() {}
    parameter y = 1;
}

template superior2 is inferior_x {
    parameter y = 2;
}

template superior3 {
    is inferior_y;
    method x() {}
}

port p1 is (inferior_x, superior1, inferior_y);
port p2 is (inferior_y, superior2, inferior_y2);
port p3 is (superior3, inferior_x);

// PORT-DML-WARNING WUNUSED
template dead {
    parameter p = $b.r.f;
}

// check that we get no warning if a declaration is instantiated twice
// where one is used and the other unused.
template half_dead {
    method x(y) { }
    if ($alive) {
        interface signal;
    } else {
        interface signal;
    }
}

parameter undef = undefined;

connect c is half_dead {
    parameter alive = false;
    interface signal { parameter required = false; }
}

connect c2 is half_dead {
    parameter alive = true;
}

parameter some_string = #1001;
parameter some_other_string = #($b.r6.offset);

event ev {
    parameter timebase = "cycles";
    method get_event_info(void *data) -> (attr_value_t attr) {
        attr = SIM_make_attr_nil();
    }
    method set_event_info(attr_value_t attr) -> (void *data) {
    }
    method destroy(void *data) {}
    method event(void *data) {}
}

template evt {
    method get_event_info(void *data) -> (attr_value_t attr) {
        attr = SIM_make_attr_nil();
    }
    method set_event_info(attr_value_t attr) -> (void *data) {
    }
    method destroy(void *data) {}
    method event(void *data) {}
}

event ev2 is (evt) {
    parameter timebase = "seconds";
}

method init() {
    inline $c2.x(0);
    call $p();
    call $m();
    $pp.m(0);
    local int i;
    call $o() -> (i);
    inline $common_no_inline(NULL);
    log info: "%d %d %d", $au, $b.r6, $b.r.f;
    if (defined($undef)) {
        error;
    } else if (defined($undef)) {
    } else if (true) {
    } else {
        error;
    }

    i = defined($undef) ? $undef : false ? 0 : true ? 3 : undefined;
    i = defined $undef && $undef.x ? 1 : 0;
    i = (!defined $undef || $undef.z) ? 1 : 0;
    if (defined $undef && $undef.cond) {
    }

    select x in ([$b.r6, $b2.r3]) where (x == 5) { x = 3; } else {}
    foreach x in ([$b.r6, $b2.r3]) { x = 4; }

    if ($b.r.f3 ? $b.r.f2[0] && !$b.r.f2[2] : false)
        ;
    if ($c.signal) {
        if (!$c.signal.signal_lower) {
            $c.signal.signal_raise();
        }
    }
}
