/*
  Â© 2021 Intel Corporation
  SPDX-License-Identifier: MPL-2.0
*/
dml 1.2;

device test;

import "testing.dml";

constant x = 0;

parameter is_dml_12 = true;

/// SCAN-FOR-TAGS dml14.dml
import "dml14.dml";

parameter y = global_sym;

method inline_dml12(x) -> (y) nothrow {
    y = x;
    // this used to cause a crash, see SIMICS-13679
    switch (x) { }
}

template inline_def {
    method inl(x, u) -> (int y) nothrow default {
        assert !defined(u);
        y = x + 1;
    }
}
/// WARNING WEXPERIMENTAL
method inl(x, u) -> (int y) nothrow {
    inline default(x + 1, u) -> (y);
    y += 1;
}

method ret_one() -> (int x) nothrow {
    call default() -> (x);
    x *= 10;
}

method ret_throws_dml12() -> (int x, int y) {
    x = 3;
    y = 4;
}

method ret_throws() -> (int x, int y) {
    call default() -> (x, y);
    x += 5;
    y += 6;
}

is t;

typedef layout "little-endian" {
    int24 i24;
    int56 a56[2];
} le_12_layout;

method test_layouts() -> (bool ok) {
    ok = true;
    local uint8 *acc;

    local be_layout b;
    b.i24 = 0xf00f00;
    b.a56[0] = 0xff0f0000000000;
    b.a56[1] = 0xfff0ff00000000;
    acc = cast(&b, uint8*);

    local int i;
    // for (i = 0; i < 17; i ++)
    //     log "info": "acc[%d] = %#x", i, acc[i];
    ok = (acc[0]  == 0xf0 && acc[1]  == 0xf  && acc[2]  == 0x0  && // i24be
          acc[3]  == 0xff && acc[4]  == 0xf  && acc[5]  == 0x0  && // a56[0]be
          acc[6]  == 0x0  && acc[7]  == 0x0  && acc[8]  == 0x0  &&
          acc[9]  == 0x0  &&
          acc[10] == 0xff && acc[11] == 0xf0 && acc[12] == 0xff && // a56[1]be
          acc[13] == 0x0  && acc[14] == 0x0  && acc[15] == 0x0  &&
          acc[16] == 0x0  && ok);

    local le_layout l;
    l.i24 = 0xf00f00;
    l.a56[0] = 0xff0f0000000000;
    l.a56[1] = 0xfff0ff00000000;
    acc = cast(&l, uint8*);
    // for (i = 0; i < 17; i ++)
    //     log "info": "acc[%d] = %#x", i, acc[i];
    ok = (acc[0]  == 0x0  && acc[1]  == 0xf  && acc[2]  == 0xf0 && // i24be
          acc[3]  == 0x0  && acc[4]  == 0x0  && acc[5]  == 0x0  && // a56[0]be
          acc[6]  == 0x0  && acc[7]  == 0x0  && acc[8]  == 0xf  &&
          acc[9]  == 0xff &&
          acc[10] == 0x0  && acc[11] == 0x0  && acc[12] == 0x0  && // a56[1]be
          acc[13] == 0x0  && acc[14] == 0xff && acc[15] == 0xf0 &&
          acc[16] == 0xff && ok);
}

port p is nothrowing {
    // Black magic turns these into nothrow methods
    /// WARNING WTHROWS_DML12
    method nothrow_method() {
        /// GREP .*info.*call nothrow_method
        log info: "call nothrow_method";
        /// GREP .*error.*Unexpected exception in p[.]nothrow_method
        throw;
    }
    /// WARNING WTHROWS_DML12
    method nothrow_shared_default() {
        /// GREP .*info.*call nothrow_shared_default
        log info: "call nothrow_shared_default";
        /// GREP .*error.*Unexpected exception in p[.]nothrow_shared_default
        throw;
    }
    /// WARNING WTHROWS_DML12
    method nothrow_shared_abstract() {
        /// GREP .*info.*call nothrow_shared_abstract
        log info: "call nothrow_shared_abstract";
        /// GREP .*error.*Unexpected exception in p[.]nothrow_shared_abstract
        throw;
    }
}
implement tmp {
    // no warning
    method f() { }
}

method test() -> (bool ok) {
    $p.m();
    local int x;
    call $ret_one() -> (x);
    ok = x == 20;
    ok = ok && exp_ret_one($dev.obj) == 20;
    assert global_sym == $global_sym;
    local int y;
    call $ret_throws() -> (x, y);
    ok = ok && x == 35 && y == 46;
    call $m();
    inline $m();
    call $traitmethod() -> (x, y);
    ok = ok && x == 7 && y == 8;
    local bool ok2;
    call $test_layouts() -> (ok2);
    ok = ok && ok2;
    // defined in dml14.dml
    call $memop_test();
    call $attribute_test();
    call $reset_test();
    inline $inl(11, undefined) -> (x);
    ok = ok && x == 16;
    local attr_value_t args = SIM_make_attr_list(
        1, SIM_make_attr_string("error"));
    VT_call_python_module_function("stest", "untrap_log", &args);
    SIM_attr_free(&args);
    call $p.nothrow_shared_default();
    call $p.nothrow_shared_abstract();
    call $p.nothrow_method();
    call $pseudo_attr_test();
    call $field_regs.test();
    call $io_memory_access_bank.test();
    call $transaction_access_bank_compat.test();
    call $io_memory_access_bank.test();
    call $transaction_access_bank_compat.test();
    local conf_object_t *bo;
    call $test_bank_obj_get();
    call $len_test();
    /// GREP .*Once logging
    call $log_once();
    ok = ok && s_param == 4;

    call $after_on_hook($h);
    $h.send_now();
    ok = ok && $s == 5;
}
