/*
  Â© 2021-2022 Intel Corporation
  SPDX-License-Identifier: MPL-2.0
*/
dml 1.2;
device test;

method foo {
    assert false;
}

data int x;

event ev {
    parameter timebase = "cycles";
    method event(void *data) {
        assert false;
    }
    method get_event_info(void *data) -> (attr_value_t info) {
        info = SIM_make_attr_nil();
    }
    method destroy(void *data) {
        assert data == &$x;
        /// GREP \[.* info\] destroy-event ev
        log "info": "destroy-event %s", $qname;
    }
}

event ev_arr[i in 0..1][j in 0..1] {
    parameter timebase = "cycles";
    method event(void *data) {
        assert false;
    }
    method get_event_info(void *data) -> (attr_value_t info) {
        info = SIM_make_attr_nil();
    }
    method destroy(void *data) {
        assert data == &$x;
        /// GREP \[.* info\] destroy-event ev_arr\[1\]\[1\]
        log "info": "destroy-event %s", $qname;
    }
}

data bool notified;

method del_notify_cb(conf_object_t *subscriber, void *data) {
    $notified = true;
}

typedef void (*notify_cb_t)(conf_object_t *subscriber, void *data);

method post_init {
    if (SIM_object_clock($dev.obj)) {
        SIM_require_object(SIM_object_clock($dev.obj));
        after (1.0) call $foo;
        inline $ev.post(10, &$x);
        inline $ev_arr[1][1].post(10, &$x);
    }
    SIM_add_global_notifier(Sim_Global_Notify_Object_Delete, $dev.obj,
                            cast($del_notify_cb, notify_cb_t), NULL);
}

method destroy {
    // Notifier is triggered after pre-delete but before deinit.
    // Hence the condition must be negated with API 7 or higher.
    if ($notified) {
        log "error": "notifier was triggered";
    }
    /// GREP \[.* info\] destroy-device
    log "info": "destroy-device";
}
