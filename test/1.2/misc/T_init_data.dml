/*
  Â© 2021-2022 Intel Corporation
  SPDX-License-Identifier: MPL-2.0
*/
dml 1.2;
device test;
import "testing.dml";

data int simple_int = 17;
data const int const_int = 17;
data int simple_array[4] = {0, 256, 128, 4096};
data const int const_array[4] = {0, 256, 128, 4096};
data int d2_array[2][4] = {
    {1, 2, 3, 4},
    {5, 6, 7, 8}
};
data const char *str_array[2] = {
    "A", "B",
};

struct simple_struct_t {
    int i;
    bool b;
}
data simple_struct_t simple_struct = {42, true};

struct const_struct_t {
    int i;
    const bool b;
}
data const_struct_t const_struct = {42, true};

struct a_struct_t {
    int i;
}
data a_struct_t a_struct_array[2] = {{11}, {12}};

struct b_struct_t {
    int a[2];
}
data b_struct_t b_struct = {{9, 10}};

data bitfields 32 {
    uint3 x @ [31:29];
    uint16 y @ [23:8];
    uint8 z @ [7:0];
} bf_data = {0x2, 0x1234, 0xcc};

bank b {
    register r[3] size 4 @ undefined {
        data int x = 17 + $i;
        data int y[2] = {$i, $i*2};
    }
}

method test -> (bool ok) {
    // simple scalar
    ok = $simple_int == 17;
    if (!ok)
        return;

    // const scalar
    ok = $const_int == 17;
    if (!ok)
        return;

    // simple array
    ok = $simple_array[0] == 0
      && $simple_array[1] == 256
      && $simple_array[2] == 128
      && $simple_array[3] == 4096;
    if (!ok)
        return;

    // const array
    ok = $const_array[0] == 0
      && $const_array[1] == 256
      && $const_array[2] == 128
      && $const_array[3] == 4096;
    if (!ok)
        return;

    // 2D array
    ok = $d2_array[0][0] == 1
      && $d2_array[0][1] == 2
      && $d2_array[0][2] == 3
      && $d2_array[0][3] == 4
      && $d2_array[1][0] == 5
      && $d2_array[1][1] == 6
      && $d2_array[1][2] == 7
      && $d2_array[1][3] == 8;
    if (!ok)
        return;

    // string array
    ok = $str_array[0][0] == 0x41
      && $str_array[0][1] == 0x0
      && $str_array[1][0] == 0x42
      && $str_array[1][1] == 0x0;
    if (!ok)
        return;

    // simple struct
    ok = $simple_struct.i == 42 && $simple_struct.b == true;
    if (!ok)
        return;

    // const struct
    ok = $const_struct.i == 42 && $const_struct.b == true;
    $const_struct.i = -24;
    ok = $const_struct.i == -24 && $const_struct.b == true;
    if (!ok)
        return;

    // array of struct
    ok = $a_struct_array[0].i == 11 && $a_struct_array[1].i == 12;
    if (!ok)
        return;

    // array in struct
    ok = $b_struct.a[0] == 9 && $b_struct.a[1] == 10;
    if (!ok)
        return;

    // bit field
    local uint32 bf_v = $bf_data;
    ok = $bf_data.x == 0x2 
      && $bf_data.y == 0x1234 
      && $bf_data.z == 0xcc
      && bf_v == ((0x2 << 29) | (0x1234 << 8) | 0xcc);
    if (!ok)
        return; 

    // data with indices
    ok = $b.r[0].x == 17 && $b.r[1].x == 18 && $b.r[2].x == 19
      && $b.r[0].y[0] == 0 && $b.r[0].y[1] == 0
      && $b.r[1].y[0] == 1 && $b.r[1].y[1] == 2
      && $b.r[2].y[0] == 2 && $b.r[2].y[1] == 4;
}
