/*
  Â© 2021-2022 Intel Corporation
  SPDX-License-Identifier: MPL-2.0
*/
dml 1.2;
device test;
import "testing.dml";

// Check the semantics of various ways to get pointers from bitfields in layouts

typedef bitfields 24 {
    uint17 field1 @ [23:7];
    uint7  field2 @ [6:0];
} bitfield_24;

typedef bitfields 32 {
    uint17 field1 @ [31:15];
    uint15 field2 @ [14:0];
} bitfield_32;

typedef layout "big-endian" {
    bitfield_24 member_24;
    bitfield_32 member_32;
} be_layout;

method test() -> (ok) {
    local be_layout be_l;

    be_l.member_24.field1 = 0;
    be_l.member_24.field2 = 1;
    be_l.member_32.field1 = 2;
    be_l.member_32.field2 = 3;

    // check 24bitsize

    // addressof gives us a regular bitfield pointer, which must be recast to
    // the proper type
    local bitfield_24 * be24member_p = &be_l.member_24;
    local typeof(be_l.member_24) *be24member_cp =
        cast(be24member_p, typeof(be_l.member_24)*);

    // check pointer sizing
    assert cast(be24member_cp + 1, uint8*) == cast(be24member_cp, uint8*) + 3;
    // the original pointer has incorrect sizing
    assert cast(be24member_p + 1, uint8*) == cast(be24member_p, uint8*) + 4;

    // check field access
    assert be24member_cp->field1 == 0;
    assert be24member_cp->field2 == 1;

    // check 32bitsize
    local bitfield_32 * be32member_p = &be_l.member_32;
    local typeof(be_l.member_32) *be32member_cp =
        cast(be32member_p, typeof(be_l.member_32)*);

    // check pointer sizing
    assert cast(be32member_cp+1, uint8*) == cast(be32member_cp, uint8*) + 4;
    // original pointer has correct sizing in this case
    assert cast(be32member_p+1, uint8*) == cast(be32member_p, uint8*) + 4;

    assert be32member_cp->field1 == 2;
    assert be32member_cp->field2 == 3;

    ok = true;
}