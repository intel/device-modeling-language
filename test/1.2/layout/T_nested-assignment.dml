/*
  Â© 2021-2022 Intel Corporation
  SPDX-License-Identifier: MPL-2.0
*/
dml 1.2;
device test;
import "testing.dml";

typedef layout "big-endian" {
    uint32 a;
    uint32 b;
} inner64;

typedef layout "big-endian" {
    uint64 a;
    uint64 b;
} inner128;

typedef layout "big-endian" {
    inner64 i64;
    inner128 i128;
    inner64 a[2];
} outer;

method m(inner64 x) -> (bool ok) {
    ok = x.b == 0xabcdef00;
}

method test64 -> (bool ok)
{
    local uint32 a = 0x12345678;
    local uint32 b = 0xabcdef00;
    local inner64 v;
    v.a = a;
    v.b = b;

    // nested layout as target
    local outer x;
    x.i64 = v;

    log "info": "x.i64: 0x%08x 0x%08x", x.i64.a, x.i64.b;
    ok = x.i64.a == a && x.i64.b == b;
    if (!ok)
        return;

    // failing code moved to T_nested_arg.dml; please uncomment these lines
    // when the bug is fixed
    //call $m(x.i64) -> (ok);
    //if (!ok)
    //    return;
    //call $m(x.a[1]) -> (ok);
    //if (!ok)
    //    return;
    if (x.i64.b != 0xabcdef00) {
        ok = false;
        return;
    }
    x.a[1] = x.i64;
    if (x.a[1].b != 0xabcdef00) {
        ok = false;
        return;
    }

    local uint8 *c;
    c = cast(&x.i64, uint8 *);
    log "info": "x.i64: %02x %02x %02x %02x %02x %02x %02x %02x",
        c[0], c[1], c[2], c[3],
        c[4], c[5], c[6], c[7];
    ok = ((c[0] == ((a >> 24) & 0xff)) &&
          (c[1] == ((a >> 16) & 0xff)) &&
          (c[2] == ((a >>  8) & 0xff)) &&
          (c[3] == (a & 0xff)) &&
          (c[4] == ((b >> 24) & 0xff)) &&
          (c[5] == ((b >> 16) & 0xff)) &&
          (c[6] == ((b >>  8) & 0xff)) &&
          (c[7] == (b & 0xff)));
    if (!ok)
        return;

    // nested layout as source
    local inner64 w;
    w = x.i64;
    log "info": "w: 0x%08x 0x%08x", w.a, w.b;
    ok = w.a == a && w.b == b;
    if (!ok)
        return;

    // nested layout as both target and source
    local outer y;
    y.i64 = x.i64;
    ok = (y.i64.a == x.i64.a) && (y.i64.b == x.i64.b);
    if (!ok)
        return;

    // make sure we still can refer layout as whole
    local outer z;
    z = x;
    ok = (z.i64.a == x.i64.a) && (z.i64.b == x.i64.b);
}

method test128 -> (bool ok)
{
    local uint64 a = 0x12345678abcdef00;
    local uint64 b = 0xabcdef0012345678;
    local inner128 v;
    v.a = a;
    v.b = b;

    // nested layout as target
    local outer x;
    x.i128 = v;

    log "info": "x.i128: 0x%16x 0x%16x", x.i128.a, x.i128.b;
    ok = x.i128.a == a && x.i128.b == b;
    if (!ok)
        return;

    local uint8 *c;
    c = cast(&x.i128, uint8 *);
    log "info": "x.i128: %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x",
        c[0], c[1], c[2], c[3],
        c[4], c[5], c[6], c[7],
        c[8], c[9], c[10], c[11],
        c[12], c[13], c[14], c[15];
    ok = ((c[ 0] == ((a >> 56) & 0xff)) &&
          (c[ 1] == ((a >> 48) & 0xff)) &&
          (c[ 2] == ((a >> 40) & 0xff)) &&
          (c[ 3] == ((a >> 32) & 0xff)) &&
          (c[ 4] == ((a >> 24) & 0xff)) &&
          (c[ 5] == ((a >> 16) & 0xff)) &&
          (c[ 6] == ((a >>  8) & 0xff)) &&
          (c[ 7] == (a & 0xff)) && 
          (c[ 8] == ((b >> 56) & 0xff)) &&
          (c[ 9] == ((b >> 48) & 0xff)) &&
          (c[10] == ((b >> 40) & 0xff)) &&
          (c[11] == ((b >> 32) & 0xff)) &&
          (c[12] == ((b >> 24) & 0xff)) &&
          (c[13] == ((b >> 16) & 0xff)) &&
          (c[14] == ((b >>  8) & 0xff)) &&
          (c[15] == (b & 0xff)));
    if (!ok)
        return;

    // nested layout as source. Also test that pointer works
    local inner128 *w;
    w = &x.i128;
    log "info": "w: 0x%16x 0x%16x", w->a, w->b;
    ok = w->a == a && w->b == b;
    if (!ok)
        return;

    // nested layout as both target and source
    local outer y;
    y.i128 = x.i128;
    ok = (y.i128.a == x.i128.a) && (y.i128.b == x.i128.b);

    // make sure we still can refer layout as whole
    local outer z;
    z = x;
    ok = (z.i128.a == x.i128.a) && (z.i128.b == x.i128.b);
}


typedef layout "big-endian" {
    layout "big-endian" {
        layout "big-endian" {
            uint16 h;
            uint32 w;
        } p2[2];
        uint8 b;
    } p1;
} t_deeply_nested;

method test_deeply_nested -> (bool ok)
{
    local t_deeply_nested x;
    local t_deeply_nested y;

    x.p1.p2[0].h = 0xabcd;
    x.p1.p2[1].w = 0x12345678;
    x.p1.b = 0xff;

    y.p1.p2[1] = x.p1.p2[0];
    y.p1.p2[0] = x.p1.p2[1];
    ok =   y.p1.p2[1].h == 0xabcd
        && y.p1.p2[0].w == 0x12345678
        && y.p1.b == 0;
    if (!ok)
        return;

    local uint8 *c;
    c = cast(&y.p1.p2, uint8 *);
    log "info": "y.p1.p2: %02x %02x %02x %02x %02x %02x",
        c[6], c[7], c[2], c[3], c[4], c[5];
    ok =   c[6] == 0xab
        && c[7] == 0xcd
        && c[2] == 0x12
        && c[3] == 0x34
        && c[4] == 0x56
        && c[5] == 0x78;
}

method test -> (bool ok)
{
    local bool t64;
    call $test64() -> (t64);
    
    local bool t128;
    call $test128() -> (t128);
    
    local bool tdeep;
    call $test_deeply_nested -> (tdeep);
    
    ok = t64 && t128 && tdeep;
}
