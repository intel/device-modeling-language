/*
  Â© 2021-2022 Intel Corporation
  SPDX-License-Identifier: MPL-2.0
*/
dml 1.2;

device test;

import "testing.dml";

method t(void *p) -> (int o) {
    o = 4;
    throw;
    o = 5;
}

data int i;

bank b[i in 0..8] {
    group g[j in 0..8] {
        method t(void *p) -> (int o) {
            o = $i * 10 + $j;
        }
    }
}

method thunk() -> () {}

method multi_out -> (int i, int j) { i = 3; j = 4; }

method test -> (bool ok) {
    local bool (*ref)(typeof $dev, void *, int *);
    ref = $t;
    local int i = 1;
    ok = ref($dev, NULL, &i);
    // output not clobbered on throw
    ok = ok && i == 1;

    // methods in an array get index params
    local bool (*aref)(typeof $dev, uint32, uint32, void *, int *);
    aref = $b[0].g[0].t;
    ok = ok && !aref($dev, 1, 5, NULL, &i);
    ok = ok && i == 15;

    // multiple output params show up separately
    local bool (*multi_out)(typeof $dev, int *, int *) = $multi_out;
    local int j;
    ok = ok && !multi_out($dev, &i, &j);
    ok = ok && i == 3 && j == 4;

    // the typeof expression works too
    local typeof $thunk *tref = &$thunk;
    local typeof $t *ref2 = ref;
    local typeof $multi_out *moref = &$multi_out;
}
