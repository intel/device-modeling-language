/*
  Â© 2021-2022 Intel Corporation
  SPDX-License-Identifier: MPL-2.0
*/
dml 1.2;
device test;
import "testing.dml";

method M default {
    /// GREP .* default M
    log "info": "default M";
}

method M {
    /// GREP .* overridden M
    log "info": "overridden M";
    call default;
}

method N default {
    /// GREP .* default N
    log "info": "default N";
}

method N {
    /// GREP .* overridden N
    log "info": "overridden N";
    inline default;
}

method O(int x) default {
    /// GREP .* default O 3
    log "info": "default O %d", x;
}

method O(int y) {
    /// GREP .* overridden O 2
    log "info": "overridden O %d", y;
    call default(y+1);
}

method P(int x) default {
    /// GREP .* default P 3
    log "info": "default P %d", x;
}

method P(int x) {
    /// GREP .* overridden P 2
    log "info": "overridden P %d", x;
    inline default(x+1);
}

method d1_0(int x) default {}
method r1_0(int x) {
    call default(x);
    call default(x) -> ();
}

method d1_1(int x) -> (int y) default {}
method r1_1(int x) -> (int y) {
    call default(x) -> (y);
}

method d0_1 -> (int y) default {}
method r0_1 -> (int y) {
    call default -> (y);
}

import "io-memory.dml";

bank b {
    parameter register_size = 4;
    parameter byte_order = "big-endian";

    method access(generic_transaction_t *memop, physical_address_t offset,
                  physical_address_t size) {
        call default(memop, offset, size);
    }
}

method test -> (bool ok) {
    call $M;
    inline $N;
    call $O(2);
    inline $P(2);
    ok = true;
}
