<!--
  Â© 2021-2022 Intel Corporation
  SPDX-License-Identifier: MPL-2.0
-->

<rn id="dml">
  <name>DML</name>
  <build-id value="1313"><add-note> A bug that caused bad C code to be
    generated when using 'switch'
    was fixed <bug number="4766"/> <bug number="4788"/>. </add-note></build-id>
  <build-id value="1314"><add-note> A bug that prevented function type typedefs
    from working properly was
    fixed <bug number="4934"/>. </add-note></build-id>
  <build-id value="1315"><add-note> PCI device code has been added to the
    standard library files. The
    DEC21140A-dml device is provided as an example (refer to the Simics
    Programming Guide for more details). </add-note></build-id>
  <build-id value="1317"><add-note> A bug that prevented the 'get' and 'set'
    methods in banks from working
    properly were fixed <bug number="4981"/>. </add-note></build-id>
  <build-id value="1317"><add-note> This release contains a rewrite of some of
    the internals of the DML
    compiler.  This significantly reduces the compile time of some complex
    models.  It also removes some limitations that caused problems when using
    arrays of registers or connections
    <bug number="1973"/>,
    <bug number="2967"/>,
    <bug number="5021"/>,
    <bug number="5023"/>.</add-note></build-id>
  <build-id value="1317"><add-note> The 'ERANGE' error message has been
    removed. </add-note></build-id>
  <build-id value="1318"><add-note> Standard register templates (in
    utility.dml) have been changed to be less
    verbose unless absolutely necessary, and adapted to work better
    with field. </add-note></build-id>
  <build-id value="1321"><add-note> Attributes can now be declared
    as arrays. </add-note></build-id>
  <build-id value="1322"><add-note> The DML tutorial has
    been updated. </add-note></build-id>
  <build-id value="1322"><add-note> A bug that caused bad code to be generated
    in some cases when &amp;&amp; or
    || were used has been fixed <bug number="5269"/>. </add-note></build-id>
  <build-id value="1326"><add-note> A problem that made it hard to extract the
    object name of an objected
    pointed to by a 'connect' has been fixed.  Another effect of this bug was
    that some errors where '->' was used instead of '.' went undetected.  The
    DEC21140A-dml sample code contained one such error and has been
    updated <bug number="4690"/>. </add-note></build-id>
  <build-id value="1327"><add-note> A bug that made it impossible to compare
    two boolean variables has been
    fixed.  At the same time, this fix also made the compiler catch illegal
    compares of booleans with integers
    <bug number="4900"/>. </add-note></build-id>
  <build-id value="1327"><add-note> Fixed a problem with the grammar that made
    it possible to declare local
    variables and function parameters without a type.  Note that when declaring
    external C functions with an empty parameter list, you should not write
    (void) <bug number="2722"/>. </add-note></build-id>
  <build-id value="1327"><add-note> Fixed a bug that made the compiler lose
    function calls made in the
    initializer of local method variables if the variable wasn't used in the
    method <bug number="5425"/>. </add-note></build-id>
  <build-id value="1329"><add-note> A bug that prevented the 'after (..) call
    ..;' statement to work was
    fixed <bug number="5480"/>. </add-note></build-id>
  <build-id value="1329"><add-note> Some error handling bugs were fixed that
    made dmlc unable to detect
    or properly report some error situations. </add-note></build-id>
  <build-id value="1330"><add-note> PCI support: PCI BAR mappings can be
    customized at mapping time by
    overriding the new customize_mapping() function in
    each BAR. </add-note></build-id>
  <build-id value="1331"><add-note> rom interface definition added to standard
    Simics import files. </add-note></build-id>
  <build-id value="1331"><add-note> PCI support: documentation on how to write
    PCI devices in DML is now
    available in the Programming Guide. </add-note></build-id>
  <build-id value="1331"><add-note> PCI support: PCI BAR mapping customization
    was extended. Refer to the
    Programming Guide for more information. </add-note></build-id>
  <build-id value="1332"><add-note> Post increment and decrement operators have
    been fixed <bug number="5553"/>. </add-note></build-id>
  <build-id value="1332"><add-note> Declaration an attribute with parameter
    allocate_type = "string"
    now works <bug number="5562"/>.</add-note></build-id>
  <build-id value="1332"><add-note> If an argument expression sent to an
    inlined method had side effects, the
    side effects were sometimes not executed if the inlined method didn't use
    the value.  This has been fixed <bug number="5582"/>.</add-note></build-id>
  <build-id value="1334"><add-note> A serious bug in the minus arithmetic
    operator has been fixed.  Expressions
    that followed the patterns (x * C1 - C2), (C1 * x - C2), where C1 and C2 are
    arbitrary constants were sometimes miscalculated. The same problem existed
    for expressions where the multiplication was replaced another arithmetic
    operator other than addition <bug number="5627"/>. </add-note></build-id>
  <build-id value="1334"><add-note> A parameter called "log_group" has been
    added to device, bank, group, and
    register objects.  If set, affected register accesses will be logged using
    this log group in addition to the Register_Read or Register_Write log
    groups. </add-note></build-id>
  <build-id value="1334"><add-note> A bug that made dmlc crash if a variable
    was used when inlining another
    method several times has been fixed
    <bug number="5639"/>. </add-note></build-id>
  <build-id value="1335"><add-note> The Emacs DML mode has been improved to
    provide proper syntax highlighting
    for DML. </add-note></build-id>
  <build-id value="1335"><add-note> DML PCI common code has been made more
    flexible by setting many functions
    are default so they can be overridden </add-note></build-id>
  <build-id value="1336"><add-note> Fixed a bug that caused bad handling of
    switch statements where the switch
    expression was a constant <bug number="5698"/>. </add-note></build-id>
  <build-id value="1339"><add-note> Fixed a bug so that &lt;&lt;= and &gt;&gt;=
    work as intended <bug number="5803"/>. </add-note></build-id>
  <build-id value="1339"><add-note> Reduced compilation times when using large
    register arrays. </add-note></build-id>
  <build-id value="1339"><add-note> Made it possible to create persistent
    attributes by setting the 'persistent'
    parameter to true </add-note></build-id>
  <build-id value="1340"><add-note> Fixed another compilation time problem when
    two large register arrays were
    located close together <bug number="5857"/>. </add-note></build-id>
  <build-id value="1341"><add-note> Fixed a bug that sometimes cause accesses
    to misinterpreted as accesses to a
    register array with an enormous index, causing a simulator crash
    <bug number="5878"/>.</add-note></build-id>
  <build-id value="1341"><add-note> It is now possible to declare an C function
    as taking a variable number of
    arguments in an 'extern' declarations.  This can reduce the number of
    compilation warnings. When doing this, the DML compiler can't do any type
    checking on function arguments, and some care need to be taken not to
    e.g. pass 64-bit values to functions expecting 32-bit values
    <bug number="3007"/>. </add-note></build-id>
  <build-id value="1341"><add-note> Previous versions of dmlc didn't properly
    check the types of expressions in
    assignments.  This has now been fixed, which means that it could detect
    problems in existing code that went
    undetected before. </add-note></build-id>
  <build-id value="1342"><add-note> Updated documentation of 'byte_order'
    parameter <bug number="5933"/>. </add-note></build-id>
  <build-id value="1342"><add-note> Function calls to C functions were not type
    checked properly previously.
    This release fixes this, but it should be noted that some code might need to
    be updated if it contains type errors that have gone undetected
    <bug number="5408"/>. </add-note></build-id>
  <build-id value="1342"><add-note> Improved
    error checking. </add-note></build-id>
  <build-id value="1346"><add-note> An attribute can now be written inside a
    group, which can be used as a way
    of creating multidimensional arrays
    <bug number="5989"/>. </add-note></build-id>
  <build-id value="1352"><add-note> Some minor bugs in the compiler were fixed
    <bug number="6174"/>,
    <bug number="6227"/>,
    <bug number="6283"/>,
    <bug number="6378"/>,
    <bug number="6398"/>,
    <bug number="6409"/>.</add-note></build-id>
  <build-id value="1365"><add-note> Floating point constant such as 1E6 now
    work <bug number="5522"/>. </add-note></build-id>
  <build-id value="1365"><add-note> Negation of floating point values didn't
    work <bug number="6999"/>. </add-note></build-id>
  <build-id value="1365"><add-note> Some minor bugs in the compiler were fixed
    <bug number="6928"/><bug number="6987"/>.</add-note></build-id>
  <build-id value="1367"><add-note> Changed "data" objects so that they can
    never be used as hierarchical
    objects with parameters.  Previously they were assigned standard parameters
    "dev", "this", and "parent", which could conflict with struct member names
    <bug number="7070"/>.</add-note></build-id>
  <build-id value="1374"><add-note> Fixed a bug that caused dmlc to generate
    files in the source directory if a
    full path name to the source file was given
    <bug number="7652"/>. </add-note></build-id>
  <build-id value="1500"><add-note> The compiler supports the new language
    revision DML 1.2.  See the DML
    reference manual for a list of changes from DML 1.0. </add-note></build-id>
  <build-id value="1500"><add-note> The interpretation of the -D flag to dmlc
    has changed.  Writing -Dpar=val
    means that the parameter 'par' is set to 'val', where val is a simple DML
    expression.  The expression can be a literal string, integer, float, or bool
    value.  The difference from previous versions is that to set a parameter to a
    string value, the value must include quotes. </add-note></build-id>
  <build-id value="1504"><add-note> Valid XML output produced when --info flag
    used. </add-note></build-id>
  <build-id value="1505"><add-note> Some failures in error reporting were fixed
    <bug number="7927"/>. </add-note></build-id>
  <build-id value="1506"><add-note> New error message (ECAST) for bad casts
    that went undetected
    <bug number="8059"/>.</add-note></build-id>
  <build-id value="1506"><add-note> Some bugs in the implementation of layout
    types were fixed
    <bug number="7903"/>,
    <bug number="8020"/>,
    <bug number="8139"/>.</add-note></build-id>
  <build-id value="1512"><add-note> DML devices do not crash when posting event
    before the queue attribute has
    been set <bug number="8323"/>. </add-note></build-id>
  <build-id value="1517"><add-note> The workspace makefiles and DMLC have been
    updated to always generate an XML
    file with register information for each DML device. </add-note></build-id>
  <build-id value="1520"><add-note> (Windows only) Depending on the host
    configuration, dmlc.exe could report
    missing DLLs. These DLLs are now provided along
    with dmlc.exe. </add-note></build-id>
  <build-id value="1521"><add-note> Handle variable width specifiers in log
    statements <bug number="8618"/>. </add-note></build-id>
  <build-id value="1526"><add-note> (Windows only) Depending on the host
    configuration, dmlc.exe could fail
    because of a missing python DLL. This DLL is now provided along dmlc.exe <bug
    number="8751"/>. </add-note></build-id>
  <build-id value="1527"><add-note> The <tt>dmlc</tt> compiler no longer
    handles the obsolete DML 0.9
    language revision that was only used internally
    at Virtutech. </add-note></build-id>
  <build-id value="1531"><add-note> An issue that prevented access to const
    layout members for some
    bit-widths was fixed <bug number="8963"/>. </add-note></build-id>
  <build-id value="1531"><add-note> A problem that caused the wrong register to
    be accessed when the
    read_access or write_access method of a bank was overridden has been
    fixed <bug number="8965"/>. </add-note></build-id>
  <build-id value="1532"><add-note> Made it possible to take a big-endian bit
    slice on array references in
    DML 1.2 <bug number="8677"/>. </add-note></build-id>
  <build-id value="1532"><add-note> A scalability problem with large register
    arrays was fixed <bug number="8978"/>. </add-note></build-id>
  <build-id value="1534"><add-note> Fixed a problem that could cause crashes in
    devices with register
    arrays near offset 0 <bug number="9096"/>. </add-note></build-id>
  <build-id value="1536"><add-note> Fixed a bug that prevented bit slicing
    operations on struct members in
    DML 1.2 <bug number="9136"/>. </add-note></build-id>
  <build-id value="1538"><add-note> Fixed the implementation of the <tt>-D</tt>
    option to <tt>dmlc</tt>
    which didn't work as advertised <bug number="9248"/>.</add-note></build-id>
  <build-id value="1540"><add-note> Fixed a problem that could cause errors in
    generated C code when
    declaring register arrays when the index was passed to an inlined
    method that didn't use it <bug number="9335"/>.</add-note></build-id>
  <build-id value="1540"><add-note> Fixed a problem with dependencies between
    layout types <bug number="9358"/>. </add-note></build-id>
  <build-id value="1540"><add-note> Fixed a name lookup problem when using
    anonymous banks in DML 1.0
    <bug number="4970"/>.</add-note></build-id>
  <build-id value="1540"><add-note> Made it less likely that bit slice
    operations in register methods were
    wrong when using "be" bit numbering
    <bug number="9256"/>. </add-note></build-id>
  <build-id value="1541"><add-note> Fixed a problem that caused the compiler to
    crash when using constants
    in array sizes in type declarations
    <bug number="9412"/>. </add-note></build-id>
  <build-id value="1541"><add-note> Fixed a problem when the array index was
    used incorrectly used in a
    documentation string <bug number="9467"/>. </add-note></build-id>
  <build-id value="1543"><add-note> Fixed so that registers and fields that
    contain "data" members no longer cause the DML compiler to generate broken C code
    <bug number="6297"/>. </add-note></build-id>
  <build-id value="1544"><add-note> When inlining a method using a constant
    integer value, where the
    corresponding method parameter has a type, the parameter value is not
    properly converted to the parameter type
    <bug number="9186"/>.</add-note></build-id>
  <build-id value="1545"><add-note> Added <tt>design_limitation</tt> template
    to standard
    library <bug number="9602"/>. </add-note></build-id>
  <build-id value="1548"><add-note> The <iface>rapidio</iface> interface has
    been changed, and library
    files <file>rapidio.dml</file> and <file>rapidio-device.dml</file>
    have been updated. </add-note></build-id>
  <build-id value="1548"><add-note> Fixed a compiler error where boolean
    members of const structs could
    sometimes not be accessed. </add-note></build-id>
  <build-id value="1550"><add-note> A problem when referencing names from
    within a register array has
    been fixed
    <bug number="9825"/>.</add-note></build-id>
  <build-id value="1550"><add-note> A problem with layout types in
    <tt>data</tt> has been fixed
    <bug number="9734"/>.</add-note></build-id>
  <build-id value="1552"><add-note> Fixed an issue that prevented references to
    some DML objects (banks) to
    appear in lists. </add-note></build-id>
  <build-id value="1554"><add-note> Fixed an issue that made it impossible to
    define a pointer to a locally
    declared layout <bug number="9985"/>. </add-note></build-id>
  <build-id value="1555"><add-note> Extended dbuffer API with truncate and
    append_data functions. </add-note></build-id>
  <build-id value="1555"><add-note> Allow elements from arrays (e.g. register
    arrays) to appear in lists,
    <bug number="9992"/>. </add-note></build-id>
  <build-id value="1555"><add-note> DMLC will no longer throw away the
    constness of a void pointer when
    emitting C-code <bug number="9563"/>. </add-note></build-id>
  <build-id value="1556"><add-note> Fixed a bug that sometimes caused the value
    of a field to be corrupted when
    a partial register access was made
    <bug number="10206"/>. </add-note></build-id>
  <build-id value="2502"><add-note> The names of generated C functions have
    changed slightly. The name
    "foo_bar.fie" method now maps to the C function "foo_bar__fie",
    i.e. a dot in the fully qualified name maps to double underscores.
    This avoids common collisions between methods with names like
    "foo.set" and "foo_set" <bug number="5290"/>. </add-note></build-id>
  <build-id value="2503"><add-note> Static variables are now stored in the
    device object, which means
    that they are no longer shared between device instances. This was
    done do make it easier to make the device models thread safe
    <bug number="9743"/>.</add-note></build-id>
  <build-id value="2504"><add-note> A minor bug in the <fun>next</fun> method
    of events
    with <tt>timebase = "seconds"</tt> was fixed
    <bug number="10632"/>.</add-note></build-id>
  <build-id value="2504"><add-note> A compiler bug that could cause the
    compiler to crash when
    comparing pointers with $dev.obj has been fixed
    <bug number="10621"/>.</add-note></build-id>
  <build-id value="2504"><add-note> The compiler now prevents the assignment of
    a pointer to a
    constant value to a variables whose type is a pointer to a
    non-constant value. For example, a string literal has the type
    <tt>const char *</tt> and can be assigned to a variable of that
    type, but not to a variable of type <tt>char *</tt>
    <bug number="10628"/>.</add-note></build-id>
  <build-id value="2504"><add-note> Fixed a bug that could cause "wrong number
    of function arguments"
    [EARG] error messages in some cases
    <bug number="10248"/>.</add-note></build-id>
  <build-id value="2504"><add-note> Check bitfields member sizes
    <bug number="10058"/>.</add-note></build-id>
  <build-id value="2504"><add-note> Oversized bitfields declarations are
    reported properly as EBFLD
    <bug number="10110"/>.</add-note></build-id>
  <build-id value="2504"><add-note> Detect missing bitfields members
    <bug number="10112"/>.</add-note></build-id>
  <build-id value="2504"><add-note> Expression of a <tt>bitfield</tt> type can
    now be used as integers in log statements
    <bug number="10054"/>.</add-note></build-id>
  <build-id value="2505"><add-note> The sign of layout members are no longer
    ignored (all layout members used
    to be treated as unsigned) <bug number="10634"/>. </add-note></build-id>
  <build-id value="2505"><add-note> Invalid expressions involving the pre and
    post increment/decrement
    operators (<tt>++</tt> and <tt>--</tt>) are detected and reported properly
    <bug number="10670"/>. </add-note></build-id>
  <build-id value="2506"><add-note> Arguments passed when inlining methods are
    now checked more
    thoroughly against the declared method parameter types.
    The error messages are also improved
    <bug number="8493"/>,
    <bug number="10829"/>.</add-note></build-id>
  <build-id value="2506"><add-note> Constant references into a constant list
    are now treated as
    constant expressions
    <bug number="8424"/>.</add-note></build-id>
  <build-id value="2506"><add-note> More problems relating to for <tt>++</tt>
    and <tt>--</tt>
    expressions were fixed
    <bug number="9000"/>,
    <bug number="9009"/>.</add-note></build-id>
  <build-id value="2507"><add-note> Made sure that an attribute that
    corresponds to a <tt>connect</tt>
    doesn't perform any side effects if it is set to its current
    value. Connecting or disconnecting from links is only done when the
    value is actually changed
    <bug number="10943"/>. </add-note></build-id>
  <build-id value="2508"><add-note> Added recommendations to set the
    <tt>desc</tt> parameter in
    devices for human-readable presentation of class names. Warnings
    about missing <tt>desc</tt> parameters can be enabled using
    the <tt>--warn=WNSHORTDESC</tt> option to <tt>dmlc</tt>.
    The device's <tt>desc</tt> parameter is now automatically assigned
    to the <tt>class_desc</tt> attribute
    <bug number="10988"/>. </add-note></build-id>
  <build-id value="2513"><add-note> Events with <tt>timebase="stacked"</tt> now
    work in DML 1.2.
    <bug number="11261"/>. </add-note></build-id>
  <build-id value="2514"><add-note> Included parentheses in <tt>?:</tt>
    expressions in the generated C code
    when needed.
    <bug number="11293"/>. </add-note></build-id>
  <build-id value="2517"><add-note> Method declarations that use unknown types
    are now always detected as an
    error. Previously, the error was only detected if the method was invoked at
    least once. </add-note></build-id>
  <build-id value="2517"><add-note> Don't crash when merging port definitions
    <bug number="11373"/>. </add-note></build-id>
  <build-id value="2520"><add-note> Attributes that have no <tt>set</tt> or
    <tt>get</tt> method will be
    marked as read-only or write only, respectively. An error (EACHK)
    is now also raised if a checkpointed attribute lacks either setter
    or getter. A checkpointed attribute is an attribute with the
    parameter <tt>configuration</tt> set to either <tt>"required"</tt>
    or <tt>"optional"</tt> (the default). Another (EANULL) error is raised if
    an attribute has neither setter or getter unless its
    <tt>configuration</tt> parameter is set to <tt>"none"</tt>
    <bug number="5601"/>.</add-note></build-id>
  <build-id value="2521"><add-note> A register <tt>get</tt> method that throws
    an exception will now cause the
    attribute getter function to return an invalid value
    <bug number="4841"/>.</add-note></build-id>
  <build-id value="2522"><add-note> A bug that could cause dmlc to crash when
    doing a <tt>select</tt>
    over a large list was fixed
    <bug number="11506"/>.</add-note></build-id>
  <build-id value="2523"><add-note> Added the missing
    <type>ms1553_mode_code_t</type> type to the DML library
    <bug number="11643"/>.</add-note></build-id>
  <build-id value="2525"><add-note> Registers and fields that are
    checkpointable but have the parameter
    <tt>allocate=false</tt> are required to define <tt>get</tt> and <tt>set</tt>
    methods. This is now checked in a better way by the compiler
    <bug number="6436"/>.</add-note></build-id>
  <build-id value="2525"><add-note> The <tt>read_constant</tt> template will
    now define a <tt>get</tt> method
    that returns the value <bug number="11755"/>. </add-note></build-id>
  <build-id value="2525"><add-note> Registers that have no <tt>set</tt> or
    <tt>get</tt> method will be
    marked as read-only or write only, respectively. An error (EACHK)
    is now also raised if a checkpointed register lacks either setter
    or getter. A checkpointed register is a register with the
    parameter <tt>configuration</tt> set to either <tt>"required"</tt>
    or <tt>"optional"</tt> (the default). Another (EANULL) error is raised if
    an attribute has neither setter or getter unless its
    <tt>configuration</tt> parameter is set to <tt>"none"</tt>
    <bug number="11350"/>.</add-note></build-id>
  <build-id value="2525"><add-note> A bug that could cause compiler error when
    interpreting a single-bit bit
    slice expressions as a boolean has been fixed
    <bug number="6555"/>. </add-note></build-id>
  <build-id value="2527"><add-note> <tt>port</tt> blocks may now contain
    <tt>connect</tt> and <tt>attribute</tt>
    blocks. </add-note></build-id>
  <build-id value="2527"><add-note> The <tt>int_register</tt> interface that is
    implemented by register banks now
    handles register arrays and register groups when mapping names to numbers
    <bug number="11835"/>.</add-note></build-id>
  <build-id value="2528"><add-note> Handle code generation of the
    <tt>int_register</tt> interface in register
    banks in the compiler. This makes it more efficient, especially when using
    arrays of registers
    <bug number="11784"/>.</add-note></build-id>
  <build-id value="2530"><add-note> The previous change to the
    <tt>int_register</tt> interface was broken for
    register writes and has been fixed
    <bug number="12008"/>.</add-note></build-id>
  <build-id value="2544"><add-note> It is now possible to bitslice a bitslice
    in big-endian mode. This also
    means it is now possible to bitslice a big-endian bitfield member
    <bug number="12312"/>. </add-note></build-id>
  <build-id value="3000"><add-note> The way the Simics API is imported into DML
    has been updated. Every
    C header file now corresponds to one DML library file that contains
    its definitions. When using the <tt>4.2</tt> API, only the device
    API is automatically imported. </add-note></build-id>
  <build-id value="3000"><add-note> When using the Simics 4.2 API,
    <tt>bool</tt> in the C API is translated to
    <tt>bool</tt> in DML. When using older API versions, it will still be
    translated to <tt>int</tt>. This means that code that had to convert the
    return value from <fun>SIM_attr_boolean</fun> and similar functions to
    booleans can now use the return value directly
    <bug number="11421"/>.</add-note></build-id>
  <build-id value="3000"><add-note> The DML compiler now accepts <tt>error</tt>
    statements to cause the
    compilation to fail in any context where an object could be declared, and not
    only inside methods. This change only applies to
    DML 1.2. </add-note></build-id>
  <build-id value="3001"><add-note> DML 1.2 was extended with the ability to
    call the default implementation of a
    method when it is overridden by another implementation. If there is a method
    with a default implementation, another (non-default) implementation of the
    same method can call the default implementation with <tt>call
    default(args)</tt> or <tt>inline default(args)</tt>. </add-note></build-id>
  <build-id value="3001"><add-note> Support for variable-length local arrays
    was added. This means that an array
    can have a length that is given by any expression that is evaluated when the
    array is declared. </add-note></build-id>
  <build-id value="3001"><add-note> Optional attributes marked with
    <tt>allocate_type = "string"</tt>
    will now allow null values
    <bug number="12739"/>.</add-note></build-id>
  <build-id value="3005"><add-note> Format directive precision in log
    statements can now be more than
    a single digit. </add-note></build-id>
  <build-id value="3005"><add-note> Floating-point constants are no longer
    truncated when generating
    the C code
    <bug number="13410"/>.</add-note></build-id>
  <build-id value="3007"><add-note> The API files
    <file>simics/model-iface/cpu-group.dml</file>,
    <file>simics/model-iface/exception.dml</file> and
    <file>simics/model-iface/processor-info.dml</file> are no longer
    imported automatically. Only the device API is imported
    automatically, and these additional files were imported by
    mistake
    <bug number="13616"/>.</add-note></build-id>
  <build-id value="3009"><add-note> The bit slice operator now works on
    bitfields expressions, treating them as
    integers <bug number="13723"/>. </add-note></build-id>
  <build-id value="3012"><add-note> When a log message included a bit slice
    expression, the generated
    C code could sometimes be wrong. This bug could easily be
    triggered when using 64-bit registers
    <bug number="11589"/>. </add-note></build-id>
  <build-id value="3012"><add-note> Assignment expressions can now be used for
    their values, as in C
    <bug number="13814"/>.</add-note></build-id>
  <build-id value="3014"><add-note> The <tt>sizeof</tt> operator is defined to
    work on expressions, and
    the <tt>sizeoftype</tt> operator works on types. Due to a limitation in the
    compiler, <tt>sizeof</tt> also worked on simple type names. This will now
    produce a warning (WSIZEOFTYPE)
    <bug number="13787"/>. </add-note></build-id>
  <build-id value="3014"><add-note> The DML compiler no longer includes time
    stamps in generated
    files. This ensures that the generated files are always identical
    for the same input <bug number="13874"/>. </add-note></build-id>
  <build-id value="3015"><add-note> A <tt>WDEPRECATED</tt> warning is now
    emitted if an event uses
    the <tt>"stacked"</tt> timebase. Stacked events are deprecated in Simics 4.2
    <bug number="13930"/>. </add-note></build-id>
  <build-id value="3015"><add-note> It is now possible to do a single-bit slice
    on a <tt>data</tt> reference
    with the <tt>$d[i]$</tt> syntax
    <bug number="5800"/>. </add-note></build-id>
  <build-id value="3017"><add-note><tt>connect</tt>s may now have
    a <fun>validate_port</fun> method; it is called prior to updating
    the value just like <fun>validate</fun>, but takes a port argument
    as well. Note that this will interfere with any existing methods
    named <fun>validate_port</fun> in <tt>connect</tt> objects.</add-note></build-id>
  <build-id value="3018"><add-note> Types like <tt>(uint48 *)</tt> are now
    properly detected as illegal by the
    DML compiler. Previously they were not treated as an error, but had no
    defined meaning <bug number="9082"/>. </add-note></build-id>
  <build-id value="3024"><add-note> A new method called <fun>destroy</fun> is
    now defined at the top
    level. It can be overridden to include code that will be executed before
    a device object is deleted. It should deallocate all memory explicitly
    allocated by the device model. Note that this will conflict with any
    previously defined method called <fun>destroy</fun>. This also means that
    it is now possible to delete objects defined by DML
    <bug number="8180"/>. </add-note></build-id>
  <build-id value="3029"><add-note> The DML compiler now uses less memory when
    compiling large models. This
    also makes it slightly faster, but most importantly makes it possible to
    compile larger models without lots of RAM. </add-note></build-id>
  <build-id value="3031"><add-note> The dependency generation (with the
    <tt>-M</tt> flag to dmlc) has been
    improved. </add-note></build-id>
  <build-id value="3035"><add-note> The <tt>new</tt> operator on a pointer type
    no longer causes compilation
    errors in the C code <bug number="9209"/>. </add-note></build-id>
  <build-id value="3035"><add-note> The <tt>call default(...)</tt> syntax had a
    few problems that
    have been fixed <bug number="14708"/>. </add-note></build-id>
  <build-id value="3037"><add-note> A problem in the <tt>call default</tt>
    implementation was fixed
    <bug number="14793"/>. It required that the default implementation used
    the exact same names for the method parameters. </add-note></build-id>
  <build-id value="3046"><add-note> The <tt>evclass</tt> parameter in events is
    now documented
    <bug number="14447"/>. </add-note></build-id>
  <build-id value="3046"><add-note> DML 1.2 now supports arrays of ports <bug
    number="7546"/>. </add-note></build-id>
  <build-id value="3047"><add-note> The documentation of the standard templates
    use for making registers and
    fields constant was updated <bug number="14344"/>. </add-note></build-id>
  <build-id value="3502"><add-note> PCI support: config space access is no
    longer prevented by turning
    off the bus master enable bit <bug number="15524"/>. </add-note></build-id>
  <build-id value="3521"><add-note> It is now a compile-time error if a
    register field has
    no <fun>read</fun> or <fun>write</fun> method. For a register
    without fields, it is an error if the register itself has
    no <fun>read</fun> or <fun>write</fun> method
    <bug number="11350"/>. The DML language has always expected read
    and write methods to be present, and the behavior when they are
    missing was undefined. The updated DML compiler will now detect
    this error in models. Some models might need to be updated, and
    the simplest way to add read/write methods that do nothing is
    to use the <tt>read_zero</tt> and <tt>ignore_write</tt>
    templates, or some other variant such as <tt>read_only</tt>
    or <tt>write_only</tt>. </add-note></build-id>
  <build-id value="3522"><add-note> A new error message ENTYPE was added for
    some cases when the
    type of an expression is unknown.
    <bug number="12271"/>. </add-note></build-id>
  <build-id value="3530"><add-note> Fixed a problem that sometimes made the
    compiler crash if a
    parameter was given a value of the wrong type
    <bug number="12246"/>. </add-note></build-id>
  <build-id value="3534"><add-note> Registers inheriting the standard
    <tt>ignore</tt> template will no longer
    generate attributes and thus not checkpointed
    <bug number="16621"/>. </add-note></build-id>
  <build-id value="3539"><add-note> The <tt>pci_config_type_1</tt> standard
    template no longer
    hardcode <tt>header_type.mf</tt> field to 0, to comply with the
    PCI standard that allows multi-function bridges
    <bug number="16581"/>. </add-note></build-id>
  <build-id value="3539"><add-note> Fixed bug where legacy interrupts were
    stopped/discarded by PCIe bridge
    if interrupt disable bit was set. This bit only affects the bridge
    itself, and not interrupts passing through the bridge from the secondary
    side <bug number="16711"/>. </add-note></build-id>
  <build-id value="3540"><add-note> A bug that made dmlc crash when an
    <tt>event</tt> was placed inside
    a <tt>connect</tt> has been fixed
    <bug number="9388"/>. </add-note></build-id>
  <build-id value="3543"><add-note> Common PCI library code has now been ported
    to DML 1.2
    <bug number="16804"/>. </add-note></build-id>
  <build-id value="3544"><add-note> The common PCI library file
    <tt>pcie-to-pci.dml</tt> now
    supports bridging upstream PCI to PCIE transactions using the
    new pci_upstream interface. This is only used if the
    <tt>upstream-target</tt> attribute has been set <bug number="16973"/>.
    DML 1.2 only. </add-note></build-id>
  <build-id value="3546"><add-note> Templates and implementations of the
    interfaces <iface>pci_bridge</iface>
    and <iface>pci_interrupt</iface> now assert that the value for the
    interrupt <tt>pin</tt> is in the range 0 to 3. </add-note></build-id>
  <build-id value="4000"><add-note> DML 1.0 is now deprecated.  An attempt to
    compile a DML 1.0 file
    results in a warning; this can be suppressed by adding
    the <tt>--nowarn=WDEPRECATED</tt> flag
    to <tt>dmlc</tt>. </add-note></build-id>
  <build-id value="4000"><add-note> The library files
    <file>usb-dev-common.dml</file>
    and <file>usb-host.dml</file> have been upgraded from DML 1.0 to
    DML 1.2.  This causes compilation errors in any DML 1.0 device
    that imports this file.  As a temporary workaround, the versions
    of the library files from a Simics 4.4 installation can be
    copied into the directory of the device.  However, DML 1.0 is
    deprecated, so the proper way to solve this problem is to
    upgrade the device to DML 1.2.  </add-note></build-id>
  <build-id value="4000"><add-note> The log messages generated by the
    <tt>undocumented</tt> template
    changed type from <tt>undefined</tt>
    to <tt>spec_violation</tt>. </add-note></build-id>
  <build-id value="4005"><add-note> All named banks will now automatically
    implement the
    <iface>int_register</iface> interface, regardless of if they are
    mappable or not <bug number="15852"/>. </add-note></build-id>
  <build-id value="4008"><add-note> The <tt>read_only</tt> and
    <tt>write_only</tt> templates are now working
    as expected for registers with fields
    <bug number="16355"/>. Non-allocated fields must implement
    a <fun>get</fun> method in order to successfully use
    the <tt>read_only</tt> template, or get spec-violations for write access
    even if the value has not changed. </add-note></build-id>
  <build-id value="4009"><add-note> Added <tt>--werror</tt> to dmlc to turn all
    warnings into errors
    <bug number="14438"/>. </add-note></build-id>
  <build-id value="4009"><add-note> A new warning type WUNUSEDDEFAULT was added
    in order to warn
    when an object is not referenced anywhere but it matches a name of
    an object automatically referenced in another scope. This is the
    same as WUNUSED but only for known common errors such as adding an
    <fun>after_write</fun> method to a field. The warning type will
    never be emitted if WUNUSED is enabled
    <bug number="17312"/>. </add-note></build-id>
  <build-id value="4009"><add-note> The <tt>aer_cap_control.ece</tt> field of
    the advanced error reporting
    capability template is now <tt>read_write</tt> according to PCIe
    specification <bug number="17323"/>. </add-note></build-id>
  <build-id value="4011"><add-note> Split
    <tt>defining_pci_express_capability</tt> template into multiple
    templates for device, link, slot and root capabilities
    <bug number="17382"/>. </add-note></build-id>
  <build-id value="4012"><add-note> A DML compiler crash was fixed, occurring
    when using cast() expressions
    in some circumstances <bug number="17420"/>. </add-note></build-id>
  <build-id value="4012"><add-note> Using parameters overlapping = 1 and
    partial = false but making
    a partial write would cause all registers following the one
    written to in the bank to be overwritten, this is now fixed.
    <bug number="17423"/>. </add-note></build-id>
  <build-id value="4014"><add-note> Allow sizeof on layout members <bug
    number="8765"/>. </add-note></build-id>
  <build-id value="4017"><add-note> Fixed a DML compiler crash, occurring when
    documentation strings
    contain the <tt>%</tt> character
    <bug number="17420"/>. </add-note></build-id>
  <build-id value="4024"><add-note> Give a warning when a variable declared in
    a method's top-level
    scope shadows a parameter <bug number="17314"/>. </add-note></build-id>
  <build-id value="4024"><add-note> When a device posts an event with non-NULL
    user data, but no
    <fun>get_event_info</fun> method has been defined, an error log message
    will now be logged when the event is saved to a checkpoint.  This allow
    some device models to catch indeterministic behavior sooner
    <bug number="17699"/>. </add-note></build-id>
  <build-id value="4025"><add-note> When an device object is created,
    <fun>init()</fun> is now
    called before <fun>hard_reset()</fun> method. </add-note></build-id>
  <build-id value="4025"><add-note> Fix a bug in how nested register arrays are
    mapped over
    the <iface>io_memory</iface> interface
    <bug number="17729"/>. </add-note></build-id>
  <build-id value="4026"><add-note> Do not cause an internal compiler error
    (ICE) if a variable is
    declared with a type of "void" or "function"
    <bug number="17271"/>. </add-note></build-id>
  <build-id value="4031"><add-note> Gracefully signal errors instead of
    crashing on some invalid
    uses of arrays <bug number="17913"/>. </add-note></build-id>
  <build-id value="4032"><add-note> The standard library is now pre-parsed,
    which drastically
    improves the compile time of small DML files
    <bug number="17707"/>.</add-note></build-id>
  <build-id value="4034"><add-note> Generate the correct C code for simple
    assignments with nested
    layout objects <bug number="15295"/>. </add-note></build-id>
  <build-id value="4041"><add-note> Gracefully signal errors instead of
    crashing on the use of
    "undefined" log type with Simics API version 4.6 or later 
    <bug number="18204"/>. </add-note></build-id>
  <build-id value="4042"><add-note> Fix a bug in the attribute setter function
    so that the parameter
    can be referenced as a lvalue if the attribute itself is an
    array object <bug number="18234"/>. </add-note></build-id>
  <build-id value="4049"><add-note> In some places where previously only a
    single string literal was
    allowed, now multiple string literals concatenated with the '+' operator
    are permitted: the format string in <tt>log</tt> statements, the string
    in <tt>error</tt> statements and the description string in object
    declarations (registers, banks etc). In addition, the <tt>log</tt> and
    <tt>error</tt> statement strings can be surrounded by round brackets
    <bug number="3328"/>. Examples:
    <tt>log "info": ("x = %d" + " y = %d"), $x, $y;</tt>
    <tt>error "I saw" + " something nasty";</tt>
    <tt>register r1 size 4 @ 0 "some" +
    " description";</tt> </add-note></build-id>
  <build-id value="4056"><add-note> PCI library updated to provide improved
    register and field definitions
    for PCIe 3.0 capabilities and support new features like Resizable BAR
    Capability. Also makes it possible to disable writes to (some)
    unimplemented bits. </add-note></build-id>
  <build-id value="4062"><add-note> Generate the correct error message with
    source code location
    when an index variable is used as an expression in an incorrect
    context <bug number="18722"/>. </add-note></build-id>
  <build-id value="4062"><add-note> Fix a bug where a bad member selection
    expression, if appeared
    as the control expression of a switch statement, cause the
    compiler to crash with an internal compiler error (ICE)
    <bug number="18683"/>. </add-note></build-id>
  <build-id value="4063"><add-note> An error in the internal <tt>MASK</tt>
    macro used in the
    generated C code was corrected <bug number="18848"/>. It may
    have caused some C compilation warnings. A similar warning was
    quelled in the <tt>VADD</tt> macro. </add-note></build-id>
  <build-id value="4065"><add-note> The C code generated when using <tt>partial
    = true</tt> should
    no longer cause a gcc sign-compare warning when enabled
    <bug number="18888"/>. </add-note></build-id>
  <build-id value="4071"><add-note> PCI/PCIe: bridges based on pci-bridge.dml
    now implements their own
    interrupt handling code for incoming interrupts to be forwarded from the
    secondary bus to the primary. This is required in order to ignore the
    interrupt disable and interrupt status bits used by the common interrupt
    handling code provided by pci-common.dml for generic devices/EPs. The
    common code should only be used for interrupts originating from the
    bridge (device) itself, where the disable/status bits are applicable
    <bug number="16711"/>. </add-note></build-id>
  <build-id value="4072"><add-note> PCI/PCI: The type field of
    <tt>memory_base_address_64</tt> now correctly
    indicate 32/64-bit access depending on the return value
    of <fun>pci_bar_is_64</fun> function. Default is true, i.e. BAR is 64-bit
    <bug number="19017"/>. </add-note></build-id>
  <build-id value="4072"><add-note> A few sign-compare warnings were eliminated
    from the PCI libraries
    <bug number="18984"/>. </add-note></build-id>
  <build-id value="4078"><add-note> Do not crash on evaluation of expressions
    that should not depend
    on the index variable of array objects, for example, the
    expression of the <tt>size</tt> parameter of a register array
    <bug number="18308"/>. </add-note></build-id>
  <build-id value="4085"><add-note> The documentation for the
    <tt>configuration</tt> parameter
    of <em>connect</em> was updated to clarify its usage for array
    objects. See section 5.1.9 of <cite>Model Builder - DML
    1.2</cite> <bug number="19063"/>. </add-note></build-id>
  <build-id value="4085"><add-note> The documentation for the
    <tt>allocate_type</tt> parameter
    of <em>attribute</em> was updated to explicitly list the types
    that it supports automatically.  See section 5.1.4
    of <cite>Model Builder - DML 1.2</cite>
    <bug number="17815"/>. </add-note></build-id>
  <build-id value="4085"><add-note> Added two new templates:
    <tt>read_unimplemented</tt>
    and <tt>write_unimplemented</tt>, that work just
    like <tt>unimplemented</tt> template but only for the given type of
    access <bug number="14762"/>. </add-note></build-id>
  <build-id value="4094"><add-note> PCI/PCIe: when device is disconnected from
    the bus, the
    new <fun>pci_bus_disconnected</fun> method will be invoked making sure
    the device is reset and all its BAR mappings are removed from memory
    space <bug number="19702"/>. </add-note></build-id>
  <build-id value="4094"><add-note> PCI/PCIe: interrupt status bit is now
    always set when the device tries to
    raise an interrupt <bug number="19613"/>. The bit is cleared once all
    interrupts have been lowered. The interrupt disable bit does not affect
    the status bit, it only affects the interrupt signal. The status bit is
    only used for interrupts originating from the
    device itself. </add-note></build-id>
  <build-id value="4095"><add-note> A bug was fixed which prevented DMLC from
    detecting register
    offset overlappings for certain cases
    <bug number="19713"/>. </add-note></build-id>
  <build-id value="4097"><add-note> Added documentation for the mapping_setup
    attribute <bug number="17182"/>. </add-note></build-id>
  <build-id value="4500"><add-note> The format of the generated XML file that
    contains register
    information has been changed. Among others, the most noticeable
    change is that each register definition now generates only one
    element. Instances inside register arrays are represented by
    their offsets as an attribute of the corresponding register
    element. This helps reducing the size of the generated XML file
    dramatically for device models that contain a large number of
    register arrays <bug number="8737"/>. Another major change is
    that the XML file now only contains information of memory-mapped
    registers, i.e., information of internal registers that do not
    have their <tt>offset</tt> parameters defined are no longer
    generated in the XML file. </add-note></build-id>
  <build-id value="4500"><add-note> A new bank parameter,
    <tt>miss_pattern</tt>, was added to allow
    accesses where some bytes do not correspond to any mapped
    registers without generating an error
    <bug number="18674"/>. </add-note></build-id>
  <build-id value="4504"><add-note> The <tt>checkreserved</tt> template now
    gives a compile time
    error if applied to a field as this template is only applicable
    to registers <bug number="17343"/>. </add-note></build-id>
  <build-id value="4505"><add-note> Change the configuration of the secondary
    bus connect to be required, as
    the secondary bus should always be part of the bridge
    <bug number="19705"/>. </add-note></build-id>
  <build-id value="4506"><add-note> The string literal syntax has been
    specified more precisely, and
    now only includes escapes for double quote, backslash, newline,
    carriage return, tab and backspace (<tt>\&quot;</tt>, <tt>\\</tt>,
    <tt>\n</tt>, <tt>\r</tt>, <tt>\t</tt> and <tt>\b</tt>), as well
    as arbitrary bytes in hexadecimal notation (<tt>\xHH</tt>).
    Previously, most escape sequences had unpredictable effects;
    backslashes and carriage returns could not be included in
    strings at all <bug number="19250"/>. </add-note></build-id>
  <build-id value="4506"><add-note> Fixed a regression in pci-bridge.dml based
    models that does not connect
    the <tt>secondary_bus</tt> at instantiation <bug number="19705"/>. The
    regression caused these configuration to fail as the information from the
    pci-bus was never retrieved after <tt>secondary_bus</tt> attribute was 
    set. </add-note></build-id>
  <build-id value="4506"><add-note> Add register offset information in access
    log messages
    <bug number="19469"/>. </add-note></build-id>
  <build-id value="4507"><add-note> DML now supports the definition of bank
    arrays. For more details,
    please refers to the <cite>Language Reference Manual - DML 1.2 </cite>
    <bug number="10032"/>. </add-note></build-id>
  <build-id value="4507"><add-note> Fixed a bug of the compiler that
    incorrectly interprets indexed
    register reference as an integer value when the expression is
    evaluated statically <bug number="19876"/>. </add-note></build-id>
  <build-id value="4507"><add-note> DML 1.0 is no longer supported. Code
    written in DML 1.0 has to
    be manually converted into DML 1.2. Please refer to
    the <cite>Model Builder - DML 1.2</cite> Reference Manual for
    how to do the 1.0 -> 1.2 conversion. </add-note></build-id>
  <build-id value="4509"><add-note> There is now a syntax for single-quoted
    character literals, yielding
    an integer value. Only printable ASCII characters and the escape
    sequences <tt>\'</tt>, <tt>\\</tt>, <tt>\n</tt>, <tt>\r</tt>,
    <tt>\t</tt> and <tt>\b</tt> are allowed
    <bug number="5616"/>. </add-note></build-id>
  <build-id value="4512"><add-note> PCI/PCIe: Fixed incorrect offset of
    <tt>pending_bits</tt> register array
    in the MSI-X PBA templates, resolving a compilation error that occurs
    when the number of interrupt vectors is larger than 64
    <bug number="20069"/>. </add-note></build-id>
  <build-id value="4514"><add-note> Bit slicing expressions that produce zero
    bits are now treated as errors
    the same way as of negative-sized bitslices. The behavior is undefined
    and will trigger a compilation error if the range of the resulting
    bitslice is known at compile time <bug number="500453"/>,
    <bug number="11464"/>. </add-note></build-id>
  <build-id value="4514"><add-note> The default value of the bank parameter
    <tt>pci_miss_pattern</tt> has
    been re-defined from 0 to "undefined" to maintain backward compatibility
    with code compiled with the 4.6 API
    <bug number="20125"/>. </add-note></build-id>
  <build-id value="4517"><add-note> A new warning, <tt>WNDOCRA</tt>, will warn
    for required
    attributes or connectors that are undocumented
    <bug number="16569"/>. </add-note></build-id>
  <build-id value="4517"><add-note> The old PCI library has been fully reverted
    to make it identical to the
    4.6 library <bug number="20308"/>. The following changes have been
    reverted and are now only available using the new PCI library
    from <tt>dml-lib</tt> module:
    <ul>
    <li>The definition of the vga16d field in the bridge_control register,
    used by pci-bridge.dml when creating the VGA IO mappings across the
    bridge between the primary and secondary bus. As the bit is missing,
    VGA 16-bit decode is not fully supported <bug number="20302"/>.</li>
    <li>The secondary_bus connect-attribute should be required
    <bug number="19705"/>. In 4.6 it is optional, allowing some sort of
    hot-plugging of the secondary bus. This is illogical and should not
    be exploited.</li>
    <li>The interrupt routing for legacy interrupts has been improved in
    4.8 w.r.t. bridges, allowing proper sharing of interrupts
    <bug number="19470"/>.</li>
    <li>To support access at undefined addresses in configuration space,
    the new miss_pattern feature in 4.8 was made available to the old PCI
    library as well but defined as disabled by default. Setting
    <tt>pci_miss_pattern</tt> parameter to 0 will not work in the old
    library after reverting this change. Users must now explicitly add
    the <tt>miss_pattern</tt> parameter or use the new library.</li>
    </ul> </add-note></build-id>
  <build-id value="4519"><add-note> Looping over pre-defined register lists in
    a bank array would be
    expanded to registers in the whole array instead of just the
    indexed bank. This has been fixed
    <bug number="20328"/>. </add-note></build-id>
  <build-id value="4522"><add-note> The compiler will now emit an error when
    trying to compile or
    import a DML 1.0 file <bug number="19860"/>. </add-note></build-id>
  <build-id value="4523"><add-note> Report an error instead of crashing when
    two <em>data</em>
    objects are declared with the same name in the same scope
    <bug number="500185"/>. </add-note></build-id>
  <build-id value="4525"><add-note> It is now possible to use
    <em>constant</em>s to specify the size
    of arrays at the top level <bug number="500277"/>,
    <bug number="6030"/>. Example:
    <pre>
    constant N = 8;
    struct s {
    uint32 arr[N];
    ...
    }
    </pre> </add-note></build-id>
  <build-id value="4530"><add-note> DMLC now automatically generates the
    documentation of the required
    interfaces for each of <em>connect</em> object. </add-note></build-id>
  <build-id value="4531"><add-note> A new attribute "bitorder" is added to the
    device element of
    the generated XML file <bug number="500861"/>. </add-note></build-id>
  <build-id value="4532"><add-note> An incompatibility was introduced, causing
    DMLC to break when
    used together with Simics-Base 4.8.20 or older. The
    incompatibility is bidirectional; DMLC from Model-Builder 4.8.14
    or older does not work together with new versions of the
    Simics-Base package <bug number="300067"/>
    <bug number="501031"/>. </add-note></build-id>
  <build-id value="4532"><add-note> Error and warning messages from DMLC now
    include column numbers
    in addition to line numbers. </add-note></build-id>
  <build-id value="4532"><add-note> Fixed a bug that caused DMLC to crash when
    the <cmd>-g</cmd>
    parameter is passed <bug number="500914"/>. As part of the fix,
    an obscure undocumented language feature (passing constants in
    method output parameters) has been removed. </add-note></build-id>
  <build-id value="4535"><add-note> Fixed an incompatibility with old versions
    of Extension-Builder:
    DMLC from Model-Builder 4.8.15 did not work together with
    Extension-Builder 4.8.7 or older <bug number="300067"/>
    <bug number="501031"/>. </add-note></build-id>
  <build-id value="4539"><add-note> Error and warning messages that are
    triggered from within
    template are now presented along with the <tt>is</tt> statements
    leading to template instantiation
    <bug number="20809"/>. </add-note></build-id>
  <build-id value="4539"><add-note> Compile-time warnings will now be emitted
    when a <fun>read</fun>
    or <fun>write</fun> method in a register is overridden but not
    used. This can typically happen in a register with fields, or in
    an unmapped register.
    The warning message indicates a model bug, where the developer
    intended the <fun>read</fun> or <fun>write</fun> method to be
    called automatically on register accesses. In some rare cases it
    is nontrivial to fix this; one example is when a <fun>read</fun>
    or <fun>write</fun> method is defined by a template which is
    applied both to registers with and without fields. In such
    cases, the warning can be suppressed by
    passing <tt>--nowarn=WUNUSEDDEFAULT</tt> to DMLC
    <bug number="500203"/>. </add-note></build-id>
  <build-id value="4539"><add-note> The <tt>write_only</tt> template will now
    emit a compile-time
    warning when applied to a field. The template works just like
    the <tt>read_zero</tt> template on fields, and "read zero"
    describes much better what the template does in this case.
    Therefore, we recommend that existing uses
    of <tt>write_only</tt> on fields are replaced
    with <tt>read_zero</tt> <bug number="20283"/>.</add-note></build-id>
  <build-id value="4539"><add-note> The <tt>ignore_write</tt> template will now
    ignore the write
    also when applied to a register with fields
    <bug number="20825"/>. </add-note></build-id>
  <build-id value="4539"><add-note> The <tt>unimplemented</tt> template will
    now cause a message to
    appear also when used on a register with fields. Using
    the <tt>unimplemented</tt> template on both a register and one
    of its fields will now cause a compile-time warning
    <bug number="300083"/>. </add-note></build-id>
  <build-id value="4541"><add-note> Documentation was updated regarding to the
    auto-generated
    <iface>int_register</iface> interface
    <bug number="500879"/>. </add-note></build-id>
  <build-id value="4543"><add-note> The semantics of how DMLC treats
    unmapped/misaligned memory
    accesses has been slightly changed which may cause incompatibility
    in some corner cases if the user code happens to rely on such
    undefined behaviors <bug number="300062"/>. </add-note></build-id>
  <build-id value="4544"><add-note> Underscores (<tt>_</tt>) are now permitted
    inside integer
    literals as a digit group separator for improved readability
    <bug number="20940"/>. </add-note></build-id>
  <build-id value="4544"><add-note> A certain class of parameter references,
    which previously
    yielded undefined behaviour, are now explicitly forbidden
    and will yield a compile error.
    The new restriction applies to expressions that are evaluated
    early, such as the condition of an object-level if statement, or
    the size of an object array. Such expressions are now only
    allowed to access parameters that are directly accessible in
    enclosing scopes; no sibling objects may be accessed. For
    example, the following is now forbidden, because the if
    statement in <tt>b.r</tt> accesses the sibling
    object <tt>p</tt>:
    <pre>
    bank b {
    register p {
    parameter use_x = true;
    }
    register r {
    if ($p.use_x) {
    method x() { ... }
    }
    }
    </pre>
    Violations of this new restriction can be fixed by moving the
    shared parameter to the closest common ancestor of all usages;
    in this example by moving the use_x parameter to the bank's
    scope <bug number="501078"/>. </add-note></build-id>
  <build-id value="4548"><add-note> Added support for event arrays <bug
    number="500383"/>. </add-note></build-id>
  <build-id value="4548"><add-note> Log statement types can now be specified as
    one of the identifiers
    <tt>info</tt>, <tt>error</tt>, <tt>spec_viol</tt> and 
    <tt>unimpl</tt> without having to be enclosed in quotation marks
    <bug number="21061"/>. </add-note></build-id>
  <build-id value="4550"><add-note> It is now possible to provide default
    values for <em>data</em>
    objects at the places where they are declared with proper
    initializers <bug number="2566"/>. Example:
    <pre>
    int da[4] = {0, 1, 2, 3};
    </pre>
    Initializers for local and static variables are also extended to
    support compound data structures. Example:
    <pre>
    local struct {
    bool b;
    int ia[2];
    } s = {true, {1, 2}};
    </pre> </add-note></build-id>
  <build-id value="4553"><add-note> The <tt>offset</tt> parameter i registers
    are now allowed to
    refer to parameters anywhere in the device. Previously, access
    was only permitted to parameters within the same bank, and top-level
    parameters <bug number="501078"/>.
    <bug number="301078"/>. </add-note></build-id>
  <build-id value="4554"><add-note> DMLC now gives explicit errors when
    incorrect values are
    assigned to any of the bank
    parameters <tt>byte_order</tt>, <tt>overlapping</tt>
    or <tt>partial</tt> <bug number="21209"/>. </add-note></build-id>
  <build-id value="4555"><add-note> Portions of register banks above byte
    offset
    <math>2<sup>32</sup></math> could not be accessed; this has now
    been fixed <bug number="300131"/>. </add-note></build-id>
  <build-id value="4557"><add-note> Some internal logic related to constant
    propagation of
    expressions changed.  In particular, DMLC no longer does
    constant propagation on expressions that contain non-constant
    elements. This fixes some minor bugs (incorrect optimizations
    yielding broken code), but can in theory cause compile errors on
    existing code.
    Two examples:
    <ul>
    <li>The statement
    <tt>if (x - x != 0) error;</tt> was previously completely
    eliminated by constant propagation; now it will yield a
    compile error because the <tt>error</tt> statement is not
    eliminated.</li>
    <li>Previously a bitslice <tt>x[i:i]</tt>, where x and i are
    32-bit integers, would yield a value of type uint1, because
    DMLC could realize that the least and most significant bit
    were the same. Now this is not the case; instead a 32-bit
    integer will be returned. This change can break existing
    code, because one-bit integers can be used as boolean
    expressions, while 32-bit integers can not.</li></ul>
    If a compile error is introduced by this compiler change, then
    the fix is most likely to manually simplify the violating
    expression. For example, a one-bit bitslicing
    expression <tt>x[i:i]</tt> can be replaced with the
    corresponding bit indexing expression <tt>x[i]</tt>. </add-note></build-id>
  <build-id value="4557"><add-note> The <em>log</em> statement now supports the
    <tt>critical</tt>
    logging type <bug number="501238"/>. </add-note></build-id>
  <build-id value="4559"><add-note> The representation of a device in
    DML-generated C code changed
    slightly. This should not affect well-written DML code, but
    might break code that relies on undocumented aspects of the
    DML-generated <tt>.h</tt> files. </add-note></build-id>
  <build-id value="4560"><add-note> Avoid a DMLC crash when using certain
    experimental features
    <bug number="501203"/>.</add-note></build-id>
  <build-id value="4564"><add-note> Fixed a bug that caused error to be
    reported when compiling with
    the <tt>-g</tt> switch <bug number="501313"/>. </add-note></build-id>
  <build-id value="4565"><add-note> Report an error instead of crashing on
    certain error conditions
    related to the <tt>desc</tt> parameter
    <bug number="501322"/>. </add-note></build-id>
  <build-id value="4574"><add-note> The dependency generation mechanism of DMLC
    has improved. This
    allows DMLC and gcc to be invoked in parallel in a module
    with multiple DML files <bug number="300145"/>. </add-note></build-id>
  <build-id value="4582"><add-note> DML exceptions in <tt>init()</tt> and
    <tt>hard_reset()</tt> will
    now result in a Simics frontend exception and the object will
    not be created. Before, it only printed an error message and the
    object would still be created <bug number="21795"/>. </add-note></build-id>
  <build-id value="4598"><add-note> The <tt>WASSERT</tt> warning message has
    been removed. The
    message does not make much sense. The message was previously
    disabled by default, so the change only affects users
    who explicitly pass <tt>--warn=WASSERT</tt> to DMLC. </add-note></build-id>
  <build-id value="4598"><add-note> A subtle bug in code generation was fixed
    <bug number="21866"/>. The bug only affected direct uses of the
    C functions generated from methods (e.g., using methods as C
    callbacks, rather than invoking them with a <tt>call
    statement</tt>). The bug caused method output parameters to be
    clobbered when a method throws. </add-note></build-id>
  <build-id value="4602"><add-note> Compiling targets with debug information
    caused DMLC to crash
    with an internal error. This has been fixed
    <bug number="501606"/>. </add-note></build-id>
  <build-id value="5000"><add-note> The order in which <fun>init</fun> and
    <fun>hard_reset</fun> are
    called during object instantiation has been
    reversed; <fun>hard_reset</fun> is now called
    after <fun>init</fun> <bug number="500449"/>.
    The change may cause code to break; in particular,
    if <fun>init</fun> initializes a register value, then
    the <fun>hard_reset</fun> call will immediately restore the
    value to its <tt>hard_reset_value</tt>. If the intent of such
    code is to provide different values on instantiation and manual
    hard reset, then a better approach is to override the
    register's <tt>hard_reset</tt> method, and use the
    condition <tt>SIM_object_is_configured($dev.obj)</tt> to deduce
    whether the hard reset was manual. </add-note></build-id>
  <build-id value="5000"><add-note> An uncaught exception in the <fun>get</fun>
    or <fun>get_attribute</fun> method of
    an <tt>attribute</tt>, <tt>connect</tt> or
    <tt>register</tt> object will now cause a checkpoint save to
    fail with a proper error message. Previously, it caused the
    attribute to be silently omitted from checkpoints
    <bug number="21807"/>. </add-note></build-id>
  <build-id value="5001"><add-note> Several DML 1.2 files have been removed,
    since they were only delegates
    to other files, fixing <bug number="19854"/>. The complete file list is
    given in the migration guide. </add-note></build-id>
  <build-id value="5002"><add-note> DMLC no longer skips the body of a
    <tt>do/while</tt> statement if
    the control expression evaluates to <i>false</i> at compilation time
    <bug number="300295"/>. </add-note></build-id>
  <build-id value="5004"><add-note> Fixed a bug that upon an error sometimes
    could raise a Python exception
    <bug number="300309"/>. </add-note></build-id>
  <build-id value="5007"><add-note> <tt>log "critical": ...</tt> is now
    recognized as a valid
    statement <bug number="501697"/>. </add-note></build-id>
  <build-id value="5026"><add-note> When using the <tt>cast</tt> operator to
    cast a large integer
    constant to a smaller size, the integer value is now truncated
    properly to the given integer size. Previously, it was not
    <bug number="23190"/>. </add-note></build-id>
  <build-id value="5026"><add-note> Configuration attributes are now registered
    in a different order
    than before. The order is, just like before, considered
    undefined. The attribute registration order affects in which
    order attributes are restored when loading a checkpoint and
    during reverse execution, and in which order attributes are
    initialized when a new object is created.
    The result of the change is that a model that relies on a
    particular attribute order, but which used to work with previous
    versions of DMLC, may get incorrect checkpoint load behaviour
    when compiled with a new DMLC version.
    If this happens, the best solution is to rewrite the model, to
    remove the dependency between attributes. </add-note></build-id>
  <build-id value="5026"><add-note> The implementation of how unused parameter
    values are
    error-checked has changed. In most cases the error-checking
    works as before (i.e., broken references to global scope, i.e.,
    not using <tt>$</tt>, are caught, while broken object
    references, using <tt>$</tt>, are ignored). However, new errors
    may reported for certain less common kinds
    of errors. </add-note></build-id>
  <build-id value="5026"><add-note> DMLC now gives a compile error if a
    templates instantiates
    itself, either directly or via another template. For example,
    the following is now considered an error:  <pre>
    template a {
    is b;
    parameter p = 1;
    }
    template b {
    is a;
    parameter q = 2;
    }
    </pre>
    Previously, this was tolerated, and made <tt>a</tt>
    and <tt>b</tt> equivalent; both templates would define both the
    parameters <tt>p</tt> and <tt>q</tt>. Whenever this happens, the code
    can be transformed by breaking the cycle and moving all declarations
    into one template: <pre>
    template a {
    parameter p = 1;
    parameter q = 2;
    }
    template b {
    is a;
    }
    </pre> </add-note></build-id>
  <build-id value="5026"><add-note> DMLC now gives a compile error if a DML
    file tries to import
    itself, either directly or via some other imported file. This is
    analogous to the new compile errors reported for cyclic template
    instantiation. </add-note></build-id>
  <build-id value="5026"><add-note> Array declarations on the form <tt>register
    [<v>var</v>
    in <v>start</v>..<v>end</v>]</tt> now require
    that <v>start</v> is literally <tt>0</tt>. Previously, constant
    expressions evaluating to zero, such as <tt>18-18</tt>, were
    also tolerated, but totally pointless. </add-note></build-id>
  <build-id value="5026"><add-note> Two mistakes in the DML grammar have been
    corrected
    <bug number="11935"/>: <ul>
    <li>The expression <tt>&amp;a + 1</tt> was previously parsed
    as <tt>&amp;(a + 1)</tt>, giving a compile error. It is now
    correctly parsed as <tt>(&amp;a) + 1</tt>.</li>
    <li>The expression <tt>-a * b</tt> was previously parsed
    as <tt>-(a * b)</tt>, and is now parsed as <tt>(-a) *
    b</tt>. This may affect the result under certain overflow
    conditions.</li>
    </ul> </add-note></build-id>
  <build-id value="5029"><add-note> Fixed a regression in how source locations
    are presented by
    DMLC in error messages <bug number="300379"/>. </add-note></build-id>
  <build-id value="5031"><add-note> The definition of struct
    <tt>x86_memory_transaction_t</tt> is
    now properly imported in <file>simics/arch/x86.dml</file>
    <bug number="300277"/>. </add-note></build-id>
  <build-id value="5033"><add-note> DMLC may emit struct definitions with
    incorrect orders regarding
    their dependencies in certain cases. This has been fixed
    <bug number="23379"/>. </add-note></build-id>
  <build-id value="5042"><add-note> DMLC now emits a compile error (ERECPARAM)
    if a parameter references
    itself recursively <bug number="SIMINT-170"/>. </add-note></build-id>
  <build-id value="5054"><add-note> Fixed a bug in DMLC that in some cases
    produced broken guard symbols in
    header files <bug number="300428"/>. </add-note></build-id>
  <build-id value="5075"><add-note> Bit-manipulation operations (~, &amp;, |,
    ^, &lt;&lt;, &gt;&gt;,
    &amp;=, |=, ^=) now support operands of <tt>bitfields</tt> type
    <bug number="SIMINT-447"/>. </add-note></build-id>
  <build-id value="5079"><add-note> Fixed a crash when <tt>sizeoftype</tt> is
    used in
    a <tt>constant</tt> declaration <bug number="SIMINT-362"/>.
    When using old versions of the Eclipse DML editor (4.8.80 or
    earlier) together with this version of Model-Builder or newer,
    the editor may incorrectly report errors on
    the <type>size_t</type> type. </add-note></build-id>
  <build-id value="5079"><add-note> Fixed a crash when access
    <type>double</type> member in <tt>const</tt>
    <type>struct</type> <bug number="SIMINT-190"/>. </add-note></build-id>
  <build-id value="5079"><add-note> Fixed a bug in the handling of
    <tt>const</tt> declared typedefs
    <bug number="24069"/>. </add-note></build-id>
  <build-id value="5082"><add-note> Fixed a DMLC crash for an exotic use case
    <bug number="300512"/>. </add-note></build-id>
  <build-id value="5082"><add-note> Fixed a crash when access
    <type>double</type> member in <tt>const</tt>
    <type>struct</type> <bug number="SIMINT-190"/>. </add-note></build-id>
  <build-id value="5085"><add-note> The compiler's handling of dead code has
    undergone some internal
    restructuring. This should have no effect on normal use;
    however, errors will sometimes be reported on code which was
    previously accepted:
    <ul>
    <li>
    If an unused parameter refers to a non-existing object, then
    a new warning WREF will be reported. This warning is enabled
    by default, and can be suppressed with
    the <tt>--no-warn=WREF</tt> command-line option.
    In future major versions of Simics, this will be turned into
    a hard error that cannot be suppressed.
    </li>
    <li>
    DMLC may now report errors for previously tolerated
    expressions on the form <tt>!<v>expr</v></tt>,
    where <v>expr</v> is an integer expression. Such errors are
    fixed by replacing <tt>!<v>expr</v></tt> with <tt>expr ==
    0</tt>. DML generally forbids the use of integer expressions
    as booleans, but the typecheck was previously incomplete.
    </li>
    <li>A compile-time list
    expression on the form <tt>[$<v>x</v>[<v>i</v>]]</tt>,
    where <tt><v>x</v></tt> is a <tt>data</tt> object
    and <tt><v>i</v></tt> is any integer expression, will now give a
    compile error. Previously, expressions on exactly that form
    slipped through an error check, where errors were reported for
    other very similar expressions.
    </li>
    </ul> </add-note></build-id>
  <build-id value="5085"><add-note> Fixed a bug that sometimes caused
    <tt>&amp;&amp;</tt> and <tt>||</tt>
    expressions to be reduced to constants when the right operand
    was a constant but the left operand was not
    <bug number="24107"/>. </add-note></build-id>
  <build-id value="5085"><add-note> Fixed a crash when a <tt>typedef</tt>
    defines a pointer type
    <bug number="24169"/>. </add-note></build-id>
  <build-id value="5086"><add-note> Temporarily silence errors for expressions
    on the
    form <tt>!<v>integer-expression</v></tt>, to avoid disruptive
    build errors on existing code
    <bug number="SIMINT-498"/>. </add-note></build-id>
  <build-id value="5096"><add-note> Code generation for banks and registers has
    been improved. This
    can significantly reduce the compile time for devices with many
    (several hundred) registers. </add-note></build-id>
  <build-id value="5096"><add-note> The internal order of a bank's
    <tt>mapped_registers</tt>
    parameter was previously documented to be ordered by
    offset. This was not true; the actual order was largely
    undefined and unpredictable. The documentation has been updated
    to reflect this. </add-note></build-id>
  <build-id value="5096"><add-note> The order of the <tt>mapped_registers</tt>
    parameter of banks
    has changed. This affects (among other things) in which order
    the bank invokes the <fun>hard_reset</fun>
    and <fun>soft_reset</fun> methods in its registers. The
    invocation order of those methods is undefined, just like
    before. </add-note></build-id>
  <build-id value="5096"><add-note> Fixed a bug that in some uncommon cases
    caused certain registers
    in multi-dimensional arrays to be excluded from the register map
    <bug number="24344"/>. </add-note></build-id>
  <build-id value="5096"><add-note> Fixed a bug in how overlapping writes are
    handled in banks
    with <tt>overlapping=false</tt>
    and <tt>byte_order="big-endian"</tt>; previously, this caused a
    write with an incorrect value before the overlapping violation
    was detected <bug number="24344"/>. </add-note></build-id>
  <build-id value="5102"><add-note> Fixed a bug in register mapping, which
    caused register accesses
    to fail in banks containing a register with negative offset
    <bug number="1804732386"/>. </add-note></build-id>
  <build-id value="5102"><add-note> DMLC will now emit a warning if a register
    declares a negative offset
    <bug number="1804732386"/>. </add-note></build-id>
  <build-id value="5105"><add-note> Fixed a DMLC crash for bank arrays of
    length 1 <bug number="24593"/>. </add-note></build-id>
  <build-id value="5110"><add-note> Fixed a DMLC crash for DML files with
    hundreds of typedefs
    <bug number="1209919840"/>. </add-note></build-id>
  <build-id value="5114"><add-note> Avoid warnings for outdated AST files,
    which could happen after
    manually copying a Simics installation on a slow filesystem
    <bug number="17707"/>. </add-note></build-id>
  <build-id value="5125"><add-note> Fixed a bug that caused incorrect behaviour
    in inlined methods
    when running <tt>dmlc</tt> with the <tt>-g</tt> flag
    <bug number="1805172075"/>. </add-note></build-id>
  <build-id value="5161"><add-note> Fixed a bug that could cause DMLC to crash
    when accessing the
    implicit field of a register without explicit fields
    <bug number="1806043154"/>. </add-note></build-id>
  <build-id value="5161"><add-note> Fixed a bug that sometimes caused incorrect
    results for
    multiplication with a zero constant. </add-note></build-id>
  <build-id value="5169"><add-note> Fixed a bug that caused DMLC to crash when
    a linked list struct
    type is declared with a <tt>const</tt> declared next pointer
    <bug number="25178"/>. </add-note></build-id>
  <build-id value="5169"><add-note> Fixed a bug that caused a compile error
    when defining the
    <param>function</param> parameter correctly in a bank array
    <bug number="24995"/>.
    This change may introduce a compile error in existing code:
    Before the change, DMLC incorrectly permitted a bank array to
    use a constant function number across all indices, causing
    incorrect behaviour. This now gives a compile error. If this
    happens, the <param>function</param> parameter in a bank array
    must be changed to depend on the index variable. For instance,
    if a bank array has <tt>parameter function = 4</tt>, then this
    should be changed to something like <tt>parameter function = 4 +
    $i</tt>. </add-note></build-id>
  <build-id value="5178"><add-note> Fixed a bug in attribute setters: If an
    attribute setter method
    detects an invalid value, then that error was sometimes silently
    suppressed <bug number="SIMICS-10640"/>. This bug fix will cause
    devices to give earlier and cleaner error messages when
    misconfigured. </add-note></build-id>
  <build-id value="5188"><add-note> Let DML banks implement the
    <iface>register_view</iface> interface. </add-note></build-id>
  <build-id value="6004"><add-note> The syntaxes for template instantiation in
    object declarations
    and in standalone statements have been unified; you can now
    write:
    <tt>register r is read_only { ... }</tt> to instantiate a single
    template and <tt>is (read_only, write_unimplemented);</tt> to
    instantiate two templates.
    Also, templates and traits now permit <tt>is</tt> before the
    opening brace, just like object declarations do. </add-note></build-id>
  <build-id value="6005"><add-note> The binary
    <file><v>&lt;host&gt;</v>/bin/dmlc</file> has been
    replaced with the script <file>scripts/dmlc.py</file>. This is
    considered an internal change; from a user's perspective, the
    entry point of DMLC is still <file>bin/dmlc</file> </add-note></build-id>
  <build-id value="6006"><add-note> The type produced by the <tt>&lt;&lt;</tt>
    operator is now
    always <tt>uint64</tt> unless both operands are
    constant. Previously, the result could sometimes be a
    signed <tt>int</tt>, which could lead to unexpected sign
    extension when assigning the result to a <tt>uint64</tt>
    variable. </add-note></build-id>
  <build-id value="6007"><add-note> Restrictions have been lifted on what
    values can be assigned to
    a <tt>bitfields</tt> variable: Previously, only integer values
    small enough to fit in the bitfield size were permitted; now we
    permit assignment of any integer value, and truncate upon
    overflow.
    This eliminates some compile errors that were introduced by
    changes in Simics-Base 5.0.180. </add-note></build-id>
  <build-id value="6008"><add-note> In the <file>io-memory.dml</file> standard
    library file,
    the <fun>operation</fun> method is now marked <tt>default</tt>
    <bug number="1507149841"/>. </add-note></build-id>
  <build-id value="6008"><add-note> A new parameter <tt>dml_1_2</tt> has been
    added to device
    scope. The parameter is true, but will be false in future
    versions of the language. </add-note></build-id>
  <build-id value="6008"><add-note> The semantics of a <tt>select</tt>
    statement has changed to
    report errors less often in dead code. In particular,
    the <tt>else</tt> clause may now contain an <tt>error</tt>
    statement to get a compile-time check that the <tt>where</tt>
    expression was satisfied. </add-note></build-id>
  <build-id value="6010"><add-note> Fixed a bug that caused a crash with the
    deprecated <tt>-M</tt> flag </add-note></build-id>
  <build-id value="6012"><add-note> Upon object instantiation, required
    attributes inside banks can
    now be set through the compatibility
    attribute <tt><v>bank</v>_<v>attr</v></tt> in the device upon
    object creation. Previously, required attributes had to be set
    directly on the bank object
    <bug number="2207518293"/>. </add-note></build-id>
  <build-id value="6012"><add-note> Initial release of DML version 1.4. The new
    language version is
    documented in the <em>DML 1.4 reference manual</em>
    document. Some highlights:
    <dl>
    <dt>Better compilation performance</dt><dd>2-3 times faster
    compile for devices with large register banks</dd>
    <dt>Improved reset support</dt><dd>The reset mechanism in 1.4
    is not hard-coded, and can be adapted to different reset
    flows</dd>
    <dt>Templates as types</dt><dd>You can pass around references to
    banks/registers/fields etc in variables</dd>
    <dt>Multiple levels of overrides</dt><dd>Methods and
    parameters can be overridden any number of times. In 1.2,
    this is often prevented by standard library legacy.</dd>
    <dt>Syntax simplification</dt><dd>Many adjustments to improve
    readability; for instance, removal of <tt>$</tt> and C-like
    method syntax</dd>
    <dt>Standard library API simplification</dt><dd>Clearer API,
    easier to understand</dd>
    <dt>Updated language semantics</dt><dd>More consistent and
    well-specified behaviour of method bodies and expressions,
    providing more predictable model behaviour</dd>
    </dl> </add-note></build-id>
  <build-id value="6015"><add-note> Improved information provided by EATTRDATA
    error message. </add-note></build-id>
  <build-id value="6022"><add-note> The bank instrumentation framework no
    longer invokes callbacks
    on inquiry accesses. </add-note></build-id>
  <build-id value="6022"><add-note> Fix issue where the inquiry flag of memory
    operation was
    modified when the inquire function of the bank instrumentation
    framework was invoked. This could cause unnecessary trouble for
    users that recycle memory operations. </add-note></build-id>
  <build-id value="6026"><add-note> Improved how inline method arguments are
    handled when porting
    a device from DML 1.2 to 1.4. </add-note></build-id>
  <build-id value="6026"><add-note> It is now permitted to have
    <tt>connect</tt> objects inside banks. </add-note></build-id>
  <build-id value="6026"><add-note> Fixed various bugs that caused crashes and
    errors for inlined
    methods, in particular when mixing DML 1.2 and DML
    1.4 code. </add-note></build-id>
  <build-id value="6028"><add-note> Multi-dimensional register, attribute,
    group, connect, event,
    bank, port, and implement arrays are now available. </add-note></build-id>
  <build-id value="6028"><add-note> Add support to <tt>header</tt> sections for
    including a <tt>.h</tt>
    file relative to the currently imported DML file
    <bug number="2209645860"/>. </add-note></build-id>
  <build-id value="6030"><add-note> Fixed a bug where the
    <tt>DMLDIR_<v>&lt;name&gt;</v>_H</tt> macro was
    undefined when generating dependency files. </add-note></build-id>
  <build-id value="6032"><add-note> DMLC will now report a syntax error if a
    DML file contains any
    invalid UTF-8 characters. Previously, invalid UTF-8 characters
    were ignored in comments. </add-note></build-id>
  <build-id value="6032"><add-note> The parameters <tt>desc</tt> and
    <tt>documentation</tt>
    are now required to be correctly encoded as UTF-8. </add-note></build-id>
  <build-id value="6036"><add-note> Adjusted DMLC code generation to silence
    false positives
    reported on <file>dml-builtins.dml</file> when analysing
    DMLC-generated C code using the Synopsis&reg; Coverity&reg;
    static analysis tool. </add-note></build-id>
  <build-id value="6044"><add-note> Improved some error messages <bug
    number="SIMICS-15552"/>.</add-note></build-id>
  <build-id value="6044"><add-note> Added some rules to permit DML 1.4 methods
    to call 1.2 methods
    without a <tt>try</tt>/<tt>catch</tt> block in some common
    cases. Details are documented with the <tt>EBADFAIL_dml12</tt>
    error message. </add-note></build-id>
  <build-id value="6044"><add-note> When using DML 1.4 attribute templates,
    such
    as <tt>bool_attr</tt>, from a 1.2 device
    through <tt>dml12-compatibility.dml</tt>, the <fun>get</fun>
    method is no longer marked as <tt>throws</tt>. </add-note></build-id>
  <build-id value="6046"><add-note> Improved compatibility between DML 1.2 and
    1.4: The experimental
    <tt>dml12-compatibility.dml</tt> file now provides default
    implementations of
    methods <fun>read_register</fun>, <fun>write_register</fun>,
    <fun>read_field</fun>, <fun>write_field</fun>
    and <fun>io_memory_access</fun>.
    When overriding these methods in a DML 1.4 file, there are templates
    <tt>dml12_compat_read_register</tt>, <tt>dml12_compat_write_register</tt>
    etc that will make sure the overrides are invoked if the file is
    imported from DML 1.2. </add-note></build-id>
  <build-id value="6046"><add-note> The <tt>port-dml</tt> script now accepts an
    argument <tt>--compat</tt> to generate 1.4 code that works
    better when imported from DML 1.2. The resulting code is less
    clean, so it should only be used on code that needs to retain
    1.2 compatibility for some time. </add-note></build-id>
  <build-id value="6049"><add-note> The endian class of integer types are now
    available. These look
    like <tt>[u]intX_(be|le)_t</tt> (where X is a multiple of 8, up to 64)
    and describe an integer of the specified size with the specified byteorder
    and natural alignment of 1 byte. These can be transparently used as if
    they were regular <tt>[u]intX</tt>s in calculations
    <bug number="SIMICS-7603"/>. </add-note></build-id>
  <build-id value="6052"><add-note> Fixed an issue where typedeffed bitfields
    would get the incorrect size
    in layouts. </add-note></build-id>
  <build-id value="6053"><add-note> Added a script <tt>bin/port-dml-module</tt>
    to port all devices
    in one Simics module to DML 1.4. </add-note></build-id>
  <build-id value="6053"><add-note> The types <tt>long</tt>, <tt>ulong</tt>,
    <tt>size_t</tt>
    and <tt>ssize_t</tt> now correspond to the correct C types. For
    instance, on Linux, both the <tt>long</tt> and <tt>int64</tt>
    types are signed 64-bit integers, yet C considers them
    incompatible and refuses to assign between pointers of
    type <tt>long *</tt> and <tt>int64 *</tt>. DML now mirrors this
    behaviour, which makes it easier to call an externally defined C
    function that takes a <tt>long *</tt> argument. </add-note></build-id>
  <build-id value="6053"><add-note> Bitfield types are now considered
    compatible with the similarly
    sized unsigned integer type (e.g. <tt>bitfield 32 {...}</tt> is compatible
    with <tt>uint32</tt>). </add-note></build-id>
  <build-id value="6056"><add-note> Improved compatibility between DML 1.2 and
    1.4: The experimental
    <tt>dml12-compatibility.dml</tt> file now also provides shared access
    to typed variables defined in the common templates
    <tt>name</tt>, <tt>shown_desc</tt>, <tt>miss_pattern_bank</tt>, and
    <tt>function_mapped_bank</tt>. See the DML 1.4 reference manual
    for details on which typed parameters each
    template provides. </add-note></build-id>
  <build-id value="6056"><add-note> The experimental <tt>bank_obj</tt> template
    is available
    in DML 1.2 through the experimental <tt>dml12-compatibility</tt>
    file. See DML 1.4 releasenotes for the
    functionality provided. </add-note></build-id>
  <build-id value="6061"><add-note> Registers and attributes that do not define
    the <tt>documentation</tt>
    parameter are now considered internal by default, meaning that
    they will be excluded from reference documentation by default.
    This can be changed by explicitly overriding the <tt>internal</tt>
    parameter of the register or attribute. </add-note></build-id>
  <build-id value="6075"><add-note> Fixed a bug that could cause a segmentation
      fault when instantiating a device with register arrays following
      certain patterns <bug number="1508585437"/>.</add-note></build-id>
  <build-id value="6079"><add-note> If an array of <tt>connect</tt>
    objects is declared
    as <tt>configuration=optional</tt>, then it is now permitted to
    assign it a shorter list than the array size. For instance, a
    connect <tt>connect objs[i &lt; 10]</tt> now has the type
    string <tt>"o|[os]|n{0:10}"</tt> <bug number="SIMICS-16132"/>.
  </add-note></build-id>
  <build-id value="6079"><add-note> Improved DML's type
    system.  DMLC will now detect and report many type
      errors instead of generating broken C code. </add-note></build-id>
  <build-id value="6079"><add-note>
      typedefs of <tt>layout</tt> types may no longer be declared <tt>extern</tt>.
      It never worked to access members of such types, so they can safely
      be replaced with an opaque extern struct. E.g., if you have this
      declaration:<pre>
extern typedef layout "big-endian" {
  uint24 member;
} my_type_t;</pre>
      then you can safely replace it with:<pre>
extern typedef struct { } my_type_t;</pre> </add-note></build-id>
  <build-id value="6082"><add-note> <tt>group</tt> objects are now
      allowed anywhere in the device hierarchy. All kinds of objects
      except <tt>bank</tt>, <tt>port</tt>, <tt>interface</tt>
      and <tt>implement</tt> may reside inside a group (in DML 1.2,
      <tt>field</tt> objects are also disallowed inside
      groups) <bug number="SIMICS-16563"/>.</add-note></build-id>
  <build-id value="6082"><add-note> <tt>attribute</tt>, <tt>saved</tt>
      and <tt>session</tt> objects are now
      permitted also inside <tt>implement</tt> objects. </add-note></build-id>
  <build-id value="6088"><add-note> Fixed an issue where interfaces defined as
      typedeffed aliases of other interfaces would not work correctly in
      some cases.</add-note></build-id>
  <build-id value="6090"><add-note> Fixed a problem with strict
      aliasing; it is now safe to cast a <tt>uint8</tt> array to a
      layout pointer, assign to the layout members, and then access
      the arrays as bytes. This would sometimes give problems when using
      <tt>-fstrict-aliasing</tt> with new GCC versions
      <bug number="SIMICS-16978"/>. </add-note></build-id>
  <build-id value="6095"><add-note> DML devices compiled with simics-base
       6.0.82 or later cannot be loaded with simics-base earlier than
       6.0.76</add-note></build-id>
  <build-id value="6118"><add-note> <tt>after</tt> statements now support
      methods with serializable method parameters
      <bug number="SIMICS-7030"/>.</add-note></build-id>
  <build-id value="6119"><add-note> DMLC will now emit a warning when comparing
      an unsigned operand with a negative constant
      <bug number="SIMICS-17096"/>. </add-note></build-id>
  <build-id value="6124"><add-note> Single-bit wide ranges within bitfield
      declarations can now be specified through <tt>@ [<i>i</i>]</tt>, as
      with field objects <bug number="SIMICS-18156"/>.</add-note></build-id>
  <build-id value="6131"><add-note> The DMLC standard library is now
      licensed under the BSD Zero Clause
      License.</add-note></build-id>
  <build-id value="6131"><add-note> References to interface methods and
      <tt>shared</tt> methods are now allowed as parameter definitions.
      </add-note></build-id>
  <build-id value="6131"><add-note> The file <tt>dmllib.h</tt>, needed
      to compile DMLC-generated C files, has been moved
      to <tt><em>host</em>/bin/dml/include/simics</tt>. Makefiles have
      been updated to add this directory to the include
      path. </add-note></build-id>
  <build-id value="6132"><add-note> Fixed a problem with `log error`
      statements when there are more than 32 log groups
      <bug number="1305472692"/>. </add-note></build-id>
  <build-id value="6132"><add-note> Unicode BiDi control characters
      are no longer permitted in DML source files, for security
      reasons. </add-note></build-id>
  <build-id value="6135"><add-note> Addressed code generation efficiency issues
      when using array types in <tt>saved</tt> variables or parameters to
      methods called with <tt>after</tt> <bug number="SIMICS-18440"/>.

      Serialized representation of <tt>uint8[(be|le)_t]</tt> array types has
      been changed. The old serialized representation is still accepted for
      deserialization in order to preserve checkpoint compatibility.
  </add-note></build-id>
  <build-id value="6139"><add-note> Added support for non-constant
      compound initializers inside methods. For example, the following
      is now supported:
      <pre>
      local size_t size = get_size();
      local buffer_t buf = {size, new uint8[size]};
      </pre></add-note></build-id>
  <build-id value="6141"><add-note> <tt>break</tt> may now be used within
      <tt>foreach</tt> statements in DML 1.2 and <tt>#foreach</tt> statements in
      DML 1.4 <bug number="1309451301"/>.
  </add-note></build-id>
  <build-id value="next"><add-note> (Partially) const-qualified <tt>session</tt>
      variables no longer result in invalid generated C
      <bug number="SIMICS-9440"/>.</add-note></build-id>
  <build-id value="next"><add-note> Implicitly initialized <tt>local</tt>
      variables of (partially) const-qualified struct type no longer result in
      invalid generated C <bug number="SIMICS-10197"/>.</add-note></build-id>
</rn>
